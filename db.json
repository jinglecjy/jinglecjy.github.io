{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1533900188030},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1533900188030},{"_id":"themes/maupassant/README.md","hash":"a3dcfa9b646980ee5811ec03b4c5786618b85ff9","modified":1533900188031},{"_id":"themes/maupassant/_config.yml","hash":"d285c81326b2eafb79da6b184bde796f8aa0aaad","modified":1533900735489},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1533900188037},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539263864125},{"_id":"source/_posts/React前置知识01：SASS和COMPASS.md","hash":"743b09a6c57192153b7357ff5cd707e40e1856d8","modified":1533902773876},{"_id":"source/_posts/threejs基础下：贴图资源加载与光照.md","hash":"6b96b6627ded79c2be5fc0453735675751c862ab","modified":1539264182654},{"_id":"source/_posts/threejs基础上：初始化.md","hash":"b645b0ec0f64de60dc8f293576889855b35baaff","modified":1539265141061},{"_id":"source/_posts/threejs进阶上：动画.md","hash":"0a67783b8636de7467d720500fe859b85e0a9d45","modified":1539265380694},{"_id":"source/_posts/threejs进阶下：交互.md","hash":"8abe4ed0c4a7c373a2859bd233f7c0dca9b6f337","modified":1539265475986},{"_id":"source/_posts/threejs问题集锦.md","hash":"951df0571622ed8d06343e89d1be1cf960948d09","modified":1539265588533},{"_id":"source/_posts/vuepress搭建.md","hash":"3a3dab442be69c28e19d89b3eb96006f9673d5d4","modified":1533900858337},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1533900188023},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1533900188024},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1533900184140},{"_id":"themes/maupassant/.git/index","hash":"a4b200d188812563f7acc779945d0292a972cb89","modified":1533903863484},{"_id":"themes/maupassant/.git/packed-refs","hash":"af879af1afdc3423352746eef12e7698c689fa99","modified":1533900188021},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1533900188031},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1533900188031},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1533900188032},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1533900188032},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1533900188032},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1533900188032},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1533900188032},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1533900188032},{"_id":"themes/maupassant/layout/archive.pug","hash":"665582bb4092fcd81bfaf4d08fc1689abee1e6c4","modified":1533900188036},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1533900188036},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1533900188036},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1533900188036},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1533900188036},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1533900188037},{"_id":"themes/maupassant/layout/post.pug","hash":"ead043c9083507b919f5c504b89a50f90d928e57","modified":1533900188037},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1533900188037},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1533900184143},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1533900184141},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1533900184143},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1533900184145},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1533900184145},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1533900184142},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1533900184146},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1533900184141},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1533900184144},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1533900184144},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1533900184146},{"_id":"themes/maupassant/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1533900184140},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"5880591f820c9c731fdeda59267ed361108b0d25","modified":1533900188024},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"bf5e24891d18c19b31ef7887cd22ae2a74f9ad4b","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"69fa52eac8dfcf8073db7e540a4b0e87f41654f6","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"e672914a8451b269c1033cd8c55e026beb3a9135","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"e3a5e2d44ac261e3168a0b10e968f9a57bc5a237","modified":1533900188033},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"75cfa2cda3ff0681d03bbe89326818b824e5e524","modified":1533900188034},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1533900188034},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1533900188034},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1533900188034},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1533900188034},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1533900188034},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1533900188035},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1533900188035},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1533900188035},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1533900188035},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1533900188035},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1533900188035},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1533900188038},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1533900188038},{"_id":"themes/maupassant/source/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1533900188039},{"_id":"themes/maupassant/source/css/style.scss","hash":"b44da192f0875e144bf7990a99b42e31e986e099","modified":1533900188039},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1533900188039},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1533900188040},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1533900188040},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1533900188040},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1533900188040},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1533900188041},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1533900188041},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1533900188041},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1533900188041},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1533900188042},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1533900188042},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1533900188042},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1533900188043},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1533900188043},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1533900188043},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1533900188043},{"_id":"themes/maupassant/.git/objects/pack/pack-128dedba2b117c52a7999caa023cf040eeee1d3a.idx","hash":"807d55910eefd5198469bf31a4fff770da5657b3","modified":1533900188009},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"e5c0f939055304f017fc7686e2a02d268d7efe87","modified":1533900188023},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1533900188043},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"5880591f820c9c731fdeda59267ed361108b0d25","modified":1533900188024},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1533900188023},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"5880591f820c9c731fdeda59267ed361108b0d25","modified":1533900188023},{"_id":"themes/maupassant/.git/objects/pack/pack-128dedba2b117c52a7999caa023cf040eeee1d3a.pack","hash":"67a83157a5f97053470d4bcf562eb12e581b8add","modified":1533900188008},{"_id":"public/2018/10/11/threejs进阶下：交互/index.html","hash":"6585dcb4d0f6f194d97bf96d85c37aed98b15465","modified":1539265551925},{"_id":"public/2018/10/11/threejs进阶上：动画/index.html","hash":"67fccf8606aa9f487622f644f1bd399d0b8586c5","modified":1539265551926},{"_id":"public/2018/10/11/threejs基础上：初始化/index.html","hash":"9e7d3546b9856ad348ec3f70d47c0c3c83dfebf2","modified":1539265551926},{"_id":"public/2018/08/10/vuepress搭建/index.html","hash":"5c8dfa82358dba860e31ca7cc45b7b1570e3b003","modified":1539265551926},{"_id":"public/archives/index.html","hash":"a5ee499034fd1e5024c9acaf682345622cccd90b","modified":1539265551926},{"_id":"public/archives/2018/index.html","hash":"a5ee499034fd1e5024c9acaf682345622cccd90b","modified":1539265551926},{"_id":"public/archives/2018/08/index.html","hash":"ff7b231637743c393bed4e35e113610ff34769ed","modified":1539265551926},{"_id":"public/archives/2018/10/index.html","hash":"877a2fc2ba469ef7bbaebaa99536a2d8e3fec1ad","modified":1539265551927},{"_id":"public/categories/notes/index.html","hash":"2bac77e2af0a752bf3418d9b3bc17c1b6287c394","modified":1539265551927},{"_id":"public/categories/lesson/index.html","hash":"f83b9aede1e34a83d8ed9a4af611ad9438a90f93","modified":1539265551927},{"_id":"public/categories/tools/index.html","hash":"74e78f847f6ab608ef1e870f7d4dfea44b54e65f","modified":1539265551927},{"_id":"public/index.html","hash":"064d3dac4ba24aec8cebd04414baf1b79a4ee7cd","modified":1539265551927},{"_id":"public/tags/sass/index.html","hash":"78a25c8648e64a3018d87ef8374d3a4c69aa0e0f","modified":1539265551927},{"_id":"public/tags/compass/index.html","hash":"e118f678c10d25ec5ecbca39614f95a40301b46d","modified":1539265551927},{"_id":"public/tags/react/index.html","hash":"ec2e2a60dee90ea61f34eb220beb10de5ae7d964","modified":1539265551927},{"_id":"public/tags/threejs/index.html","hash":"6eab48c7a214e326e4871a9e1051f6ea860678bc","modified":1539265551927},{"_id":"public/2018/10/11/threejs基础下：贴图资源加载与光照/index.html","hash":"fc2f2b799859d42e1d7c0cbad8d7e5e7958e83ee","modified":1539265551927},{"_id":"public/2018/08/10/React前置知识01：SASS和COMPASS/index.html","hash":"23114c3350cf12a3375a52b9b5633e2961bb8d98","modified":1539265551927},{"_id":"public/2018/10/11/threejs问题集锦/index.html","hash":"6631abf5a6f1c9e6d99f680b5ef07d3def1f0eb4","modified":1539265597371},{"_id":"public/tags/小项目/index.html","hash":"dccda900a4a8e1997e72a463f53e461a01ee44c9","modified":1539265551929},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1539265551934},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1539265551934},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1539265551934},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1539265551934},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1539265551934},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1539265551934},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1539265551934},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1539265551934},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1539265551934},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1539265551966},{"_id":"public/donate/index.html","hash":"bd5cbe475b7bce89a8c96375c56c8e3e188d6afc","modified":1539265551966},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1539265551966},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1539265551966},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1539265551966},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1539265551967},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1539265551967},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1539265551967},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1539265551967},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1539265551967},{"_id":"public/css/style.css","hash":"773ad46efbd957c22bbbc2900521908f81c04d7a","modified":1539265551967},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1539265551967}],"Category":[{"name":"notes","_id":"cjn4mystt0002hd7o88vl5855"},{"name":"lesson","_id":"cjn4mysu30007hd7otz8kykfe"},{"name":"tools","_id":"cjn4mysu9000ohd7och21nntb"}],"Data":[],"Page":[],"Post":[{"layout":"posts","title":"React前置知识01：SASS和COMPASS","date":"2018-08-10T11:49:23.000Z","_content":"\n## Sass与Compass \n1. Compass是Sass基础上二次开发的工具。\n2. **优点**：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。\n3. **应用场景**：重构时自动化CSS；项目周期内更好组织项目内容。\n \n#### .sass和.scss\n```\n// .sass：类ruby语法，空格敏感\nh1\n    color: #000\n    background: #fff\n \n// .scss：类css语法，花括号\nh1 {color: red;}\n```\n \n## Sass\n#### sass安装及使用\n1. 安装ruby和rvm（可选，用于版本管理）\n2. 通过gem(ruby安装自带的一个包管理器)安装sass。  \n```\ngem sources -l // 显示当前的源\ngem sources --remove ... // 删除源...\ngem sources -a ... // 添加源..\ngem install sass // 安装sass\ngem install sass --version=3.5.6 // 安装版本为3.5.6的sass\ngem uninstall sass // 卸载sass\n```\n \n#### sass语法介绍\n```\nsass main.scss main.css // 编译成css文件\nsass-convert main.scss main.sass // .sass和.scss\n```\n1. 变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；\n    ```\n    $headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;\n    ```\n2. 文件引入`@import`：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过`import`引入。\n    ```\n    @import \"variables\";\n    // 多个import可用,分割\n    @import \"variables\", \"compass/reset\";\n    ```\n    ==注意==：这里的`@import`并不是css原生的`@import`（缺点：CSS原生的`@import`必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。\n    ```\n    以下情况使用的是css原生import\n    1. 文件名为.css结尾\n    @import \"variables.css\";\n    2. \"http://\"开头的字符串\n    @import \"http://variables.css\";\n    3. url()函数\n    @import url(\"variables.css\");\n    4. 跟有media queries\n    @import \"variables\" projection tv;\n    ```\n3. 嵌套语法和父类选择器\n    ```\n    // 类的嵌套\n    .head {\n        .content { color: red; }\n        &:hover { background: green; } // 父类选择器&\n        font: { // 属性嵌套\n            family: Arial;\n            size: 16px;\n        }\n    }\n    ```\n4. 变量操作\n    - 操作方式\n        - 直接操作变量，即变量表达式；\n        - 通过函数操作，函数包含以下几种：\n            - functions：跟代码块无关的函数，多为内置函数\n            - 可重用的代码块（类似于C中的宏macro）\n                - 使用时以复制拷贝的方式存在，称为mixin，通过@include调用\n                - 使用时以组合声明的形式存在，通过@extend调用\n    - 支持的运算操作符包含：`<,>,<=,>=,!=, ==, ()`。sass中的数值计算可以带单位，所以单位并不能混用。\n    - sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。\n    - mixin代码块的声明：一般放在页面顶部`@import`之后，或者单独抽离出一个文件，引入方法如下：  \n        ```\n        @mixin col-6 {\n            width: 50%;\n            float: left;\n        }\n        .webdemo {\n            @include col-6();\n        }\n \n        // 一种可以实现但是不建议的方法，\n        // 规范建议类名最好有语义化的作用，而非视觉化\n        @mixin col-6 {\n            .col-6 {\n                width: 50%;\n                float: left;\n            }\n        }\n \n        @include col-6();\n \n        // 带参数的mixin, 50%为默认参数\n        @mixin col ($width: 50%) {\n            width: $width;\n            float: left;\n        }\n        ```\n    - 组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。\n        ```\n        .error.instruction {\n            color: #0f0;\n        }\n \n        .error {\n            color: #f00;\n        }\n \n        .serious-error {\n            @extend .error;\n            border: 1px #f00;\n        }\n \n        <div class=\"serious-error instruction\">serious</div> // #0f0\n        ```\n        **注意**：extend不能继承选择器序列（即`@extend .A .B`不可行，会报错）；使用%可构建仅用于继承的选择器（`%name {...}`），不会出现在生成文件中。   \n \n5. sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  \n \n6. sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：\n     - 浏览器解析css文件是按照从右往左的顺序。即对于`.main .headline`会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  \n     - 增加了样式修饰的权重；\n     - 制造了样式位置的依赖；  \n \n    最佳实践是在命名的时候对类名进行语义化的命名，比如`.main-headline`，同时为了保留嵌套清晰易维护的优点，可以通过`at-root`指令指明将嵌套的内容输出到样式表顶层。   \n \n7. mixin的参数校验示例\n    ```\n    @mixin col-sm ($width: 50%) {\n        /*输入校验*/\n        @if type-of($width) != number {\n            @error \"$width必须是一个数值类型，目前输入的width是#{$width}.\";\n        }\n \n        @if not unitless($width) { /* 没有单位 */\n            @if unit($width) != \"%\" {\n                @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            }\n        } @else {\n            @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/\n        }\n        @media (min-width: 768px) {\n            width: $width;\n            float: left;\n        } \n    }\n    ```\n8. sass的四种输出格式`config.rb`中的`output_style`：\n    - expanded：默认，样式展开，与手动书写css习惯一致；\n    - nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；\n    - compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；\n    - compressed：样式表压缩以占用最少的空间。\n \n9. 其他：`@each` `@for` `@while`\n \n10. 常用网址\n    - Sass中的functions详情页：http://sass-lang.com/documentation/Sass/Script/Functions.html\n    - Sass和Compass必备技能之Sass篇（视频教程）：https://www.imooc.com/video/7155\n \n## Compass\n#### compass安装及使用\n1. 通过`gem install compass`即可安装成功\n2. Compass目录创建  \n```\ncompass create file-name // 初始化工作目录，file-name为生成的文件名\n```\n3. 目录结构  \n```\nsass：\n    - _*.scss：用于被其他sass文件引入，不会被单独编译\n    - *.scss：会被单独编译\n    注意：同一目录下，局部文件和非局部文件不能重名\nstylesheets：sass文件编译生成的css文件\nconfig.rb：配置项目文件\n```\n4. 命令\n```\ncompass compile [path/to/project] // 按需编译\ncompass watch [path/to/project] // 监听目录编译\n```\n#### compass核心模块\nCSS3、Helpers、Typography、Utilities模块通过`@import \"compass\"`就可以直接引入；而Reset和Layout模块需要分别通过`@import \"compass/reset\"`和`@import \"compass/layout`明确指定引入。  \n- CSS3：跨浏览器的CSS3兼容能力  \n- Helpers：内含多函数，比较少用到  \n- Typography：修饰文本样式  \n- Utilities：辅助工具模块，多为mixins  \n- Reset：浏览器样式重置模块  \n- Layout：提供对页面布局的控制 \n \n除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    \n\n1. **reset模块**\n    所有包含的模块可见：http://compass-style.org/reference/compass/reset/utilities/  \n    可以通过调用mixins来调用不同的模块。   \n```\n    // 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：\n    .test {\n        @include nested-reset;\n    }\n\n    // 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：\n    // 第一个参数为选择器，第二个参数为是否强制覆盖（!important）\n    @include reset-display('.test', true); \n```\n\n    ==使用normalize替代==\n\n    ```\n    gem install compass-normalize # 下载normalize\n    require 'compass-normalize' # 在config.rb引入\n\n    @import \"normalize\"; # 在scss文件中替换reset\n    ```\n\n    normalize核心模块本身包含八个部分：\n    - base: body和html标签的字体文字大小边距等\n    - html5: 统一html5中新增的元素样式，如article、section的展现形式\n    - links: 统一a标签的展示形式，去掉hover和active时的下划线\n    - typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰\n    - embeds: img, svg等\n    - groups: figure, pre, code等\n    - forms: form相关的button, input, textarea等\n    - tables: table相关table, td, th等\n    这八个部分可以通过子路径单独引入，如`@import \"normalize/base\";`，通过子类引入的方法需要在前置位置添加`@import \"normalize-version\";`。\n     \n\n2. **layout模块**（使用率低）  \nhttp://compass-style.org/reference/compass/layout/\n内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如`@import \"compass/layout/grid-background\"`的方式显示引入。   \n    - stretch：拉伸填充。通过`@include stretch(top, right, bottom, left)`调用，将元素拉伸填充屏幕，参数可缺省。  \n    - sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。\n    - grid-background: 使用css3中的grid定宽定高自适应宽高   \n   \n\n3. **CSS3模块&Browser Support 模块**     \n    - [CSS3模块](http://compass-style.org/reference/compass/css3/)：封装了CSS3新属性，通过调用对应的新属性即可，如`@include box-shadow(1px 1px 2px 2px #aaa);`，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。\n    - Browser Support模块：通过`@import \"compass/support\"`可直接引入，实际上CSS3已引入了该模块。\n        - `browser()`：通过`@debug browser()`可显示出当前支持的浏览器；\n        - `browser-version('chrome')`：显示当前对应浏览器考虑的所有版本；\n        - `$supported-browsers: chrome firefox`：限制当前支持的浏览器；\n        - `$browser-minmum-versions: (\"ie\": \"8\")`：通过键值对的方法限制最低支持的版本；\n        - `$graceful-usage-threshold=0.1`：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   \n        - `$critical-usage-threshold=0.01`：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      \n           \n\n4. **Typography模块**   \n    - Links\n        - `@include hover-link();`：正常态下去掉下划线，在hover或者focus时才显示\n        - `@include  link-colors(normal, hover, active, visited, focus)`：设置不同状态下的颜色值，只有第一个参数是必须参数\n        - `@include unstyle-link()`：抹平超链接样式\n    - Lists\n        - `@include no-bullets()`： 去掉列表前的list-style，包含ul和li下\n        - `@include no-bullet()`： 去掉单个li元素前的list-style\n        - `@include inline-list()`：使得list横向布局，通过设置为`inline`实现\n        - `@include horizontal-list(padding, float)`：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。\n        - `@include inline-block-list(padding)`：目的同上，通过设置li的display值为inline-block实现。\n        \n    - Text\n        - `@include force-wrap()`：连续长文本强制换行（如url等）\n        - `@include nowrap()`：连续长文本强制不换行，其实等同于`white-space: nowrap;`\n        - `@include ellipsis()`：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装`compass install ellipsis`，通过`$use-mozilla-ellipsis-binding: true;`开启对firefox低版本的支持。   \n        - `@include hide-text()`：隐藏文本，text-indent实现\n        - `@include squish-text()`：隐藏文本，通过font-size/opacity实现\n        - `@include replace-text(url, bg-pos-x, bg-pos-y)`：设置背景图片\n        - `@include replace-text-with-dimensions(本地图片地址)`：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致\n\n    - Vertical Rhythm\n        行内容间的留白，让所有文本元素的高度是基准高的整数倍   \n   \n\n5. **Helpers模块**  \n     Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。\n    - Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。`background-image: inline-image('image.png')` 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。\n    - `image-url('image.png')`：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。`stylesheet-url`和`font-url`用于管理指向CSS目录和font目录的资源文件路径，用法类似。   \n    - `compass-env()`：compass编译环境，只有两个返回值development和production。\n    - `image-width()`和`image-height()`：用于计算图片的宽和高   \n    - `append-selector($selector, $to-append)`：将第二个参数叠加组合到第一个参数中生成学则器。    \n\n   \n6. **Utilities模块**\n   Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：`Color`、`Print`、`Tables`、`General`、`Sprites`。\n    - Color\n        - `brightness($color)`：计算颜色的亮度\n        - contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   \n    - Print\n        必须在两个文件中协同使用，`pirnt.scss`和`screen.scss`都需要引入print模块，主要是应用于适配打印设备。\n        - `print-utilities`：在`screen.scss`中调用需要传参`@include print-utilities(screen)`不传默认为`print.scss`中。\n    - Tables\n        - `outer|inner-tables-borders($width, $color)`：分别用于设置table内外边框\n        - `table-scaffolding()`：单元格文本对齐和padding初始化，`th`居中，`.numberic`右对齐。\n        - `alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)`：对奇偶行|相隔列进行不同的颜色修饰。\n    - General\n        -`clearfix()`：通过在`.clearfix`中设置`overflow:hidden`清除浮动。\n        -`legacy-pie-clearfix()`：通过伪类清除浮动。\n        -`float($\bdirection)`：根据配置设置是否启用对IE6的hack解决double float-margin bug。\n        -`min-height|width($length)`：设置min-height/min-width，兼容IE。\n        -`tag-cloud($baseFontSize)`：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。\n    - Sprites\n        主要是通过`sprite helpers`实现。\n        ```\n        @import \"compass/utilities/sprites;\n        @import \"logo/*.png\";  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */\n        @include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */\n        ```\n        图片引用的方法有两种，一个是直接在对应元素中添加对应类名`logo-imageName`；另一个则是通过`@include logo-sprite(\"imageName\")`的方法。   \n        - 对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为`imageName_hover.png`等，compass就会自动生成对应样式。可通过设置`$disable-magic-sprite-selectors:true`关闭该特性。\n        - `$logo-layout: vertical|horizontal|diagonal|smart`：生成精灵图的布局方式设置。\n\n   \n#### compass其他知识\n1. config.rb中`require 'compass/import-once/activate'`：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import \"compass/reset!\"来引入后面的重复引用文件。  \n2. 当使用`compressed`作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如`/*! hahaha */`来避免被去除。\n3. `@debug`可以在控制台显示出mixins函数等对应的输出，如`@debug browser()`显示出的当前compass支持的浏览器，类似于console.log()的功能；\n4. 通过在控制台输入`compass interactive`可以进入console，直接调用mixins。   \n5. compass生成地址的时候，默认生成的都是绝对地址，认为`config.rb`所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  \n6. `compile compass -e production --force`：强制compass在production环境下编译，也可以在config.rb中配置`environment = :development`。   \n7. 在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。\n","source":"_posts/React前置知识01：SASS和COMPASS.md","raw":"---\nlayout: posts\ntitle: React前置知识01：SASS和COMPASS\ndate: 2018-08-10 19:49:23\ntags: [sass, compass, react]\ncategory: notes\n---\n\n## Sass与Compass \n1. Compass是Sass基础上二次开发的工具。\n2. **优点**：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。\n3. **应用场景**：重构时自动化CSS；项目周期内更好组织项目内容。\n \n#### .sass和.scss\n```\n// .sass：类ruby语法，空格敏感\nh1\n    color: #000\n    background: #fff\n \n// .scss：类css语法，花括号\nh1 {color: red;}\n```\n \n## Sass\n#### sass安装及使用\n1. 安装ruby和rvm（可选，用于版本管理）\n2. 通过gem(ruby安装自带的一个包管理器)安装sass。  \n```\ngem sources -l // 显示当前的源\ngem sources --remove ... // 删除源...\ngem sources -a ... // 添加源..\ngem install sass // 安装sass\ngem install sass --version=3.5.6 // 安装版本为3.5.6的sass\ngem uninstall sass // 卸载sass\n```\n \n#### sass语法介绍\n```\nsass main.scss main.css // 编译成css文件\nsass-convert main.scss main.sass // .sass和.scss\n```\n1. 变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；\n    ```\n    $headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;\n    ```\n2. 文件引入`@import`：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过`import`引入。\n    ```\n    @import \"variables\";\n    // 多个import可用,分割\n    @import \"variables\", \"compass/reset\";\n    ```\n    ==注意==：这里的`@import`并不是css原生的`@import`（缺点：CSS原生的`@import`必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。\n    ```\n    以下情况使用的是css原生import\n    1. 文件名为.css结尾\n    @import \"variables.css\";\n    2. \"http://\"开头的字符串\n    @import \"http://variables.css\";\n    3. url()函数\n    @import url(\"variables.css\");\n    4. 跟有media queries\n    @import \"variables\" projection tv;\n    ```\n3. 嵌套语法和父类选择器\n    ```\n    // 类的嵌套\n    .head {\n        .content { color: red; }\n        &:hover { background: green; } // 父类选择器&\n        font: { // 属性嵌套\n            family: Arial;\n            size: 16px;\n        }\n    }\n    ```\n4. 变量操作\n    - 操作方式\n        - 直接操作变量，即变量表达式；\n        - 通过函数操作，函数包含以下几种：\n            - functions：跟代码块无关的函数，多为内置函数\n            - 可重用的代码块（类似于C中的宏macro）\n                - 使用时以复制拷贝的方式存在，称为mixin，通过@include调用\n                - 使用时以组合声明的形式存在，通过@extend调用\n    - 支持的运算操作符包含：`<,>,<=,>=,!=, ==, ()`。sass中的数值计算可以带单位，所以单位并不能混用。\n    - sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。\n    - mixin代码块的声明：一般放在页面顶部`@import`之后，或者单独抽离出一个文件，引入方法如下：  \n        ```\n        @mixin col-6 {\n            width: 50%;\n            float: left;\n        }\n        .webdemo {\n            @include col-6();\n        }\n \n        // 一种可以实现但是不建议的方法，\n        // 规范建议类名最好有语义化的作用，而非视觉化\n        @mixin col-6 {\n            .col-6 {\n                width: 50%;\n                float: left;\n            }\n        }\n \n        @include col-6();\n \n        // 带参数的mixin, 50%为默认参数\n        @mixin col ($width: 50%) {\n            width: $width;\n            float: left;\n        }\n        ```\n    - 组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。\n        ```\n        .error.instruction {\n            color: #0f0;\n        }\n \n        .error {\n            color: #f00;\n        }\n \n        .serious-error {\n            @extend .error;\n            border: 1px #f00;\n        }\n \n        <div class=\"serious-error instruction\">serious</div> // #0f0\n        ```\n        **注意**：extend不能继承选择器序列（即`@extend .A .B`不可行，会报错）；使用%可构建仅用于继承的选择器（`%name {...}`），不会出现在生成文件中。   \n \n5. sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  \n \n6. sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：\n     - 浏览器解析css文件是按照从右往左的顺序。即对于`.main .headline`会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  \n     - 增加了样式修饰的权重；\n     - 制造了样式位置的依赖；  \n \n    最佳实践是在命名的时候对类名进行语义化的命名，比如`.main-headline`，同时为了保留嵌套清晰易维护的优点，可以通过`at-root`指令指明将嵌套的内容输出到样式表顶层。   \n \n7. mixin的参数校验示例\n    ```\n    @mixin col-sm ($width: 50%) {\n        /*输入校验*/\n        @if type-of($width) != number {\n            @error \"$width必须是一个数值类型，目前输入的width是#{$width}.\";\n        }\n \n        @if not unitless($width) { /* 没有单位 */\n            @if unit($width) != \"%\" {\n                @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            }\n        } @else {\n            @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/\n        }\n        @media (min-width: 768px) {\n            width: $width;\n            float: left;\n        } \n    }\n    ```\n8. sass的四种输出格式`config.rb`中的`output_style`：\n    - expanded：默认，样式展开，与手动书写css习惯一致；\n    - nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；\n    - compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；\n    - compressed：样式表压缩以占用最少的空间。\n \n9. 其他：`@each` `@for` `@while`\n \n10. 常用网址\n    - Sass中的functions详情页：http://sass-lang.com/documentation/Sass/Script/Functions.html\n    - Sass和Compass必备技能之Sass篇（视频教程）：https://www.imooc.com/video/7155\n \n## Compass\n#### compass安装及使用\n1. 通过`gem install compass`即可安装成功\n2. Compass目录创建  \n```\ncompass create file-name // 初始化工作目录，file-name为生成的文件名\n```\n3. 目录结构  \n```\nsass：\n    - _*.scss：用于被其他sass文件引入，不会被单独编译\n    - *.scss：会被单独编译\n    注意：同一目录下，局部文件和非局部文件不能重名\nstylesheets：sass文件编译生成的css文件\nconfig.rb：配置项目文件\n```\n4. 命令\n```\ncompass compile [path/to/project] // 按需编译\ncompass watch [path/to/project] // 监听目录编译\n```\n#### compass核心模块\nCSS3、Helpers、Typography、Utilities模块通过`@import \"compass\"`就可以直接引入；而Reset和Layout模块需要分别通过`@import \"compass/reset\"`和`@import \"compass/layout`明确指定引入。  \n- CSS3：跨浏览器的CSS3兼容能力  \n- Helpers：内含多函数，比较少用到  \n- Typography：修饰文本样式  \n- Utilities：辅助工具模块，多为mixins  \n- Reset：浏览器样式重置模块  \n- Layout：提供对页面布局的控制 \n \n除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    \n\n1. **reset模块**\n    所有包含的模块可见：http://compass-style.org/reference/compass/reset/utilities/  \n    可以通过调用mixins来调用不同的模块。   \n```\n    // 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：\n    .test {\n        @include nested-reset;\n    }\n\n    // 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：\n    // 第一个参数为选择器，第二个参数为是否强制覆盖（!important）\n    @include reset-display('.test', true); \n```\n\n    ==使用normalize替代==\n\n    ```\n    gem install compass-normalize # 下载normalize\n    require 'compass-normalize' # 在config.rb引入\n\n    @import \"normalize\"; # 在scss文件中替换reset\n    ```\n\n    normalize核心模块本身包含八个部分：\n    - base: body和html标签的字体文字大小边距等\n    - html5: 统一html5中新增的元素样式，如article、section的展现形式\n    - links: 统一a标签的展示形式，去掉hover和active时的下划线\n    - typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰\n    - embeds: img, svg等\n    - groups: figure, pre, code等\n    - forms: form相关的button, input, textarea等\n    - tables: table相关table, td, th等\n    这八个部分可以通过子路径单独引入，如`@import \"normalize/base\";`，通过子类引入的方法需要在前置位置添加`@import \"normalize-version\";`。\n     \n\n2. **layout模块**（使用率低）  \nhttp://compass-style.org/reference/compass/layout/\n内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如`@import \"compass/layout/grid-background\"`的方式显示引入。   \n    - stretch：拉伸填充。通过`@include stretch(top, right, bottom, left)`调用，将元素拉伸填充屏幕，参数可缺省。  \n    - sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。\n    - grid-background: 使用css3中的grid定宽定高自适应宽高   \n   \n\n3. **CSS3模块&Browser Support 模块**     \n    - [CSS3模块](http://compass-style.org/reference/compass/css3/)：封装了CSS3新属性，通过调用对应的新属性即可，如`@include box-shadow(1px 1px 2px 2px #aaa);`，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。\n    - Browser Support模块：通过`@import \"compass/support\"`可直接引入，实际上CSS3已引入了该模块。\n        - `browser()`：通过`@debug browser()`可显示出当前支持的浏览器；\n        - `browser-version('chrome')`：显示当前对应浏览器考虑的所有版本；\n        - `$supported-browsers: chrome firefox`：限制当前支持的浏览器；\n        - `$browser-minmum-versions: (\"ie\": \"8\")`：通过键值对的方法限制最低支持的版本；\n        - `$graceful-usage-threshold=0.1`：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   \n        - `$critical-usage-threshold=0.01`：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      \n           \n\n4. **Typography模块**   \n    - Links\n        - `@include hover-link();`：正常态下去掉下划线，在hover或者focus时才显示\n        - `@include  link-colors(normal, hover, active, visited, focus)`：设置不同状态下的颜色值，只有第一个参数是必须参数\n        - `@include unstyle-link()`：抹平超链接样式\n    - Lists\n        - `@include no-bullets()`： 去掉列表前的list-style，包含ul和li下\n        - `@include no-bullet()`： 去掉单个li元素前的list-style\n        - `@include inline-list()`：使得list横向布局，通过设置为`inline`实现\n        - `@include horizontal-list(padding, float)`：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。\n        - `@include inline-block-list(padding)`：目的同上，通过设置li的display值为inline-block实现。\n        \n    - Text\n        - `@include force-wrap()`：连续长文本强制换行（如url等）\n        - `@include nowrap()`：连续长文本强制不换行，其实等同于`white-space: nowrap;`\n        - `@include ellipsis()`：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装`compass install ellipsis`，通过`$use-mozilla-ellipsis-binding: true;`开启对firefox低版本的支持。   \n        - `@include hide-text()`：隐藏文本，text-indent实现\n        - `@include squish-text()`：隐藏文本，通过font-size/opacity实现\n        - `@include replace-text(url, bg-pos-x, bg-pos-y)`：设置背景图片\n        - `@include replace-text-with-dimensions(本地图片地址)`：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致\n\n    - Vertical Rhythm\n        行内容间的留白，让所有文本元素的高度是基准高的整数倍   \n   \n\n5. **Helpers模块**  \n     Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。\n    - Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。`background-image: inline-image('image.png')` 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。\n    - `image-url('image.png')`：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。`stylesheet-url`和`font-url`用于管理指向CSS目录和font目录的资源文件路径，用法类似。   \n    - `compass-env()`：compass编译环境，只有两个返回值development和production。\n    - `image-width()`和`image-height()`：用于计算图片的宽和高   \n    - `append-selector($selector, $to-append)`：将第二个参数叠加组合到第一个参数中生成学则器。    \n\n   \n6. **Utilities模块**\n   Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：`Color`、`Print`、`Tables`、`General`、`Sprites`。\n    - Color\n        - `brightness($color)`：计算颜色的亮度\n        - contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   \n    - Print\n        必须在两个文件中协同使用，`pirnt.scss`和`screen.scss`都需要引入print模块，主要是应用于适配打印设备。\n        - `print-utilities`：在`screen.scss`中调用需要传参`@include print-utilities(screen)`不传默认为`print.scss`中。\n    - Tables\n        - `outer|inner-tables-borders($width, $color)`：分别用于设置table内外边框\n        - `table-scaffolding()`：单元格文本对齐和padding初始化，`th`居中，`.numberic`右对齐。\n        - `alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)`：对奇偶行|相隔列进行不同的颜色修饰。\n    - General\n        -`clearfix()`：通过在`.clearfix`中设置`overflow:hidden`清除浮动。\n        -`legacy-pie-clearfix()`：通过伪类清除浮动。\n        -`float($\bdirection)`：根据配置设置是否启用对IE6的hack解决double float-margin bug。\n        -`min-height|width($length)`：设置min-height/min-width，兼容IE。\n        -`tag-cloud($baseFontSize)`：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。\n    - Sprites\n        主要是通过`sprite helpers`实现。\n        ```\n        @import \"compass/utilities/sprites;\n        @import \"logo/*.png\";  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */\n        @include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */\n        ```\n        图片引用的方法有两种，一个是直接在对应元素中添加对应类名`logo-imageName`；另一个则是通过`@include logo-sprite(\"imageName\")`的方法。   \n        - 对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为`imageName_hover.png`等，compass就会自动生成对应样式。可通过设置`$disable-magic-sprite-selectors:true`关闭该特性。\n        - `$logo-layout: vertical|horizontal|diagonal|smart`：生成精灵图的布局方式设置。\n\n   \n#### compass其他知识\n1. config.rb中`require 'compass/import-once/activate'`：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import \"compass/reset!\"来引入后面的重复引用文件。  \n2. 当使用`compressed`作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如`/*! hahaha */`来避免被去除。\n3. `@debug`可以在控制台显示出mixins函数等对应的输出，如`@debug browser()`显示出的当前compass支持的浏览器，类似于console.log()的功能；\n4. 通过在控制台输入`compass interactive`可以进入console，直接调用mixins。   \n5. compass生成地址的时候，默认生成的都是绝对地址，认为`config.rb`所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  \n6. `compile compass -e production --force`：强制compass在production环境下编译，也可以在config.rb中配置`environment = :development`。   \n7. 在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。\n","slug":"React前置知识01：SASS和COMPASS","published":1,"updated":"2018-08-10T12:06:13.876Z","comments":1,"photos":[],"link":"","_id":"cjn4mystn0000hd7okzu1n691","content":"<h2 id=\"Sass与Compass\"><a href=\"#Sass与Compass\" class=\"headerlink\" title=\"Sass与Compass\"></a>Sass与Compass</h2><ol>\n<li>Compass是Sass基础上二次开发的工具。</li>\n<li><strong>优点</strong>：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。</li>\n<li><strong>应用场景</strong>：重构时自动化CSS；项目周期内更好组织项目内容。</li>\n</ol>\n<h4 id=\"sass和-scss\"><a href=\"#sass和-scss\" class=\"headerlink\" title=\".sass和.scss\"></a>.sass和.scss</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .sass：类ruby语法，空格敏感</span><br><span class=\"line\">h1</span><br><span class=\"line\">    color: #000</span><br><span class=\"line\">    background: #fff</span><br><span class=\"line\"> </span><br><span class=\"line\">// .scss：类css语法，花括号</span><br><span class=\"line\">h1 &#123;color: red;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h2><h4 id=\"sass安装及使用\"><a href=\"#sass安装及使用\" class=\"headerlink\" title=\"sass安装及使用\"></a>sass安装及使用</h4><ol>\n<li>安装ruby和rvm（可选，用于版本管理）</li>\n<li>通过gem(ruby安装自带的一个包管理器)安装sass。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l // 显示当前的源</span><br><span class=\"line\">gem sources --remove ... // 删除源...</span><br><span class=\"line\">gem sources -a ... // 添加源..</span><br><span class=\"line\">gem install sass // 安装sass</span><br><span class=\"line\">gem install sass --version=3.5.6 // 安装版本为3.5.6的sass</span><br><span class=\"line\">gem uninstall sass // 卸载sass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sass语法介绍\"><a href=\"#sass语法介绍\" class=\"headerlink\" title=\"sass语法介绍\"></a>sass语法介绍</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass main.scss main.css // 编译成css文件</span><br><span class=\"line\">sass-convert main.scss main.sass // .sass和.scss</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件引入<code>@import</code>：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过<code>import</code>引入。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;variables&quot;;</span><br><span class=\"line\">// 多个import可用,分割</span><br><span class=\"line\">@import &quot;variables&quot;, &quot;compass/reset&quot;;</span><br></pre></td></tr></table></figure>\n<p> ==注意==：这里的<code>@import</code>并不是css原生的<code>@import</code>（缺点：CSS原生的<code>@import</code>必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下情况使用的是css原生import</span><br><span class=\"line\">1. 文件名为.css结尾</span><br><span class=\"line\">@import &quot;variables.css&quot;;</span><br><span class=\"line\">2. &quot;http://&quot;开头的字符串</span><br><span class=\"line\">@import &quot;http://variables.css&quot;;</span><br><span class=\"line\">3. url()函数</span><br><span class=\"line\">@import url(&quot;variables.css&quot;);</span><br><span class=\"line\">4. 跟有media queries</span><br><span class=\"line\">@import &quot;variables&quot; projection tv;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套语法和父类选择器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类的嵌套</span><br><span class=\"line\">.head &#123;</span><br><span class=\"line\">    .content &#123; color: red; &#125;</span><br><span class=\"line\">    &amp;:hover &#123; background: green; &#125; // 父类选择器&amp;</span><br><span class=\"line\">    font: &#123; // 属性嵌套</span><br><span class=\"line\">        family: Arial;</span><br><span class=\"line\">        size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量操作</p>\n<ul>\n<li>操作方式<ul>\n<li>直接操作变量，即变量表达式；</li>\n<li>通过函数操作，函数包含以下几种：<ul>\n<li>functions：跟代码块无关的函数，多为内置函数</li>\n<li>可重用的代码块（类似于C中的宏macro）<ul>\n<li>使用时以复制拷贝的方式存在，称为mixin，通过@include调用</li>\n<li>使用时以组合声明的形式存在，通过@extend调用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持的运算操作符包含：<code>&lt;,&gt;,&lt;=,&gt;=,!=, ==, ()</code>。sass中的数值计算可以带单位，所以单位并不能混用。</li>\n<li>sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。</li>\n<li><p>mixin代码块的声明：一般放在页面顶部<code>@import</code>之后，或者单独抽离出一个文件，引入方法如下：  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@mixin col-6 &#123;</span><br><span class=\"line\">    width: 50%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.webdemo &#123;</span><br><span class=\"line\">    @include col-6();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 一种可以实现但是不建议的方法，</span><br><span class=\"line\">// 规范建议类名最好有语义化的作用，而非视觉化</span><br><span class=\"line\">@mixin col-6 &#123;</span><br><span class=\"line\">    .col-6 &#123;</span><br><span class=\"line\">        width: 50%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@include col-6();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 带参数的mixin, 50%为默认参数</span><br><span class=\"line\">@mixin col ($width: 50%) &#123;</span><br><span class=\"line\">    width: $width;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error.instruction &#123;</span><br><span class=\"line\">    color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.error &#123;</span><br><span class=\"line\">    color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.serious-error &#123;</span><br><span class=\"line\">    @extend .error;</span><br><span class=\"line\">    border: 1px #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;div class=&quot;serious-error instruction&quot;&gt;serious&lt;/div&gt; // #0f0</span><br></pre></td></tr></table></figure>\n<p>  <strong>注意</strong>：extend不能继承选择器序列（即<code>@extend .A .B</code>不可行，会报错）；使用%可构建仅用于继承的选择器（<code>%name {...}</code>），不会出现在生成文件中。   </p>\n</li>\n</ul>\n</li>\n<li><p>sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  </p>\n</li>\n<li><p>sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：</p>\n<ul>\n<li>浏览器解析css文件是按照从右往左的顺序。即对于<code>.main .headline</code>会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  </li>\n<li>增加了样式修饰的权重；</li>\n<li><p>制造了样式位置的依赖；  </p>\n<p>最佳实践是在命名的时候对类名进行语义化的命名，比如<code>.main-headline</code>，同时为了保留嵌套清晰易维护的优点，可以通过<code>at-root</code>指令指明将嵌套的内容输出到样式表顶层。   </p>\n</li>\n</ul>\n</li>\n<li><p>mixin的参数校验示例</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@mixin col-sm ($width: 50%) &#123;</span><br><span class=\"line\">    /*输入校验*/</span><br><span class=\"line\">    @if type-of($width) != number &#123;</span><br><span class=\"line\">        @error &quot;$width必须是一个数值类型，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @if not unitless($width) &#123; /* 没有单位 */</span><br><span class=\"line\">        @if unit($width) != &quot;%&quot; &#123;</span><br><span class=\"line\">            @warn &quot;$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; @else &#123;</span><br><span class=\"line\">        @warn &quot;$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">        $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @media (min-width: 768px) &#123;</span><br><span class=\"line\">        width: $width;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sass的四种输出格式<code>config.rb</code>中的<code>output_style</code>：</p>\n<ul>\n<li>expanded：默认，样式展开，与手动书写css习惯一致；</li>\n<li>nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；</li>\n<li>compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；</li>\n<li>compressed：样式表压缩以占用最少的空间。</li>\n</ul>\n</li>\n<li><p>其他：<code>@each</code> <code>@for</code> <code>@while</code></p>\n</li>\n<li><p>常用网址</p>\n<ul>\n<li>Sass中的functions详情页：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/documentation/Sass/Script/Functions.html</a></li>\n<li>Sass和Compass必备技能之Sass篇（视频教程）：<a href=\"https://www.imooc.com/video/7155\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/7155</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Compass\"><a href=\"#Compass\" class=\"headerlink\" title=\"Compass\"></a>Compass</h2><h4 id=\"compass安装及使用\"><a href=\"#compass安装及使用\" class=\"headerlink\" title=\"compass安装及使用\"></a>compass安装及使用</h4><ol>\n<li>通过<code>gem install compass</code>即可安装成功</li>\n<li><p>Compass目录创建  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass create file-name // 初始化工作目录，file-name为生成的文件名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass：</span><br><span class=\"line\">    - _*.scss：用于被其他sass文件引入，不会被单独编译</span><br><span class=\"line\">    - *.scss：会被单独编译</span><br><span class=\"line\">    注意：同一目录下，局部文件和非局部文件不能重名</span><br><span class=\"line\">stylesheets：sass文件编译生成的css文件</span><br><span class=\"line\">config.rb：配置项目文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass compile [path/to/project] // 按需编译</span><br><span class=\"line\">compass watch [path/to/project] // 监听目录编译</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"compass核心模块\"><a href=\"#compass核心模块\" class=\"headerlink\" title=\"compass核心模块\"></a>compass核心模块</h4><p>CSS3、Helpers、Typography、Utilities模块通过<code>@import &quot;compass&quot;</code>就可以直接引入；而Reset和Layout模块需要分别通过<code>@import &quot;compass/reset&quot;</code>和<code>@import &quot;compass/layout</code>明确指定引入。  </p>\n<ul>\n<li>CSS3：跨浏览器的CSS3兼容能力  </li>\n<li>Helpers：内含多函数，比较少用到  </li>\n<li>Typography：修饰文本样式  </li>\n<li>Utilities：辅助工具模块，多为mixins  </li>\n<li>Reset：浏览器样式重置模块  </li>\n<li>Layout：提供对页面布局的控制 </li>\n</ul>\n<p>除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    </p>\n<ol>\n<li><p><strong>reset模块</strong><br> 所有包含的模块可见：<a href=\"http://compass-style.org/reference/compass/reset/utilities/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/reset/utilities/</a><br> 可以通过调用mixins来调用不同的模块。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">    @include nested-reset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：</span><br><span class=\"line\">// 第一个参数为选择器，第二个参数为是否强制覆盖（!important）</span><br><span class=\"line\">@include reset-display(&apos;.test&apos;, true);</span><br></pre></td></tr></table></figure>\n<p> ==使用normalize替代==</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install compass-normalize # 下载normalize</span><br><span class=\"line\">require &apos;compass-normalize&apos; # 在config.rb引入</span><br><span class=\"line\"></span><br><span class=\"line\">@import &quot;normalize&quot;; # 在scss文件中替换reset</span><br></pre></td></tr></table></figure>\n<p> normalize核心模块本身包含八个部分：</p>\n<ul>\n<li>base: body和html标签的字体文字大小边距等</li>\n<li>html5: 统一html5中新增的元素样式，如article、section的展现形式</li>\n<li>links: 统一a标签的展示形式，去掉hover和active时的下划线</li>\n<li>typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰</li>\n<li>embeds: img, svg等</li>\n<li>groups: figure, pre, code等</li>\n<li>forms: form相关的button, input, textarea等</li>\n<li>tables: table相关table, td, th等<br>这八个部分可以通过子路径单独引入，如<code>@import &quot;normalize/base&quot;;</code>，通过子类引入的方法需要在前置位置添加<code>@import &quot;normalize-version&quot;;</code>。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>layout模块</strong>（使用率低）<br><a href=\"http://compass-style.org/reference/compass/layout/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/layout/</a><br>内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如<code>@import &quot;compass/layout/grid-background&quot;</code>的方式显示引入。   <ul>\n<li>stretch：拉伸填充。通过<code>@include stretch(top, right, bottom, left)</code>调用，将元素拉伸填充屏幕，参数可缺省。  </li>\n<li>sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。</li>\n<li>grid-background: 使用css3中的grid定宽定高自适应宽高   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><strong>CSS3模块&amp;Browser Support 模块</strong>     <ul>\n<li><a href=\"http://compass-style.org/reference/compass/css3/\" target=\"_blank\" rel=\"noopener\">CSS3模块</a>：封装了CSS3新属性，通过调用对应的新属性即可，如<code>@include box-shadow(1px 1px 2px 2px #aaa);</code>，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。</li>\n<li>Browser Support模块：通过<code>@import &quot;compass/support&quot;</code>可直接引入，实际上CSS3已引入了该模块。<ul>\n<li><code>browser()</code>：通过<code>@debug browser()</code>可显示出当前支持的浏览器；</li>\n<li><code>browser-version(&#39;chrome&#39;)</code>：显示当前对应浏览器考虑的所有版本；</li>\n<li><code>$supported-browsers: chrome firefox</code>：限制当前支持的浏览器；</li>\n<li><code>$browser-minmum-versions: (&quot;ie&quot;: &quot;8&quot;)</code>：通过键值对的方法限制最低支持的版本；</li>\n<li><code>$graceful-usage-threshold=0.1</code>：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   </li>\n<li><code>$critical-usage-threshold=0.01</code>：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      </li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>Typography模块</strong>   </p>\n<ul>\n<li>Links<ul>\n<li><code>@include hover-link();</code>：正常态下去掉下划线，在hover或者focus时才显示</li>\n<li><code>@include  link-colors(normal, hover, active, visited, focus)</code>：设置不同状态下的颜色值，只有第一个参数是必须参数</li>\n<li><code>@include unstyle-link()</code>：抹平超链接样式</li>\n</ul>\n</li>\n<li><p>Lists</p>\n<ul>\n<li><code>@include no-bullets()</code>： 去掉列表前的list-style，包含ul和li下</li>\n<li><code>@include no-bullet()</code>： 去掉单个li元素前的list-style</li>\n<li><code>@include inline-list()</code>：使得list横向布局，通过设置为<code>inline</code>实现</li>\n<li><code>@include horizontal-list(padding, float)</code>：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。</li>\n<li><code>@include inline-block-list(padding)</code>：目的同上，通过设置li的display值为inline-block实现。</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><code>@include force-wrap()</code>：连续长文本强制换行（如url等）</li>\n<li><code>@include nowrap()</code>：连续长文本强制不换行，其实等同于<code>white-space: nowrap;</code></li>\n<li><code>@include ellipsis()</code>：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装<code>compass install ellipsis</code>，通过<code>$use-mozilla-ellipsis-binding: true;</code>开启对firefox低版本的支持。   </li>\n<li><code>@include hide-text()</code>：隐藏文本，text-indent实现</li>\n<li><code>@include squish-text()</code>：隐藏文本，通过font-size/opacity实现</li>\n<li><code>@include replace-text(url, bg-pos-x, bg-pos-y)</code>：设置背景图片</li>\n<li><code>@include replace-text-with-dimensions(本地图片地址)</code>：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致</li>\n</ul>\n</li>\n<li><p>Vertical Rhythm<br>  行内容间的留白，让所有文本元素的高度是基准高的整数倍   </p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><strong>Helpers模块</strong><br>  Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。<ul>\n<li>Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。<code>background-image: inline-image(&#39;image.png&#39;)</code> 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。</li>\n<li><code>image-url(&#39;image.png&#39;)</code>：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。<code>stylesheet-url</code>和<code>font-url</code>用于管理指向CSS目录和font目录的资源文件路径，用法类似。   </li>\n<li><code>compass-env()</code>：compass编译环境，只有两个返回值development和production。</li>\n<li><code>image-width()</code>和<code>image-height()</code>：用于计算图片的宽和高   </li>\n<li><code>append-selector($selector, $to-append)</code>：将第二个参数叠加组合到第一个参数中生成学则器。    </li>\n</ul>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><strong>Utilities模块</strong><br>Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：<code>Color</code>、<code>Print</code>、<code>Tables</code>、<code>General</code>、<code>Sprites</code>。</p>\n<ul>\n<li>Color<ul>\n<li><code>brightness($color)</code>：计算颜色的亮度</li>\n<li>contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   </li>\n</ul>\n</li>\n<li>Print<br>  必须在两个文件中协同使用，<code>pirnt.scss</code>和<code>screen.scss</code>都需要引入print模块，主要是应用于适配打印设备。<ul>\n<li><code>print-utilities</code>：在<code>screen.scss</code>中调用需要传参<code>@include print-utilities(screen)</code>不传默认为<code>print.scss</code>中。</li>\n</ul>\n</li>\n<li>Tables<ul>\n<li><code>outer|inner-tables-borders($width, $color)</code>：分别用于设置table内外边框</li>\n<li><code>table-scaffolding()</code>：单元格文本对齐和padding初始化，<code>th</code>居中，<code>.numberic</code>右对齐。</li>\n<li><code>alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)</code>：对奇偶行|相隔列进行不同的颜色修饰。</li>\n</ul>\n</li>\n<li>General<br>  -<code>clearfix()</code>：通过在<code>.clearfix</code>中设置<code>overflow:hidden</code>清除浮动。<br>  -<code>legacy-pie-clearfix()</code>：通过伪类清除浮动。<br>  -<code>float($\bdirection)</code>：根据配置设置是否启用对IE6的hack解决double float-margin bug。<br>  -<code>min-height|width($length)</code>：设置min-height/min-width，兼容IE。<br>  -<code>tag-cloud($baseFontSize)</code>：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。</li>\n<li><p>Sprites<br>  主要是通过<code>sprite helpers</code>实现。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;compass/utilities/sprites;</span><br><span class=\"line\">@import &quot;logo/*.png&quot;;  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites &quot;images/logo/*.png&quot;生成文件查看，生成sprites */</span><br><span class=\"line\">@include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */</span><br></pre></td></tr></table></figure>\n<p>  图片引用的方法有两种，一个是直接在对应元素中添加对应类名<code>logo-imageName</code>；另一个则是通过<code>@include logo-sprite(&quot;imageName&quot;)</code>的方法。   </p>\n<ul>\n<li>对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为<code>imageName_hover.png</code>等，compass就会自动生成对应样式。可通过设置<code>$disable-magic-sprite-selectors:true</code>关闭该特性。</li>\n<li><code>$logo-layout: vertical|horizontal|diagonal|smart</code>：生成精灵图的布局方式设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"compass其他知识\"><a href=\"#compass其他知识\" class=\"headerlink\" title=\"compass其他知识\"></a>compass其他知识</h4><ol>\n<li>config.rb中<code>require &#39;compass/import-once/activate&#39;</code>：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import “compass/reset!”来引入后面的重复引用文件。  </li>\n<li>当使用<code>compressed</code>作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如<code>/*! hahaha */</code>来避免被去除。</li>\n<li><code>@debug</code>可以在控制台显示出mixins函数等对应的输出，如<code>@debug browser()</code>显示出的当前compass支持的浏览器，类似于console.log()的功能；</li>\n<li>通过在控制台输入<code>compass interactive</code>可以进入console，直接调用mixins。   </li>\n<li>compass生成地址的时候，默认生成的都是绝对地址，认为<code>config.rb</code>所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  </li>\n<li><code>compile compass -e production --force</code>：强制compass在production环境下编译，也可以在config.rb中配置<code>environment = :development</code>。   </li>\n<li>在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Sass与Compass\"><a href=\"#Sass与Compass\" class=\"headerlink\" title=\"Sass与Compass\"></a>Sass与Compass</h2><ol>\n<li>Compass是Sass基础上二次开发的工具。</li>\n<li><strong>优点</strong>：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。</li>\n<li><strong>应用场景</strong>：重构时自动化CSS；项目周期内更好组织项目内容。</li>\n</ol>\n<h4 id=\"sass和-scss\"><a href=\"#sass和-scss\" class=\"headerlink\" title=\".sass和.scss\"></a>.sass和.scss</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// .sass：类ruby语法，空格敏感</span><br><span class=\"line\">h1</span><br><span class=\"line\">    color: #000</span><br><span class=\"line\">    background: #fff</span><br><span class=\"line\"> </span><br><span class=\"line\">// .scss：类css语法，花括号</span><br><span class=\"line\">h1 &#123;color: red;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h2><h4 id=\"sass安装及使用\"><a href=\"#sass安装及使用\" class=\"headerlink\" title=\"sass安装及使用\"></a>sass安装及使用</h4><ol>\n<li>安装ruby和rvm（可选，用于版本管理）</li>\n<li>通过gem(ruby安装自带的一个包管理器)安装sass。  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l // 显示当前的源</span><br><span class=\"line\">gem sources --remove ... // 删除源...</span><br><span class=\"line\">gem sources -a ... // 添加源..</span><br><span class=\"line\">gem install sass // 安装sass</span><br><span class=\"line\">gem install sass --version=3.5.6 // 安装版本为3.5.6的sass</span><br><span class=\"line\">gem uninstall sass // 卸载sass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sass语法介绍\"><a href=\"#sass语法介绍\" class=\"headerlink\" title=\"sass语法介绍\"></a>sass语法介绍</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass main.scss main.css // 编译成css文件</span><br><span class=\"line\">sass-convert main.scss main.sass // .sass和.scss</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件引入<code>@import</code>：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过<code>import</code>引入。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;variables&quot;;</span><br><span class=\"line\">// 多个import可用,分割</span><br><span class=\"line\">@import &quot;variables&quot;, &quot;compass/reset&quot;;</span><br></pre></td></tr></table></figure>\n<p> ==注意==：这里的<code>@import</code>并不是css原生的<code>@import</code>（缺点：CSS原生的<code>@import</code>必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下情况使用的是css原生import</span><br><span class=\"line\">1. 文件名为.css结尾</span><br><span class=\"line\">@import &quot;variables.css&quot;;</span><br><span class=\"line\">2. &quot;http://&quot;开头的字符串</span><br><span class=\"line\">@import &quot;http://variables.css&quot;;</span><br><span class=\"line\">3. url()函数</span><br><span class=\"line\">@import url(&quot;variables.css&quot;);</span><br><span class=\"line\">4. 跟有media queries</span><br><span class=\"line\">@import &quot;variables&quot; projection tv;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套语法和父类选择器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 类的嵌套</span><br><span class=\"line\">.head &#123;</span><br><span class=\"line\">    .content &#123; color: red; &#125;</span><br><span class=\"line\">    &amp;:hover &#123; background: green; &#125; // 父类选择器&amp;</span><br><span class=\"line\">    font: &#123; // 属性嵌套</span><br><span class=\"line\">        family: Arial;</span><br><span class=\"line\">        size: 16px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量操作</p>\n<ul>\n<li>操作方式<ul>\n<li>直接操作变量，即变量表达式；</li>\n<li>通过函数操作，函数包含以下几种：<ul>\n<li>functions：跟代码块无关的函数，多为内置函数</li>\n<li>可重用的代码块（类似于C中的宏macro）<ul>\n<li>使用时以复制拷贝的方式存在，称为mixin，通过@include调用</li>\n<li>使用时以组合声明的形式存在，通过@extend调用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持的运算操作符包含：<code>&lt;,&gt;,&lt;=,&gt;=,!=, ==, ()</code>。sass中的数值计算可以带单位，所以单位并不能混用。</li>\n<li>sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。</li>\n<li><p>mixin代码块的声明：一般放在页面顶部<code>@import</code>之后，或者单独抽离出一个文件，引入方法如下：  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@mixin col-6 &#123;</span><br><span class=\"line\">    width: 50%;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.webdemo &#123;</span><br><span class=\"line\">    @include col-6();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">// 一种可以实现但是不建议的方法，</span><br><span class=\"line\">// 规范建议类名最好有语义化的作用，而非视觉化</span><br><span class=\"line\">@mixin col-6 &#123;</span><br><span class=\"line\">    .col-6 &#123;</span><br><span class=\"line\">        width: 50%;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@include col-6();</span><br><span class=\"line\"> </span><br><span class=\"line\">// 带参数的mixin, 50%为默认参数</span><br><span class=\"line\">@mixin col ($width: 50%) &#123;</span><br><span class=\"line\">    width: $width;</span><br><span class=\"line\">    float: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error.instruction &#123;</span><br><span class=\"line\">    color: #0f0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.error &#123;</span><br><span class=\"line\">    color: #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.serious-error &#123;</span><br><span class=\"line\">    @extend .error;</span><br><span class=\"line\">    border: 1px #f00;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;div class=&quot;serious-error instruction&quot;&gt;serious&lt;/div&gt; // #0f0</span><br></pre></td></tr></table></figure>\n<p>  <strong>注意</strong>：extend不能继承选择器序列（即<code>@extend .A .B</code>不可行，会报错）；使用%可构建仅用于继承的选择器（<code>%name {...}</code>），不会出现在生成文件中。   </p>\n</li>\n</ul>\n</li>\n<li><p>sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  </p>\n</li>\n<li><p>sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：</p>\n<ul>\n<li>浏览器解析css文件是按照从右往左的顺序。即对于<code>.main .headline</code>会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  </li>\n<li>增加了样式修饰的权重；</li>\n<li><p>制造了样式位置的依赖；  </p>\n<p>最佳实践是在命名的时候对类名进行语义化的命名，比如<code>.main-headline</code>，同时为了保留嵌套清晰易维护的优点，可以通过<code>at-root</code>指令指明将嵌套的内容输出到样式表顶层。   </p>\n</li>\n</ul>\n</li>\n<li><p>mixin的参数校验示例</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@mixin col-sm ($width: 50%) &#123;</span><br><span class=\"line\">    /*输入校验*/</span><br><span class=\"line\">    @if type-of($width) != number &#123;</span><br><span class=\"line\">        @error &quot;$width必须是一个数值类型，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @if not unitless($width) &#123; /* 没有单位 */</span><br><span class=\"line\">        @if unit($width) != &quot;%&quot; &#123;</span><br><span class=\"line\">            @warn &quot;$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; @else &#123;</span><br><span class=\"line\">        @warn &quot;$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.&quot;;</span><br><span class=\"line\">        $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @media (min-width: 768px) &#123;</span><br><span class=\"line\">        width: $width;</span><br><span class=\"line\">        float: left;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sass的四种输出格式<code>config.rb</code>中的<code>output_style</code>：</p>\n<ul>\n<li>expanded：默认，样式展开，与手动书写css习惯一致；</li>\n<li>nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；</li>\n<li>compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；</li>\n<li>compressed：样式表压缩以占用最少的空间。</li>\n</ul>\n</li>\n<li><p>其他：<code>@each</code> <code>@for</code> <code>@while</code></p>\n</li>\n<li><p>常用网址</p>\n<ul>\n<li>Sass中的functions详情页：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/documentation/Sass/Script/Functions.html</a></li>\n<li>Sass和Compass必备技能之Sass篇（视频教程）：<a href=\"https://www.imooc.com/video/7155\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/7155</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Compass\"><a href=\"#Compass\" class=\"headerlink\" title=\"Compass\"></a>Compass</h2><h4 id=\"compass安装及使用\"><a href=\"#compass安装及使用\" class=\"headerlink\" title=\"compass安装及使用\"></a>compass安装及使用</h4><ol>\n<li>通过<code>gem install compass</code>即可安装成功</li>\n<li><p>Compass目录创建  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass create file-name // 初始化工作目录，file-name为生成的文件名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass：</span><br><span class=\"line\">    - _*.scss：用于被其他sass文件引入，不会被单独编译</span><br><span class=\"line\">    - *.scss：会被单独编译</span><br><span class=\"line\">    注意：同一目录下，局部文件和非局部文件不能重名</span><br><span class=\"line\">stylesheets：sass文件编译生成的css文件</span><br><span class=\"line\">config.rb：配置项目文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass compile [path/to/project] // 按需编译</span><br><span class=\"line\">compass watch [path/to/project] // 监听目录编译</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"compass核心模块\"><a href=\"#compass核心模块\" class=\"headerlink\" title=\"compass核心模块\"></a>compass核心模块</h4><p>CSS3、Helpers、Typography、Utilities模块通过<code>@import &quot;compass&quot;</code>就可以直接引入；而Reset和Layout模块需要分别通过<code>@import &quot;compass/reset&quot;</code>和<code>@import &quot;compass/layout</code>明确指定引入。  </p>\n<ul>\n<li>CSS3：跨浏览器的CSS3兼容能力  </li>\n<li>Helpers：内含多函数，比较少用到  </li>\n<li>Typography：修饰文本样式  </li>\n<li>Utilities：辅助工具模块，多为mixins  </li>\n<li>Reset：浏览器样式重置模块  </li>\n<li>Layout：提供对页面布局的控制 </li>\n</ul>\n<p>除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    </p>\n<ol>\n<li><p><strong>reset模块</strong><br> 所有包含的模块可见：<a href=\"http://compass-style.org/reference/compass/reset/utilities/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/reset/utilities/</a><br> 可以通过调用mixins来调用不同的模块。   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：</span><br><span class=\"line\">.test &#123;</span><br><span class=\"line\">    @include nested-reset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：</span><br><span class=\"line\">// 第一个参数为选择器，第二个参数为是否强制覆盖（!important）</span><br><span class=\"line\">@include reset-display(&apos;.test&apos;, true);</span><br></pre></td></tr></table></figure>\n<p> ==使用normalize替代==</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install compass-normalize # 下载normalize</span><br><span class=\"line\">require &apos;compass-normalize&apos; # 在config.rb引入</span><br><span class=\"line\"></span><br><span class=\"line\">@import &quot;normalize&quot;; # 在scss文件中替换reset</span><br></pre></td></tr></table></figure>\n<p> normalize核心模块本身包含八个部分：</p>\n<ul>\n<li>base: body和html标签的字体文字大小边距等</li>\n<li>html5: 统一html5中新增的元素样式，如article、section的展现形式</li>\n<li>links: 统一a标签的展示形式，去掉hover和active时的下划线</li>\n<li>typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰</li>\n<li>embeds: img, svg等</li>\n<li>groups: figure, pre, code等</li>\n<li>forms: form相关的button, input, textarea等</li>\n<li>tables: table相关table, td, th等<br>这八个部分可以通过子路径单独引入，如<code>@import &quot;normalize/base&quot;;</code>，通过子类引入的方法需要在前置位置添加<code>@import &quot;normalize-version&quot;;</code>。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>layout模块</strong>（使用率低）<br><a href=\"http://compass-style.org/reference/compass/layout/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/layout/</a><br>内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如<code>@import &quot;compass/layout/grid-background&quot;</code>的方式显示引入。   <ul>\n<li>stretch：拉伸填充。通过<code>@include stretch(top, right, bottom, left)</code>调用，将元素拉伸填充屏幕，参数可缺省。  </li>\n<li>sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。</li>\n<li>grid-background: 使用css3中的grid定宽定高自适应宽高   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><strong>CSS3模块&amp;Browser Support 模块</strong>     <ul>\n<li><a href=\"http://compass-style.org/reference/compass/css3/\" target=\"_blank\" rel=\"noopener\">CSS3模块</a>：封装了CSS3新属性，通过调用对应的新属性即可，如<code>@include box-shadow(1px 1px 2px 2px #aaa);</code>，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。</li>\n<li>Browser Support模块：通过<code>@import &quot;compass/support&quot;</code>可直接引入，实际上CSS3已引入了该模块。<ul>\n<li><code>browser()</code>：通过<code>@debug browser()</code>可显示出当前支持的浏览器；</li>\n<li><code>browser-version(&#39;chrome&#39;)</code>：显示当前对应浏览器考虑的所有版本；</li>\n<li><code>$supported-browsers: chrome firefox</code>：限制当前支持的浏览器；</li>\n<li><code>$browser-minmum-versions: (&quot;ie&quot;: &quot;8&quot;)</code>：通过键值对的方法限制最低支持的版本；</li>\n<li><code>$graceful-usage-threshold=0.1</code>：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   </li>\n<li><code>$critical-usage-threshold=0.01</code>：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      </li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>Typography模块</strong>   </p>\n<ul>\n<li>Links<ul>\n<li><code>@include hover-link();</code>：正常态下去掉下划线，在hover或者focus时才显示</li>\n<li><code>@include  link-colors(normal, hover, active, visited, focus)</code>：设置不同状态下的颜色值，只有第一个参数是必须参数</li>\n<li><code>@include unstyle-link()</code>：抹平超链接样式</li>\n</ul>\n</li>\n<li><p>Lists</p>\n<ul>\n<li><code>@include no-bullets()</code>： 去掉列表前的list-style，包含ul和li下</li>\n<li><code>@include no-bullet()</code>： 去掉单个li元素前的list-style</li>\n<li><code>@include inline-list()</code>：使得list横向布局，通过设置为<code>inline</code>实现</li>\n<li><code>@include horizontal-list(padding, float)</code>：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。</li>\n<li><code>@include inline-block-list(padding)</code>：目的同上，通过设置li的display值为inline-block实现。</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><code>@include force-wrap()</code>：连续长文本强制换行（如url等）</li>\n<li><code>@include nowrap()</code>：连续长文本强制不换行，其实等同于<code>white-space: nowrap;</code></li>\n<li><code>@include ellipsis()</code>：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装<code>compass install ellipsis</code>，通过<code>$use-mozilla-ellipsis-binding: true;</code>开启对firefox低版本的支持。   </li>\n<li><code>@include hide-text()</code>：隐藏文本，text-indent实现</li>\n<li><code>@include squish-text()</code>：隐藏文本，通过font-size/opacity实现</li>\n<li><code>@include replace-text(url, bg-pos-x, bg-pos-y)</code>：设置背景图片</li>\n<li><code>@include replace-text-with-dimensions(本地图片地址)</code>：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致</li>\n</ul>\n</li>\n<li><p>Vertical Rhythm<br>  行内容间的留白，让所有文本元素的高度是基准高的整数倍   </p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><strong>Helpers模块</strong><br>  Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。<ul>\n<li>Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。<code>background-image: inline-image(&#39;image.png&#39;)</code> 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。</li>\n<li><code>image-url(&#39;image.png&#39;)</code>：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。<code>stylesheet-url</code>和<code>font-url</code>用于管理指向CSS目录和font目录的资源文件路径，用法类似。   </li>\n<li><code>compass-env()</code>：compass编译环境，只有两个返回值development和production。</li>\n<li><code>image-width()</code>和<code>image-height()</code>：用于计算图片的宽和高   </li>\n<li><code>append-selector($selector, $to-append)</code>：将第二个参数叠加组合到第一个参数中生成学则器。    </li>\n</ul>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><strong>Utilities模块</strong><br>Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：<code>Color</code>、<code>Print</code>、<code>Tables</code>、<code>General</code>、<code>Sprites</code>。</p>\n<ul>\n<li>Color<ul>\n<li><code>brightness($color)</code>：计算颜色的亮度</li>\n<li>contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   </li>\n</ul>\n</li>\n<li>Print<br>  必须在两个文件中协同使用，<code>pirnt.scss</code>和<code>screen.scss</code>都需要引入print模块，主要是应用于适配打印设备。<ul>\n<li><code>print-utilities</code>：在<code>screen.scss</code>中调用需要传参<code>@include print-utilities(screen)</code>不传默认为<code>print.scss</code>中。</li>\n</ul>\n</li>\n<li>Tables<ul>\n<li><code>outer|inner-tables-borders($width, $color)</code>：分别用于设置table内外边框</li>\n<li><code>table-scaffolding()</code>：单元格文本对齐和padding初始化，<code>th</code>居中，<code>.numberic</code>右对齐。</li>\n<li><code>alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)</code>：对奇偶行|相隔列进行不同的颜色修饰。</li>\n</ul>\n</li>\n<li>General<br>  -<code>clearfix()</code>：通过在<code>.clearfix</code>中设置<code>overflow:hidden</code>清除浮动。<br>  -<code>legacy-pie-clearfix()</code>：通过伪类清除浮动。<br>  -<code>float($\bdirection)</code>：根据配置设置是否启用对IE6的hack解决double float-margin bug。<br>  -<code>min-height|width($length)</code>：设置min-height/min-width，兼容IE。<br>  -<code>tag-cloud($baseFontSize)</code>：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。</li>\n<li><p>Sprites<br>  主要是通过<code>sprite helpers</code>实现。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@import &quot;compass/utilities/sprites;</span><br><span class=\"line\">@import &quot;logo/*.png&quot;;  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites &quot;images/logo/*.png&quot;生成文件查看，生成sprites */</span><br><span class=\"line\">@include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */</span><br></pre></td></tr></table></figure>\n<p>  图片引用的方法有两种，一个是直接在对应元素中添加对应类名<code>logo-imageName</code>；另一个则是通过<code>@include logo-sprite(&quot;imageName&quot;)</code>的方法。   </p>\n<ul>\n<li>对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为<code>imageName_hover.png</code>等，compass就会自动生成对应样式。可通过设置<code>$disable-magic-sprite-selectors:true</code>关闭该特性。</li>\n<li><code>$logo-layout: vertical|horizontal|diagonal|smart</code>：生成精灵图的布局方式设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"compass其他知识\"><a href=\"#compass其他知识\" class=\"headerlink\" title=\"compass其他知识\"></a>compass其他知识</h4><ol>\n<li>config.rb中<code>require &#39;compass/import-once/activate&#39;</code>：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import “compass/reset!”来引入后面的重复引用文件。  </li>\n<li>当使用<code>compressed</code>作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如<code>/*! hahaha */</code>来避免被去除。</li>\n<li><code>@debug</code>可以在控制台显示出mixins函数等对应的输出，如<code>@debug browser()</code>显示出的当前compass支持的浏览器，类似于console.log()的功能；</li>\n<li>通过在控制台输入<code>compass interactive</code>可以进入console，直接调用mixins。   </li>\n<li>compass生成地址的时候，默认生成的都是绝对地址，认为<code>config.rb</code>所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  </li>\n<li><code>compile compass -e production --force</code>：强制compass在production环境下编译，也可以在config.rb中配置<code>environment = :development</code>。   </li>\n<li>在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。</li>\n</ol>\n"},{"title":"threejs基础上：初始化","date":"2018-10-11T13:15:23.000Z","_content":"\nThree.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   \n\n\n\nThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   \n\n\n\n***\n\n\n\n### 初始化对象\n\n#### 1、初始化场景scene\n\n场景相当于是一个容器来容纳所有的物体，创建场景如下：   \n\n`var scene = new THREE.Scene();`   \n\n设置背景scene.background，可以为纯色，也可以为图片资源：\n\n`scene.background = new THREE.Color(0xffffff)`\n\n\n\n#### 2、相机camera\n\nTHREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。\n\n`var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);`\n\n\n| 参数 | 类型 | 默认值 | 说明|\n| --- | --- | --- | --- |\n| fov |number | 50 | 视野角度 |\n| aspect | number | 1 | 实际窗口的宽高比 |\n| near | number | 0.1 | 相机到近平面的距离 |\n| far | number | 2000 | 相机到远平面的距离 |\n\n\n#### 3、初始化渲染器renderer\n创建一个WebGL渲染器，可以通过插件`Detector.js`检测canvas/webgl兼容性，并在页面添加不兼容信息。   \n```\nvar renderer = null;\nif(Detector.webgl)\n    renderer = new THREE.WebGLRenderer({antialias: true})\nelse if(Detector.canvas)\n    renderer = new THREE.CanvasRenderer()      \nelse \n    console.log('不兼容')  \n```\n   \nantialias属性开启用于抗锯齿。初始化渲染器有一些[其他参数](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29)，一般不需要设置使用默认值即可。   \n\n      \n##### setSize(width, height, updateStyle)\n\n调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。\n\n##### setViewport(x, y, width, height)\n\n设置视口，从(x, y)到(x+width, y+height)，***注意：**此处的(x, y)是该区域的左下角*\n\n##### renderer.domElement\n\n渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   \n\n`document.body.appendChild(renderer.domElement)`;   \n\n##### setPixelRatio(value)\n\n设置设备像素比，用于HiDPI设备防止模糊输出canvas。\n\n`renderer.setPixelRatio(window.devicePixelRatio)`\n\n\n\n到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~\n\n\n\n***\n\n\n\n### 展示一个球体\n\n#### 1. 创建物体\n\n##### Mesh对象\n\n可以通过类似以下方式创建：   \n```\nvar geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */\nvar meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */\nvar earth = new THREE.Mesh(geometry, meterial); \n```\n\n一个普通的物体对象的构成需要两个参数。\n- **Geometry**：在threejs中有两种几何体（基本几何体和buffer几何体）。   \n***基本几何体*** 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；   \n***buffer几何体*** 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。   \n不同的集合\n- **Meterial**：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   \n\n| 材质 | \b描述 |\n| --- | --- |\n| \b\bMaterial | \b材料基类 |\n| MeshBasicMaterial | 基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果 |\n| MeshDepthMaterial | 渲染成简单的平面多边形，不考虑光照的影响 |\n| MeshNormalMaterial | 计算法向量颜色的材质 |\n| MeshLambertMaterial | 对光源做出反应，可用于创建暗淡的材质 |\n| MeshPhongMaterial | 对光源做出反应，可用于创建光亮的材质 |\n| MeshFaceMaterial | 为几何体的每一面指定材质，更像是一种材质容器 |\n| THREE.SceneUtil.createMultiMaterialObject | 同时应用多种材质 |\n| ShaderMaterial | 自己创建着色程序，需要通过GLSL语言 |\n| LineBasicMaterial | 只能应用于THREE.Line |\n| LineDashedMaterial | 只能应用于THREE.Line |\n\n\n\n 附：Meterial的[所有通用属性](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29)，其中需要注意的有：   \n\n- overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好\n\n\n\n#### 2. 添加到场景\n\n将物体添加到场景中：   \n\n`scene.add(earth);`\n\n注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。\n\n`camera.position.z = 50;`\n\n#### 3. 渲染页面\n\n`renderer.render(scene, camera);`   \n\n这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    \n\n***\n\n\n### \\**附表：对象的通用属性/函数*\n以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。\n\n| 属性/函数 | \b描述 |\n| --- | --- |\n| \bposition | \b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象 |\n| rotation | 对象的局部旋转，单位为弧度 |\n| scale | 控制对象的缩放 |\n| up | 空间向上的方向，缺省是THREE.Vector3(0, 1, 0) |\n| translateX/ranslateY/ranslateZ(distance) | \b沿X/Y/Z轴平移对象 |\n| rotateX/rotateY/rotateZ(rad) | \b沿X/Y/Z轴平移对象 |\n| lookAt(vector) | 一个世界向量观察点，用于旋转模型以面对观察点 |\n| add(object, ...) | 添加object为该对象的子对象 |\n| remove(object, ...) | 删除object子对象 |\n| clone(recursive) | 克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆 |\n\n以上属性可以通过`obj.[attr].x/obj.[attr].y/obj.[attr].z`来设置，或者是一次性设置3个值`obj.[attr].set(x, y, z)` ","source":"_posts/threejs基础上：初始化.md","raw":"---\ntitle: threejs基础上：初始化\ndate: 2018-10-11 21:15:23\ntags: threejs\ncategory: lesson\n---\n\nThree.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   \n\n\n\nThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   \n\n\n\n***\n\n\n\n### 初始化对象\n\n#### 1、初始化场景scene\n\n场景相当于是一个容器来容纳所有的物体，创建场景如下：   \n\n`var scene = new THREE.Scene();`   \n\n设置背景scene.background，可以为纯色，也可以为图片资源：\n\n`scene.background = new THREE.Color(0xffffff)`\n\n\n\n#### 2、相机camera\n\nTHREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。\n\n`var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);`\n\n\n| 参数 | 类型 | 默认值 | 说明|\n| --- | --- | --- | --- |\n| fov |number | 50 | 视野角度 |\n| aspect | number | 1 | 实际窗口的宽高比 |\n| near | number | 0.1 | 相机到近平面的距离 |\n| far | number | 2000 | 相机到远平面的距离 |\n\n\n#### 3、初始化渲染器renderer\n创建一个WebGL渲染器，可以通过插件`Detector.js`检测canvas/webgl兼容性，并在页面添加不兼容信息。   \n```\nvar renderer = null;\nif(Detector.webgl)\n    renderer = new THREE.WebGLRenderer({antialias: true})\nelse if(Detector.canvas)\n    renderer = new THREE.CanvasRenderer()      \nelse \n    console.log('不兼容')  \n```\n   \nantialias属性开启用于抗锯齿。初始化渲染器有一些[其他参数](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29)，一般不需要设置使用默认值即可。   \n\n      \n##### setSize(width, height, updateStyle)\n\n调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。\n\n##### setViewport(x, y, width, height)\n\n设置视口，从(x, y)到(x+width, y+height)，***注意：**此处的(x, y)是该区域的左下角*\n\n##### renderer.domElement\n\n渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   \n\n`document.body.appendChild(renderer.domElement)`;   \n\n##### setPixelRatio(value)\n\n设置设备像素比，用于HiDPI设备防止模糊输出canvas。\n\n`renderer.setPixelRatio(window.devicePixelRatio)`\n\n\n\n到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~\n\n\n\n***\n\n\n\n### 展示一个球体\n\n#### 1. 创建物体\n\n##### Mesh对象\n\n可以通过类似以下方式创建：   \n```\nvar geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */\nvar meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */\nvar earth = new THREE.Mesh(geometry, meterial); \n```\n\n一个普通的物体对象的构成需要两个参数。\n- **Geometry**：在threejs中有两种几何体（基本几何体和buffer几何体）。   \n***基本几何体*** 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；   \n***buffer几何体*** 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。   \n不同的集合\n- **Meterial**：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   \n\n| 材质 | \b描述 |\n| --- | --- |\n| \b\bMaterial | \b材料基类 |\n| MeshBasicMaterial | 基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果 |\n| MeshDepthMaterial | 渲染成简单的平面多边形，不考虑光照的影响 |\n| MeshNormalMaterial | 计算法向量颜色的材质 |\n| MeshLambertMaterial | 对光源做出反应，可用于创建暗淡的材质 |\n| MeshPhongMaterial | 对光源做出反应，可用于创建光亮的材质 |\n| MeshFaceMaterial | 为几何体的每一面指定材质，更像是一种材质容器 |\n| THREE.SceneUtil.createMultiMaterialObject | 同时应用多种材质 |\n| ShaderMaterial | 自己创建着色程序，需要通过GLSL语言 |\n| LineBasicMaterial | 只能应用于THREE.Line |\n| LineDashedMaterial | 只能应用于THREE.Line |\n\n\n\n 附：Meterial的[所有通用属性](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29)，其中需要注意的有：   \n\n- overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好\n\n\n\n#### 2. 添加到场景\n\n将物体添加到场景中：   \n\n`scene.add(earth);`\n\n注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。\n\n`camera.position.z = 50;`\n\n#### 3. 渲染页面\n\n`renderer.render(scene, camera);`   \n\n这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    \n\n***\n\n\n### \\**附表：对象的通用属性/函数*\n以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。\n\n| 属性/函数 | \b描述 |\n| --- | --- |\n| \bposition | \b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象 |\n| rotation | 对象的局部旋转，单位为弧度 |\n| scale | 控制对象的缩放 |\n| up | 空间向上的方向，缺省是THREE.Vector3(0, 1, 0) |\n| translateX/ranslateY/ranslateZ(distance) | \b沿X/Y/Z轴平移对象 |\n| rotateX/rotateY/rotateZ(rad) | \b沿X/Y/Z轴平移对象 |\n| lookAt(vector) | 一个世界向量观察点，用于旋转模型以面对观察点 |\n| add(object, ...) | 添加object为该对象的子对象 |\n| remove(object, ...) | 删除object子对象 |\n| clone(recursive) | 克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆 |\n\n以上属性可以通过`obj.[attr].x/obj.[attr].y/obj.[attr].z`来设置，或者是一次性设置3个值`obj.[attr].set(x, y, z)` ","slug":"threejs基础上：初始化","published":1,"updated":"2018-10-11T13:39:01.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn4mystr0001hd7ophm3h8vy","content":"<p>Three.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   </p>\n<p>ThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   </p>\n<hr>\n<h3 id=\"初始化对象\"><a href=\"#初始化对象\" class=\"headerlink\" title=\"初始化对象\"></a>初始化对象</h3><h4 id=\"1、初始化场景scene\"><a href=\"#1、初始化场景scene\" class=\"headerlink\" title=\"1、初始化场景scene\"></a>1、初始化场景scene</h4><p>场景相当于是一个容器来容纳所有的物体，创建场景如下：   </p>\n<p><code>var scene = new THREE.Scene();</code>   </p>\n<p>设置背景scene.background，可以为纯色，也可以为图片资源：</p>\n<p><code>scene.background = new THREE.Color(0xffffff)</code></p>\n<h4 id=\"2、相机camera\"><a href=\"#2、相机camera\" class=\"headerlink\" title=\"2、相机camera\"></a>2、相机camera</h4><p>THREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。</p>\n<p><code>var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>number</td>\n<td>50</td>\n<td>视野角度</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>number</td>\n<td>1</td>\n<td>实际窗口的宽高比</td>\n</tr>\n<tr>\n<td>near</td>\n<td>number</td>\n<td>0.1</td>\n<td>相机到近平面的距离</td>\n</tr>\n<tr>\n<td>far</td>\n<td>number</td>\n<td>2000</td>\n<td>相机到远平面的距离</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3、初始化渲染器renderer\"><a href=\"#3、初始化渲染器renderer\" class=\"headerlink\" title=\"3、初始化渲染器renderer\"></a>3、初始化渲染器renderer</h4><p>创建一个WebGL渲染器，可以通过插件<code>Detector.js</code>检测canvas/webgl兼容性，并在页面添加不兼容信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var renderer = null;</span><br><span class=\"line\">if(Detector.webgl)</span><br><span class=\"line\">    renderer = new THREE.WebGLRenderer(&#123;antialias: true&#125;)</span><br><span class=\"line\">else if(Detector.canvas)</span><br><span class=\"line\">    renderer = new THREE.CanvasRenderer()      </span><br><span class=\"line\">else </span><br><span class=\"line\">    console.log(&apos;不兼容&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>antialias属性开启用于抗锯齿。初始化渲染器有一些<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29\" target=\"_blank\" rel=\"noopener\">其他参数</a>，一般不需要设置使用默认值即可。   </p>\n<h5 id=\"setSize-width-height-updateStyle\"><a href=\"#setSize-width-height-updateStyle\" class=\"headerlink\" title=\"setSize(width, height, updateStyle)\"></a>setSize(width, height, updateStyle)</h5><p>调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。</p>\n<h5 id=\"setViewport-x-y-width-height\"><a href=\"#setViewport-x-y-width-height\" class=\"headerlink\" title=\"setViewport(x, y, width, height)\"></a>setViewport(x, y, width, height)</h5><p>设置视口，从(x, y)到(x+width, y+height)，<strong>*注意：</strong>此处的(x, y)是该区域的左下角*</p>\n<h5 id=\"renderer-domElement\"><a href=\"#renderer-domElement\" class=\"headerlink\" title=\"renderer.domElement\"></a>renderer.domElement</h5><p>渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   </p>\n<p><code>document.body.appendChild(renderer.domElement)</code>;   </p>\n<h5 id=\"setPixelRatio-value\"><a href=\"#setPixelRatio-value\" class=\"headerlink\" title=\"setPixelRatio(value)\"></a>setPixelRatio(value)</h5><p>设置设备像素比，用于HiDPI设备防止模糊输出canvas。</p>\n<p><code>renderer.setPixelRatio(window.devicePixelRatio)</code></p>\n<p>到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~</p>\n<hr>\n<h3 id=\"展示一个球体\"><a href=\"#展示一个球体\" class=\"headerlink\" title=\"展示一个球体\"></a>展示一个球体</h3><h4 id=\"1-创建物体\"><a href=\"#1-创建物体\" class=\"headerlink\" title=\"1. 创建物体\"></a>1. 创建物体</h4><h5 id=\"Mesh对象\"><a href=\"#Mesh对象\" class=\"headerlink\" title=\"Mesh对象\"></a>Mesh对象</h5><p>可以通过类似以下方式创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */</span><br><span class=\"line\">var meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */</span><br><span class=\"line\">var earth = new THREE.Mesh(geometry, meterial);</span><br></pre></td></tr></table></figure></p>\n<p>一个普通的物体对象的构成需要两个参数。</p>\n<ul>\n<li><strong>Geometry</strong>：在threejs中有两种几何体（基本几何体和buffer几何体）。<br><strong><em>基本几何体</em></strong> 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；<br><strong><em>buffer几何体</em></strong> 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。<br>不同的集合</li>\n<li><strong>Meterial</strong>：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>材质</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\b\bMaterial</td>\n<td>\b材料基类</td>\n</tr>\n<tr>\n<td>MeshBasicMaterial</td>\n<td>基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果</td>\n</tr>\n<tr>\n<td>MeshDepthMaterial</td>\n<td>渲染成简单的平面多边形，不考虑光照的影响</td>\n</tr>\n<tr>\n<td>MeshNormalMaterial</td>\n<td>计算法向量颜色的材质</td>\n</tr>\n<tr>\n<td>MeshLambertMaterial</td>\n<td>对光源做出反应，可用于创建暗淡的材质</td>\n</tr>\n<tr>\n<td>MeshPhongMaterial</td>\n<td>对光源做出反应，可用于创建光亮的材质</td>\n</tr>\n<tr>\n<td>MeshFaceMaterial</td>\n<td>为几何体的每一面指定材质，更像是一种材质容器</td>\n</tr>\n<tr>\n<td>THREE.SceneUtil.createMultiMaterialObject</td>\n<td>同时应用多种材质</td>\n</tr>\n<tr>\n<td>ShaderMaterial</td>\n<td>自己创建着色程序，需要通过GLSL语言</td>\n</tr>\n<tr>\n<td>LineBasicMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n<tr>\n<td>LineDashedMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n</tbody>\n</table>\n<p> 附：Meterial的<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29\" target=\"_blank\" rel=\"noopener\">所有通用属性</a>，其中需要注意的有：   </p>\n<ul>\n<li>overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好</li>\n</ul>\n<h4 id=\"2-添加到场景\"><a href=\"#2-添加到场景\" class=\"headerlink\" title=\"2. 添加到场景\"></a>2. 添加到场景</h4><p>将物体添加到场景中：   </p>\n<p><code>scene.add(earth);</code></p>\n<p>注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。</p>\n<p><code>camera.position.z = 50;</code></p>\n<h4 id=\"3-渲染页面\"><a href=\"#3-渲染页面\" class=\"headerlink\" title=\"3. 渲染页面\"></a>3. 渲染页面</h4><p><code>renderer.render(scene, camera);</code>   </p>\n<p>这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    </p>\n<hr>\n<h3 id=\"附表：对象的通用属性-函数\"><a href=\"#附表：对象的通用属性-函数\" class=\"headerlink\" title=\"*附表：对象的通用属性/函数\"></a>*<em>附表：对象的通用属性/函数</em></h3><p>以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。</p>\n<table>\n<thead>\n<tr>\n<th>属性/函数</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\bposition</td>\n<td>\b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象</td>\n</tr>\n<tr>\n<td>rotation</td>\n<td>对象的局部旋转，单位为弧度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>控制对象的缩放</td>\n</tr>\n<tr>\n<td>up</td>\n<td>空间向上的方向，缺省是THREE.Vector3(0, 1, 0)</td>\n</tr>\n<tr>\n<td>translateX/ranslateY/ranslateZ(distance)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>rotateX/rotateY/rotateZ(rad)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>lookAt(vector)</td>\n<td>一个世界向量观察点，用于旋转模型以面对观察点</td>\n</tr>\n<tr>\n<td>add(object, …)</td>\n<td>添加object为该对象的子对象</td>\n</tr>\n<tr>\n<td>remove(object, …)</td>\n<td>删除object子对象</td>\n</tr>\n<tr>\n<td>clone(recursive)</td>\n<td>克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性可以通过<code>obj.[attr].x/obj.[attr].y/obj.[attr].z</code>来设置，或者是一次性设置3个值<code>obj.[attr].set(x, y, z)</code> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Three.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   </p>\n<p>ThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   </p>\n<hr>\n<h3 id=\"初始化对象\"><a href=\"#初始化对象\" class=\"headerlink\" title=\"初始化对象\"></a>初始化对象</h3><h4 id=\"1、初始化场景scene\"><a href=\"#1、初始化场景scene\" class=\"headerlink\" title=\"1、初始化场景scene\"></a>1、初始化场景scene</h4><p>场景相当于是一个容器来容纳所有的物体，创建场景如下：   </p>\n<p><code>var scene = new THREE.Scene();</code>   </p>\n<p>设置背景scene.background，可以为纯色，也可以为图片资源：</p>\n<p><code>scene.background = new THREE.Color(0xffffff)</code></p>\n<h4 id=\"2、相机camera\"><a href=\"#2、相机camera\" class=\"headerlink\" title=\"2、相机camera\"></a>2、相机camera</h4><p>THREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。</p>\n<p><code>var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>number</td>\n<td>50</td>\n<td>视野角度</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>number</td>\n<td>1</td>\n<td>实际窗口的宽高比</td>\n</tr>\n<tr>\n<td>near</td>\n<td>number</td>\n<td>0.1</td>\n<td>相机到近平面的距离</td>\n</tr>\n<tr>\n<td>far</td>\n<td>number</td>\n<td>2000</td>\n<td>相机到远平面的距离</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3、初始化渲染器renderer\"><a href=\"#3、初始化渲染器renderer\" class=\"headerlink\" title=\"3、初始化渲染器renderer\"></a>3、初始化渲染器renderer</h4><p>创建一个WebGL渲染器，可以通过插件<code>Detector.js</code>检测canvas/webgl兼容性，并在页面添加不兼容信息。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var renderer = null;</span><br><span class=\"line\">if(Detector.webgl)</span><br><span class=\"line\">    renderer = new THREE.WebGLRenderer(&#123;antialias: true&#125;)</span><br><span class=\"line\">else if(Detector.canvas)</span><br><span class=\"line\">    renderer = new THREE.CanvasRenderer()      </span><br><span class=\"line\">else </span><br><span class=\"line\">    console.log(&apos;不兼容&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>antialias属性开启用于抗锯齿。初始化渲染器有一些<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29\" target=\"_blank\" rel=\"noopener\">其他参数</a>，一般不需要设置使用默认值即可。   </p>\n<h5 id=\"setSize-width-height-updateStyle\"><a href=\"#setSize-width-height-updateStyle\" class=\"headerlink\" title=\"setSize(width, height, updateStyle)\"></a>setSize(width, height, updateStyle)</h5><p>调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。</p>\n<h5 id=\"setViewport-x-y-width-height\"><a href=\"#setViewport-x-y-width-height\" class=\"headerlink\" title=\"setViewport(x, y, width, height)\"></a>setViewport(x, y, width, height)</h5><p>设置视口，从(x, y)到(x+width, y+height)，<strong>*注意：</strong>此处的(x, y)是该区域的左下角*</p>\n<h5 id=\"renderer-domElement\"><a href=\"#renderer-domElement\" class=\"headerlink\" title=\"renderer.domElement\"></a>renderer.domElement</h5><p>渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   </p>\n<p><code>document.body.appendChild(renderer.domElement)</code>;   </p>\n<h5 id=\"setPixelRatio-value\"><a href=\"#setPixelRatio-value\" class=\"headerlink\" title=\"setPixelRatio(value)\"></a>setPixelRatio(value)</h5><p>设置设备像素比，用于HiDPI设备防止模糊输出canvas。</p>\n<p><code>renderer.setPixelRatio(window.devicePixelRatio)</code></p>\n<p>到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~</p>\n<hr>\n<h3 id=\"展示一个球体\"><a href=\"#展示一个球体\" class=\"headerlink\" title=\"展示一个球体\"></a>展示一个球体</h3><h4 id=\"1-创建物体\"><a href=\"#1-创建物体\" class=\"headerlink\" title=\"1. 创建物体\"></a>1. 创建物体</h4><h5 id=\"Mesh对象\"><a href=\"#Mesh对象\" class=\"headerlink\" title=\"Mesh对象\"></a>Mesh对象</h5><p>可以通过类似以下方式创建：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */</span><br><span class=\"line\">var meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */</span><br><span class=\"line\">var earth = new THREE.Mesh(geometry, meterial);</span><br></pre></td></tr></table></figure></p>\n<p>一个普通的物体对象的构成需要两个参数。</p>\n<ul>\n<li><strong>Geometry</strong>：在threejs中有两种几何体（基本几何体和buffer几何体）。<br><strong><em>基本几何体</em></strong> 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；<br><strong><em>buffer几何体</em></strong> 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。<br>不同的集合</li>\n<li><strong>Meterial</strong>：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>材质</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\b\bMaterial</td>\n<td>\b材料基类</td>\n</tr>\n<tr>\n<td>MeshBasicMaterial</td>\n<td>基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果</td>\n</tr>\n<tr>\n<td>MeshDepthMaterial</td>\n<td>渲染成简单的平面多边形，不考虑光照的影响</td>\n</tr>\n<tr>\n<td>MeshNormalMaterial</td>\n<td>计算法向量颜色的材质</td>\n</tr>\n<tr>\n<td>MeshLambertMaterial</td>\n<td>对光源做出反应，可用于创建暗淡的材质</td>\n</tr>\n<tr>\n<td>MeshPhongMaterial</td>\n<td>对光源做出反应，可用于创建光亮的材质</td>\n</tr>\n<tr>\n<td>MeshFaceMaterial</td>\n<td>为几何体的每一面指定材质，更像是一种材质容器</td>\n</tr>\n<tr>\n<td>THREE.SceneUtil.createMultiMaterialObject</td>\n<td>同时应用多种材质</td>\n</tr>\n<tr>\n<td>ShaderMaterial</td>\n<td>自己创建着色程序，需要通过GLSL语言</td>\n</tr>\n<tr>\n<td>LineBasicMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n<tr>\n<td>LineDashedMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n</tbody>\n</table>\n<p> 附：Meterial的<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29\" target=\"_blank\" rel=\"noopener\">所有通用属性</a>，其中需要注意的有：   </p>\n<ul>\n<li>overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好</li>\n</ul>\n<h4 id=\"2-添加到场景\"><a href=\"#2-添加到场景\" class=\"headerlink\" title=\"2. 添加到场景\"></a>2. 添加到场景</h4><p>将物体添加到场景中：   </p>\n<p><code>scene.add(earth);</code></p>\n<p>注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。</p>\n<p><code>camera.position.z = 50;</code></p>\n<h4 id=\"3-渲染页面\"><a href=\"#3-渲染页面\" class=\"headerlink\" title=\"3. 渲染页面\"></a>3. 渲染页面</h4><p><code>renderer.render(scene, camera);</code>   </p>\n<p>这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    </p>\n<hr>\n<h3 id=\"附表：对象的通用属性-函数\"><a href=\"#附表：对象的通用属性-函数\" class=\"headerlink\" title=\"*附表：对象的通用属性/函数\"></a>*<em>附表：对象的通用属性/函数</em></h3><p>以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。</p>\n<table>\n<thead>\n<tr>\n<th>属性/函数</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\bposition</td>\n<td>\b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象</td>\n</tr>\n<tr>\n<td>rotation</td>\n<td>对象的局部旋转，单位为弧度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>控制对象的缩放</td>\n</tr>\n<tr>\n<td>up</td>\n<td>空间向上的方向，缺省是THREE.Vector3(0, 1, 0)</td>\n</tr>\n<tr>\n<td>translateX/ranslateY/ranslateZ(distance)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>rotateX/rotateY/rotateZ(rad)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>lookAt(vector)</td>\n<td>一个世界向量观察点，用于旋转模型以面对观察点</td>\n</tr>\n<tr>\n<td>add(object, …)</td>\n<td>添加object为该对象的子对象</td>\n</tr>\n<tr>\n<td>remove(object, …)</td>\n<td>删除object子对象</td>\n</tr>\n<tr>\n<td>clone(recursive)</td>\n<td>克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性可以通过<code>obj.[attr].x/obj.[attr].y/obj.[attr].z</code>来设置，或者是一次性设置3个值<code>obj.[attr].set(x, y, z)</code> </p>\n"},{"title":"threejs基础下：贴图资源加载与光照","date":"2018-10-11T13:16:01.000Z","_content":"\n\n### 加载器Loaders\n加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：\n```\nvar loader = new THREE.[Loader]();\n/* \n * 函数名：.load(url, onLoad, onProgress, onError)\n * url：资源地址\n * onLoad: 加载完成的回调，参数是已加载的资源文本\n * onProgress: 加载中的调用，参数是XmlHttpRequest实例\n * onError：加载出错时调用\n*/\nloader.load(url, onLoad, onProgress, onError)\n```\n\n#### 1. TextureLoader/ImageLoader\n加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。\n```\nvar loader = new THREE.TextureLoader();\nloader.load('texture/earth.jpg', function( texture ) {\n    // 作为纹理，或直接使用TextureLoader\n    // var geometry = new THREE.SphereGeometry(15, 10, 10);\n    // var meterial = new THREE.MeshBasicMaterial({color: 0x739783, map:texture});\n    // earth = new THREE.Mesh(geometry, material);\n    // scene.add(earth);\n    // 直接绘制在canvas上\n    var canvas =document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    context.drawImage(texture, 100, 100);    \n})\n```\n\n\n#### 2. AudioLoader\n加载音乐也是常见的需求，加载音乐并播放的实现方法如下：\n```\n// 初始化侦听器并添加到相机中\nvar listener = new THREE.AudioListener();\ncamera.add(listener);\n// 实例化一个音频对象并添加到场景中\nvar audio = new THREE.audio( audioListener );\nscene.add(audio);\n// 加载资源\nvar loader = new THREE.AudioLoader();\nloader.load( 'audio/amobient.ogg', function(audioBuffer) {\n    audio.setBuffer(audioBuffer);\n    audio.play();\n},\nfunction(xhr) {\n    console.log( (xhr.loaded / xhr.total * 100) + \"% is loaded\" );\n},\nfunction(xhr) {\n    console.log('An error happened');\n})\n```\n音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。\n\n#### 3. JSONLoader\n实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。\n```\nvar loader = new THREE.JSONLoader();\nloader.load(\n    './monster/monster.js',\n    function (geometry, materials) {\n        var material = new THREE.MultiMaterial(materials);\n        var object = new THREE.Mesh(geometry, material);\n        scene.add(object);\n    }\n)\n```\n\n**注意**：\n- 使用加载的资源时，要适时重新渲染，否则无法生效。\n- \b存在跨域问题。\n\n***\n\n### 贴图详解\n大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      \n#### 1. 凹凸贴图（Bump Map）\n用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：   \n```\nvar meterial = new THREE.MeshPhongMaterial({\n    bumpMap: textureLoader.load('./img_bump.jpg')\n})\n```\n\n#### 2. 漫反射贴图（Diffuse Map）\n用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。\n\n\n#### 3. 高光贴图（Specular Map）\n用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。\n```\nvar meterial = new THREE.MeshPhongMaterial({\n    specular: 0x404040, // 高光颜色\n    shininess: 5,              // 高光平滑度，默认30，值越高越强烈\n    specularMap: textureLoader.load('./img_spec.jpg')\n})\n```\n\n#### 4. 环境贴图（Cube Map）\n通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。\n```\n// 立方体环境，顺序是前后上下右左\nvar cubeTexture = new THREE.CubeTextureLoader().setPath('../img/skyBox').load({\n    'px.jpg', 'nx.jpg',\n    'py.jpg', 'ny.jpg',\n    'pz.jpg', 'nz.jpg'\n})\nscene.background = cubeTexture;\n```\n\n***\n\n### 光源Lights\n为了让图片看起来更加立体真实，通常需要增加一些光线。\n**注意：**只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 \n\n#### 1. 环境光（AmbientLight）\n这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。  \n```\nvar light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光\nscene.add(light);\n```\n\n#### 2. 平行光（DirectionalLight）\n产生平行的光线，当材质为`MeshLambertMaterial`或`MeshPhongMaterial`时才会受到影响。\n```\nvar light = new THREE.DirectionalLight(hex, instensity)\n```\n\n\n#### 3. 点光源（PointLight）\n```\n/*\n* hex：颜色的RGB值，如0x333333\n* intensity：光强，optional\n* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional\n* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional\n*/\nvar light = new THREE.PointLight(hex, intensity, distance, decay)\n```\n\n#### PointLight和DirectionalLight常用属性\n| 常用属性 | 默认值 | 说明|\n| --- | --- | --- |\n| target | - | 阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh） |\n| penumbra | 0.0 | 聚光锥的半影衰减百分比[0, 1] |\n| shadow | - | 用于存储光照阴影的所有信息，具体属性可参考[光照阴影](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights)/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow)) |\n| castShadow | false | 是否投射动态阴影，<font color=\"tomato\">*很耗费计算资源*</font> |","source":"_posts/threejs基础下：贴图资源加载与光照.md","raw":"---\ntitle: threejs基础下：贴图资源加载与光照\ndate: 2018-10-11 21:16:01\ntags: threejs\ncategory: lesson\n---\n\n\n### 加载器Loaders\n加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：\n```\nvar loader = new THREE.[Loader]();\n/* \n * 函数名：.load(url, onLoad, onProgress, onError)\n * url：资源地址\n * onLoad: 加载完成的回调，参数是已加载的资源文本\n * onProgress: 加载中的调用，参数是XmlHttpRequest实例\n * onError：加载出错时调用\n*/\nloader.load(url, onLoad, onProgress, onError)\n```\n\n#### 1. TextureLoader/ImageLoader\n加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。\n```\nvar loader = new THREE.TextureLoader();\nloader.load('texture/earth.jpg', function( texture ) {\n    // 作为纹理，或直接使用TextureLoader\n    // var geometry = new THREE.SphereGeometry(15, 10, 10);\n    // var meterial = new THREE.MeshBasicMaterial({color: 0x739783, map:texture});\n    // earth = new THREE.Mesh(geometry, material);\n    // scene.add(earth);\n    // 直接绘制在canvas上\n    var canvas =document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    context.drawImage(texture, 100, 100);    \n})\n```\n\n\n#### 2. AudioLoader\n加载音乐也是常见的需求，加载音乐并播放的实现方法如下：\n```\n// 初始化侦听器并添加到相机中\nvar listener = new THREE.AudioListener();\ncamera.add(listener);\n// 实例化一个音频对象并添加到场景中\nvar audio = new THREE.audio( audioListener );\nscene.add(audio);\n// 加载资源\nvar loader = new THREE.AudioLoader();\nloader.load( 'audio/amobient.ogg', function(audioBuffer) {\n    audio.setBuffer(audioBuffer);\n    audio.play();\n},\nfunction(xhr) {\n    console.log( (xhr.loaded / xhr.total * 100) + \"% is loaded\" );\n},\nfunction(xhr) {\n    console.log('An error happened');\n})\n```\n音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。\n\n#### 3. JSONLoader\n实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。\n```\nvar loader = new THREE.JSONLoader();\nloader.load(\n    './monster/monster.js',\n    function (geometry, materials) {\n        var material = new THREE.MultiMaterial(materials);\n        var object = new THREE.Mesh(geometry, material);\n        scene.add(object);\n    }\n)\n```\n\n**注意**：\n- 使用加载的资源时，要适时重新渲染，否则无法生效。\n- \b存在跨域问题。\n\n***\n\n### 贴图详解\n大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      \n#### 1. 凹凸贴图（Bump Map）\n用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：   \n```\nvar meterial = new THREE.MeshPhongMaterial({\n    bumpMap: textureLoader.load('./img_bump.jpg')\n})\n```\n\n#### 2. 漫反射贴图（Diffuse Map）\n用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。\n\n\n#### 3. 高光贴图（Specular Map）\n用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。\n```\nvar meterial = new THREE.MeshPhongMaterial({\n    specular: 0x404040, // 高光颜色\n    shininess: 5,              // 高光平滑度，默认30，值越高越强烈\n    specularMap: textureLoader.load('./img_spec.jpg')\n})\n```\n\n#### 4. 环境贴图（Cube Map）\n通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。\n```\n// 立方体环境，顺序是前后上下右左\nvar cubeTexture = new THREE.CubeTextureLoader().setPath('../img/skyBox').load({\n    'px.jpg', 'nx.jpg',\n    'py.jpg', 'ny.jpg',\n    'pz.jpg', 'nz.jpg'\n})\nscene.background = cubeTexture;\n```\n\n***\n\n### 光源Lights\n为了让图片看起来更加立体真实，通常需要增加一些光线。\n**注意：**只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 \n\n#### 1. 环境光（AmbientLight）\n这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。  \n```\nvar light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光\nscene.add(light);\n```\n\n#### 2. 平行光（DirectionalLight）\n产生平行的光线，当材质为`MeshLambertMaterial`或`MeshPhongMaterial`时才会受到影响。\n```\nvar light = new THREE.DirectionalLight(hex, instensity)\n```\n\n\n#### 3. 点光源（PointLight）\n```\n/*\n* hex：颜色的RGB值，如0x333333\n* intensity：光强，optional\n* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional\n* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional\n*/\nvar light = new THREE.PointLight(hex, intensity, distance, decay)\n```\n\n#### PointLight和DirectionalLight常用属性\n| 常用属性 | 默认值 | 说明|\n| --- | --- | --- |\n| target | - | 阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh） |\n| penumbra | 0.0 | 聚光锥的半影衰减百分比[0, 1] |\n| shadow | - | 用于存储光照阴影的所有信息，具体属性可参考[光照阴影](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights)/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow)) |\n| castShadow | false | 是否投射动态阴影，<font color=\"tomato\">*很耗费计算资源*</font> |","slug":"threejs基础下：贴图资源加载与光照","published":1,"updated":"2018-10-11T13:23:02.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn4mystv0004hd7ox4h9kxmr","content":"<h3 id=\"加载器Loaders\"><a href=\"#加载器Loaders\" class=\"headerlink\" title=\"加载器Loaders\"></a>加载器Loaders</h3><p>加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.[Loader]();</span><br><span class=\"line\">/* </span><br><span class=\"line\"> * 函数名：.load(url, onLoad, onProgress, onError)</span><br><span class=\"line\"> * url：资源地址</span><br><span class=\"line\"> * onLoad: 加载完成的回调，参数是已加载的资源文本</span><br><span class=\"line\"> * onProgress: 加载中的调用，参数是XmlHttpRequest实例</span><br><span class=\"line\"> * onError：加载出错时调用</span><br><span class=\"line\">*/</span><br><span class=\"line\">loader.load(url, onLoad, onProgress, onError)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-TextureLoader-ImageLoader\"><a href=\"#1-TextureLoader-ImageLoader\" class=\"headerlink\" title=\"1. TextureLoader/ImageLoader\"></a>1. TextureLoader/ImageLoader</h4><p>加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.TextureLoader();</span><br><span class=\"line\">loader.load(&apos;texture/earth.jpg&apos;, function( texture ) &#123;</span><br><span class=\"line\">    // 作为纹理，或直接使用TextureLoader</span><br><span class=\"line\">    // var geometry = new THREE.SphereGeometry(15, 10, 10);</span><br><span class=\"line\">    // var meterial = new THREE.MeshBasicMaterial(&#123;color: 0x739783, map:texture&#125;);</span><br><span class=\"line\">    // earth = new THREE.Mesh(geometry, material);</span><br><span class=\"line\">    // scene.add(earth);</span><br><span class=\"line\">    // 直接绘制在canvas上</span><br><span class=\"line\">    var canvas =document.createElement(&apos;canvas&apos;);</span><br><span class=\"line\">    var context = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">    context.drawImage(texture, 100, 100);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-AudioLoader\"><a href=\"#2-AudioLoader\" class=\"headerlink\" title=\"2. AudioLoader\"></a>2. AudioLoader</h4><p>加载音乐也是常见的需求，加载音乐并播放的实现方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化侦听器并添加到相机中</span><br><span class=\"line\">var listener = new THREE.AudioListener();</span><br><span class=\"line\">camera.add(listener);</span><br><span class=\"line\">// 实例化一个音频对象并添加到场景中</span><br><span class=\"line\">var audio = new THREE.audio( audioListener );</span><br><span class=\"line\">scene.add(audio);</span><br><span class=\"line\">// 加载资源</span><br><span class=\"line\">var loader = new THREE.AudioLoader();</span><br><span class=\"line\">loader.load( &apos;audio/amobient.ogg&apos;, function(audioBuffer) &#123;</span><br><span class=\"line\">    audio.setBuffer(audioBuffer);</span><br><span class=\"line\">    audio.play();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function(xhr) &#123;</span><br><span class=\"line\">    console.log( (xhr.loaded / xhr.total * 100) + &quot;% is loaded&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function(xhr) &#123;</span><br><span class=\"line\">    console.log(&apos;An error happened&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。</p>\n<h4 id=\"3-JSONLoader\"><a href=\"#3-JSONLoader\" class=\"headerlink\" title=\"3. JSONLoader\"></a>3. JSONLoader</h4><p>实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.JSONLoader();</span><br><span class=\"line\">loader.load(</span><br><span class=\"line\">    &apos;./monster/monster.js&apos;,</span><br><span class=\"line\">    function (geometry, materials) &#123;</span><br><span class=\"line\">        var material = new THREE.MultiMaterial(materials);</span><br><span class=\"line\">        var object = new THREE.Mesh(geometry, material);</span><br><span class=\"line\">        scene.add(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>使用加载的资源时，要适时重新渲染，否则无法生效。</li>\n<li>\b存在跨域问题。</li>\n</ul>\n<hr>\n<h3 id=\"贴图详解\"><a href=\"#贴图详解\" class=\"headerlink\" title=\"贴图详解\"></a>贴图详解</h3><p>大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      </p>\n<h4 id=\"1-凹凸贴图（Bump-Map）\"><a href=\"#1-凹凸贴图（Bump-Map）\" class=\"headerlink\" title=\"1. 凹凸贴图（Bump Map）\"></a>1. 凹凸贴图（Bump Map）</h4><p>用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var meterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    bumpMap: textureLoader.load(&apos;./img_bump.jpg&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-漫反射贴图（Diffuse-Map）\"><a href=\"#2-漫反射贴图（Diffuse-Map）\" class=\"headerlink\" title=\"2. 漫反射贴图（Diffuse Map）\"></a>2. 漫反射贴图（Diffuse Map）</h4><p>用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。</p>\n<h4 id=\"3-高光贴图（Specular-Map）\"><a href=\"#3-高光贴图（Specular-Map）\" class=\"headerlink\" title=\"3. 高光贴图（Specular Map）\"></a>3. 高光贴图（Specular Map）</h4><p>用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var meterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    specular: 0x404040, // 高光颜色</span><br><span class=\"line\">    shininess: 5,              // 高光平滑度，默认30，值越高越强烈</span><br><span class=\"line\">    specularMap: textureLoader.load(&apos;./img_spec.jpg&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-环境贴图（Cube-Map）\"><a href=\"#4-环境贴图（Cube-Map）\" class=\"headerlink\" title=\"4. 环境贴图（Cube Map）\"></a>4. 环境贴图（Cube Map）</h4><p>通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 立方体环境，顺序是前后上下右左</span><br><span class=\"line\">var cubeTexture = new THREE.CubeTextureLoader().setPath(&apos;../img/skyBox&apos;).load(&#123;</span><br><span class=\"line\">    &apos;px.jpg&apos;, &apos;nx.jpg&apos;,</span><br><span class=\"line\">    &apos;py.jpg&apos;, &apos;ny.jpg&apos;,</span><br><span class=\"line\">    &apos;pz.jpg&apos;, &apos;nz.jpg&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">scene.background = cubeTexture;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"光源Lights\"><a href=\"#光源Lights\" class=\"headerlink\" title=\"光源Lights\"></a>光源Lights</h3><p>为了让图片看起来更加立体真实，通常需要增加一些光线。<br><strong>注意：</strong>只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 </p>\n<h4 id=\"1-环境光（AmbientLight）\"><a href=\"#1-环境光（AmbientLight）\" class=\"headerlink\" title=\"1. 环境光（AmbientLight）\"></a>1. 环境光（AmbientLight）</h4><p>这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光</span><br><span class=\"line\">scene.add(light);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-平行光（DirectionalLight）\"><a href=\"#2-平行光（DirectionalLight）\" class=\"headerlink\" title=\"2. 平行光（DirectionalLight）\"></a>2. 平行光（DirectionalLight）</h4><p>产生平行的光线，当材质为<code>MeshLambertMaterial</code>或<code>MeshPhongMaterial</code>时才会受到影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new THREE.DirectionalLight(hex, instensity)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-点光源（PointLight）\"><a href=\"#3-点光源（PointLight）\" class=\"headerlink\" title=\"3. 点光源（PointLight）\"></a>3. 点光源（PointLight）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">* hex：颜色的RGB值，如0x333333</span><br><span class=\"line\">* intensity：光强，optional</span><br><span class=\"line\">* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional</span><br><span class=\"line\">* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional</span><br><span class=\"line\">*/</span><br><span class=\"line\">var light = new THREE.PointLight(hex, intensity, distance, decay)</span><br></pre></td></tr></table></figure>\n<h4 id=\"PointLight和DirectionalLight常用属性\"><a href=\"#PointLight和DirectionalLight常用属性\" class=\"headerlink\" title=\"PointLight和DirectionalLight常用属性\"></a>PointLight和DirectionalLight常用属性</h4><table>\n<thead>\n<tr>\n<th>常用属性</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>-</td>\n<td>阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh）</td>\n</tr>\n<tr>\n<td>penumbra</td>\n<td>0.0</td>\n<td>聚光锥的半影衰减百分比[0, 1]</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>-</td>\n<td>用于存储光照阴影的所有信息，具体属性可参考<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights\" target=\"_blank\" rel=\"noopener\">光照阴影</a>/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow))</td>\n</tr>\n<tr>\n<td>castShadow</td>\n<td>false</td>\n<td>是否投射动态阴影，<font color=\"tomato\"><em>很耗费计算资源</em></font></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"加载器Loaders\"><a href=\"#加载器Loaders\" class=\"headerlink\" title=\"加载器Loaders\"></a>加载器Loaders</h3><p>加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.[Loader]();</span><br><span class=\"line\">/* </span><br><span class=\"line\"> * 函数名：.load(url, onLoad, onProgress, onError)</span><br><span class=\"line\"> * url：资源地址</span><br><span class=\"line\"> * onLoad: 加载完成的回调，参数是已加载的资源文本</span><br><span class=\"line\"> * onProgress: 加载中的调用，参数是XmlHttpRequest实例</span><br><span class=\"line\"> * onError：加载出错时调用</span><br><span class=\"line\">*/</span><br><span class=\"line\">loader.load(url, onLoad, onProgress, onError)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-TextureLoader-ImageLoader\"><a href=\"#1-TextureLoader-ImageLoader\" class=\"headerlink\" title=\"1. TextureLoader/ImageLoader\"></a>1. TextureLoader/ImageLoader</h4><p>加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.TextureLoader();</span><br><span class=\"line\">loader.load(&apos;texture/earth.jpg&apos;, function( texture ) &#123;</span><br><span class=\"line\">    // 作为纹理，或直接使用TextureLoader</span><br><span class=\"line\">    // var geometry = new THREE.SphereGeometry(15, 10, 10);</span><br><span class=\"line\">    // var meterial = new THREE.MeshBasicMaterial(&#123;color: 0x739783, map:texture&#125;);</span><br><span class=\"line\">    // earth = new THREE.Mesh(geometry, material);</span><br><span class=\"line\">    // scene.add(earth);</span><br><span class=\"line\">    // 直接绘制在canvas上</span><br><span class=\"line\">    var canvas =document.createElement(&apos;canvas&apos;);</span><br><span class=\"line\">    var context = canvas.getContext(&apos;2d&apos;);</span><br><span class=\"line\">    context.drawImage(texture, 100, 100);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-AudioLoader\"><a href=\"#2-AudioLoader\" class=\"headerlink\" title=\"2. AudioLoader\"></a>2. AudioLoader</h4><p>加载音乐也是常见的需求，加载音乐并播放的实现方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 初始化侦听器并添加到相机中</span><br><span class=\"line\">var listener = new THREE.AudioListener();</span><br><span class=\"line\">camera.add(listener);</span><br><span class=\"line\">// 实例化一个音频对象并添加到场景中</span><br><span class=\"line\">var audio = new THREE.audio( audioListener );</span><br><span class=\"line\">scene.add(audio);</span><br><span class=\"line\">// 加载资源</span><br><span class=\"line\">var loader = new THREE.AudioLoader();</span><br><span class=\"line\">loader.load( &apos;audio/amobient.ogg&apos;, function(audioBuffer) &#123;</span><br><span class=\"line\">    audio.setBuffer(audioBuffer);</span><br><span class=\"line\">    audio.play();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function(xhr) &#123;</span><br><span class=\"line\">    console.log( (xhr.loaded / xhr.total * 100) + &quot;% is loaded&quot; );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">function(xhr) &#123;</span><br><span class=\"line\">    console.log(&apos;An error happened&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。</p>\n<h4 id=\"3-JSONLoader\"><a href=\"#3-JSONLoader\" class=\"headerlink\" title=\"3. JSONLoader\"></a>3. JSONLoader</h4><p>实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.JSONLoader();</span><br><span class=\"line\">loader.load(</span><br><span class=\"line\">    &apos;./monster/monster.js&apos;,</span><br><span class=\"line\">    function (geometry, materials) &#123;</span><br><span class=\"line\">        var material = new THREE.MultiMaterial(materials);</span><br><span class=\"line\">        var object = new THREE.Mesh(geometry, material);</span><br><span class=\"line\">        scene.add(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>使用加载的资源时，要适时重新渲染，否则无法生效。</li>\n<li>\b存在跨域问题。</li>\n</ul>\n<hr>\n<h3 id=\"贴图详解\"><a href=\"#贴图详解\" class=\"headerlink\" title=\"贴图详解\"></a>贴图详解</h3><p>大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      </p>\n<h4 id=\"1-凹凸贴图（Bump-Map）\"><a href=\"#1-凹凸贴图（Bump-Map）\" class=\"headerlink\" title=\"1. 凹凸贴图（Bump Map）\"></a>1. 凹凸贴图（Bump Map）</h4><p>用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var meterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    bumpMap: textureLoader.load(&apos;./img_bump.jpg&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-漫反射贴图（Diffuse-Map）\"><a href=\"#2-漫反射贴图（Diffuse-Map）\" class=\"headerlink\" title=\"2. 漫反射贴图（Diffuse Map）\"></a>2. 漫反射贴图（Diffuse Map）</h4><p>用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。</p>\n<h4 id=\"3-高光贴图（Specular-Map）\"><a href=\"#3-高光贴图（Specular-Map）\" class=\"headerlink\" title=\"3. 高光贴图（Specular Map）\"></a>3. 高光贴图（Specular Map）</h4><p>用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var meterial = new THREE.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    specular: 0x404040, // 高光颜色</span><br><span class=\"line\">    shininess: 5,              // 高光平滑度，默认30，值越高越强烈</span><br><span class=\"line\">    specularMap: textureLoader.load(&apos;./img_spec.jpg&apos;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-环境贴图（Cube-Map）\"><a href=\"#4-环境贴图（Cube-Map）\" class=\"headerlink\" title=\"4. 环境贴图（Cube Map）\"></a>4. 环境贴图（Cube Map）</h4><p>通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 立方体环境，顺序是前后上下右左</span><br><span class=\"line\">var cubeTexture = new THREE.CubeTextureLoader().setPath(&apos;../img/skyBox&apos;).load(&#123;</span><br><span class=\"line\">    &apos;px.jpg&apos;, &apos;nx.jpg&apos;,</span><br><span class=\"line\">    &apos;py.jpg&apos;, &apos;ny.jpg&apos;,</span><br><span class=\"line\">    &apos;pz.jpg&apos;, &apos;nz.jpg&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">scene.background = cubeTexture;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"光源Lights\"><a href=\"#光源Lights\" class=\"headerlink\" title=\"光源Lights\"></a>光源Lights</h3><p>为了让图片看起来更加立体真实，通常需要增加一些光线。<br><strong>注意：</strong>只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 </p>\n<h4 id=\"1-环境光（AmbientLight）\"><a href=\"#1-环境光（AmbientLight）\" class=\"headerlink\" title=\"1. 环境光（AmbientLight）\"></a>1. 环境光（AmbientLight）</h4><p>这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光</span><br><span class=\"line\">scene.add(light);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-平行光（DirectionalLight）\"><a href=\"#2-平行光（DirectionalLight）\" class=\"headerlink\" title=\"2. 平行光（DirectionalLight）\"></a>2. 平行光（DirectionalLight）</h4><p>产生平行的光线，当材质为<code>MeshLambertMaterial</code>或<code>MeshPhongMaterial</code>时才会受到影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var light = new THREE.DirectionalLight(hex, instensity)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-点光源（PointLight）\"><a href=\"#3-点光源（PointLight）\" class=\"headerlink\" title=\"3. 点光源（PointLight）\"></a>3. 点光源（PointLight）</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">* hex：颜色的RGB值，如0x333333</span><br><span class=\"line\">* intensity：光强，optional</span><br><span class=\"line\">* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional</span><br><span class=\"line\">* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional</span><br><span class=\"line\">*/</span><br><span class=\"line\">var light = new THREE.PointLight(hex, intensity, distance, decay)</span><br></pre></td></tr></table></figure>\n<h4 id=\"PointLight和DirectionalLight常用属性\"><a href=\"#PointLight和DirectionalLight常用属性\" class=\"headerlink\" title=\"PointLight和DirectionalLight常用属性\"></a>PointLight和DirectionalLight常用属性</h4><table>\n<thead>\n<tr>\n<th>常用属性</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>-</td>\n<td>阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh）</td>\n</tr>\n<tr>\n<td>penumbra</td>\n<td>0.0</td>\n<td>聚光锥的半影衰减百分比[0, 1]</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>-</td>\n<td>用于存储光照阴影的所有信息，具体属性可参考<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights\" target=\"_blank\" rel=\"noopener\">光照阴影</a>/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow))</td>\n</tr>\n<tr>\n<td>castShadow</td>\n<td>false</td>\n<td>是否投射动态阴影，<font color=\"tomato\"><em>很耗费计算资源</em></font></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"threejs进阶上：动画","date":"2018-10-11T13:16:18.000Z","_content":"\n### 简单动画\n对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用`requestAnimationFrame`来进行重绘，示例：   \n```\nfunction render() {\n    earth.rotation.y += 0.005;\n    cloud.rotation.y += 0.003;\n\n    renderer.render(scene, camera);\n    var id = requestAnimationFrame(render);\n}\nrender();\n```\n\n`requestAnimationFrame`方法设置的动画，停止的方式如`cancelRequestFrame(id)`。\n通过`requestAnimationFrame`实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库[tween.js](http://www.createjs.cc/tweenjs/)来实现。\n\n\n### 模型骨骼动画\n*注意：复杂的骨骼动画容易出问题而且定位较难，建议**谨慎使用**。*\nthree.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是`glTF`格式的模型数据，支持较好。   \n使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。\n\n### 性能插件stats\n\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。   \n```\n// 1. 引入插件\n<script src=\"../lib/stats.min.js\"></script>\n\n// 2. 实例化组件并添加到dom中\nvar stats = new Stats();\ncontainer.appendChild(stats.dom);\n\n// 3. 在requestAnimationFrame()函数调用里面更新stats\nfunction render() {\n    // ...\n    stats.update();\n    requestAnimationFrame(render);\n}\nrender();\n```","source":"_posts/threejs进阶上：动画.md","raw":"---\ntitle: threejs进阶上：动画\ndate: 2018-10-11 21:16:18\ntags: threejs\ncategory: lesson\n---\n\n### 简单动画\n对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用`requestAnimationFrame`来进行重绘，示例：   \n```\nfunction render() {\n    earth.rotation.y += 0.005;\n    cloud.rotation.y += 0.003;\n\n    renderer.render(scene, camera);\n    var id = requestAnimationFrame(render);\n}\nrender();\n```\n\n`requestAnimationFrame`方法设置的动画，停止的方式如`cancelRequestFrame(id)`。\n通过`requestAnimationFrame`实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库[tween.js](http://www.createjs.cc/tweenjs/)来实现。\n\n\n### 模型骨骼动画\n*注意：复杂的骨骼动画容易出问题而且定位较难，建议**谨慎使用**。*\nthree.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是`glTF`格式的模型数据，支持较好。   \n使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。\n\n### 性能插件stats\n\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。   \n```\n// 1. 引入插件\n<script src=\"../lib/stats.min.js\"></script>\n\n// 2. 实例化组件并添加到dom中\nvar stats = new Stats();\ncontainer.appendChild(stats.dom);\n\n// 3. 在requestAnimationFrame()函数调用里面更新stats\nfunction render() {\n    // ...\n    stats.update();\n    requestAnimationFrame(render);\n}\nrender();\n```","slug":"threejs进阶上：动画","published":1,"updated":"2018-10-11T13:43:00.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn4mystw0005hd7ouzdnjrso","content":"<h3 id=\"简单动画\"><a href=\"#简单动画\" class=\"headerlink\" title=\"简单动画\"></a>简单动画</h3><p>对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用<code>requestAnimationFrame</code>来进行重绘，示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function render() &#123;</span><br><span class=\"line\">    earth.rotation.y += 0.005;</span><br><span class=\"line\">    cloud.rotation.y += 0.003;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderer.render(scene, camera);</span><br><span class=\"line\">    var id = requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n<p><code>requestAnimationFrame</code>方法设置的动画，停止的方式如<code>cancelRequestFrame(id)</code>。<br>通过<code>requestAnimationFrame</code>实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库<a href=\"http://www.createjs.cc/tweenjs/\" target=\"_blank\" rel=\"noopener\">tween.js</a>来实现。</p>\n<h3 id=\"模型骨骼动画\"><a href=\"#模型骨骼动画\" class=\"headerlink\" title=\"模型骨骼动画\"></a>模型骨骼动画</h3><p><em>注意：复杂的骨骼动画容易出问题而且定位较难，建议<strong>谨慎使用</strong>。</em><br>three.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是<code>glTF</code>格式的模型数据，支持较好。<br>使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。</p>\n<h3 id=\"性能插件stats\"><a href=\"#性能插件stats\" class=\"headerlink\" title=\"性能插件stats\"></a>性能插件stats</h3><p>\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 引入插件</span><br><span class=\"line\">&lt;script src=&quot;../lib/stats.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 实例化组件并添加到dom中</span><br><span class=\"line\">var stats = new Stats();</span><br><span class=\"line\">container.appendChild(stats.dom);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 在requestAnimationFrame()函数调用里面更新stats</span><br><span class=\"line\">function render() &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    stats.update();</span><br><span class=\"line\">    requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单动画\"><a href=\"#简单动画\" class=\"headerlink\" title=\"简单动画\"></a>简单动画</h3><p>对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用<code>requestAnimationFrame</code>来进行重绘，示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function render() &#123;</span><br><span class=\"line\">    earth.rotation.y += 0.005;</span><br><span class=\"line\">    cloud.rotation.y += 0.003;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderer.render(scene, camera);</span><br><span class=\"line\">    var id = requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n<p><code>requestAnimationFrame</code>方法设置的动画，停止的方式如<code>cancelRequestFrame(id)</code>。<br>通过<code>requestAnimationFrame</code>实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库<a href=\"http://www.createjs.cc/tweenjs/\" target=\"_blank\" rel=\"noopener\">tween.js</a>来实现。</p>\n<h3 id=\"模型骨骼动画\"><a href=\"#模型骨骼动画\" class=\"headerlink\" title=\"模型骨骼动画\"></a>模型骨骼动画</h3><p><em>注意：复杂的骨骼动画容易出问题而且定位较难，建议<strong>谨慎使用</strong>。</em><br>three.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是<code>glTF</code>格式的模型数据，支持较好。<br>使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。</p>\n<h3 id=\"性能插件stats\"><a href=\"#性能插件stats\" class=\"headerlink\" title=\"性能插件stats\"></a>性能插件stats</h3><p>\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 引入插件</span><br><span class=\"line\">&lt;script src=&quot;../lib/stats.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. 实例化组件并添加到dom中</span><br><span class=\"line\">var stats = new Stats();</span><br><span class=\"line\">container.appendChild(stats.dom);</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 在requestAnimationFrame()函数调用里面更新stats</span><br><span class=\"line\">function render() &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    stats.update();</span><br><span class=\"line\">    requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n"},{"title":"threejs进阶下：交互","date":"2018-10-11T13:16:51.000Z","_content":"\n### Raycaster\n\n`THREE.Raycaster`是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    \n\n#### new Raycaster(origin, direction, near, far)\n\n- origin：光线投射的起点向量\n- direction：光线投射的方向向量，归一化\n- near：投射近点，用于限制光线的起点，不能为负，缺省为0\n- far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大\n\n#### setFromCamera(coords, camera)\n\n用一个新的原点和方向向量来更新射线，参数说明如下。\n\n- coords：鼠标的归一化二维坐标，归一化方法如下：\n    ``` \n    mouse.x = (e.clientX / window.innerWidth) * 2 -1;\n    mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\n    ```\n- camera：射线起点处的相机，即把射线起点设置在该相机位置处\n\n#### intersectObject(object, recursive)\n检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。\n- object：用于检测和射线相交的物体\n- recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false\n\n#### 点击返回选中物体\n```\nvar raycaster = new THREE.Raycaster(origin, direction, near, far);\nmouse.x = (e.clientX / window.innerWidth) * 2 -1;\nmouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\nraycaster.setFromCamera(mouse, camera);\nvar intersects = raycaster.intersectObjects(locationGroup.children, true);    \n```\n\n#### 碰撞检测\n原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。\n```\n// 1. 获取物体中心点\nvar originP = obj.position.clone(); \nfor(var i=0; i<obj.geometry.vertices.length; i++) {\n    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值\n    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);\n    // 获取由中心指向顶点的向量\n    var directV = vertex.sub(obj.position);\n    // 方向向量归一化并发射射线\n    var ray = new Three.Raycaster(originP, directV.clone().normalize());\n    // 检测相交物体和距离\n    var collisionRes = ray.intersectObjects(collideMeshList, true);\n    if (collisionRes.length>0 && collisionRes[0].distance < directV.length() ) {\n        console.log('发生碰撞');\n    }\n}\n```\n\n***\n\nhttps://blog.csdn.net/birdflyto206/article/details/52414382\n### 相机操作\n\n模型移动常常通过相机的移动来实现，常用的相机控件如下：   \n\nFirstPersonControls：第一人称控件，键盘移动，鼠标转动 \nFlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动 \nRollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转 \nTrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景 \nOrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移\nPathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置\n","source":"_posts/threejs进阶下：交互.md","raw":"---\ntitle: threejs进阶下：交互\ndate: 2018-10-11 21:16:51\ntags: threejs\ncategory: lesson\n---\n\n### Raycaster\n\n`THREE.Raycaster`是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    \n\n#### new Raycaster(origin, direction, near, far)\n\n- origin：光线投射的起点向量\n- direction：光线投射的方向向量，归一化\n- near：投射近点，用于限制光线的起点，不能为负，缺省为0\n- far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大\n\n#### setFromCamera(coords, camera)\n\n用一个新的原点和方向向量来更新射线，参数说明如下。\n\n- coords：鼠标的归一化二维坐标，归一化方法如下：\n    ``` \n    mouse.x = (e.clientX / window.innerWidth) * 2 -1;\n    mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\n    ```\n- camera：射线起点处的相机，即把射线起点设置在该相机位置处\n\n#### intersectObject(object, recursive)\n检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。\n- object：用于检测和射线相交的物体\n- recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false\n\n#### 点击返回选中物体\n```\nvar raycaster = new THREE.Raycaster(origin, direction, near, far);\nmouse.x = (e.clientX / window.innerWidth) * 2 -1;\nmouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\nraycaster.setFromCamera(mouse, camera);\nvar intersects = raycaster.intersectObjects(locationGroup.children, true);    \n```\n\n#### 碰撞检测\n原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。\n```\n// 1. 获取物体中心点\nvar originP = obj.position.clone(); \nfor(var i=0; i<obj.geometry.vertices.length; i++) {\n    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值\n    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);\n    // 获取由中心指向顶点的向量\n    var directV = vertex.sub(obj.position);\n    // 方向向量归一化并发射射线\n    var ray = new Three.Raycaster(originP, directV.clone().normalize());\n    // 检测相交物体和距离\n    var collisionRes = ray.intersectObjects(collideMeshList, true);\n    if (collisionRes.length>0 && collisionRes[0].distance < directV.length() ) {\n        console.log('发生碰撞');\n    }\n}\n```\n\n***\n\nhttps://blog.csdn.net/birdflyto206/article/details/52414382\n### 相机操作\n\n模型移动常常通过相机的移动来实现，常用的相机控件如下：   \n\nFirstPersonControls：第一人称控件，键盘移动，鼠标转动 \nFlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动 \nRollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转 \nTrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景 \nOrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移\nPathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置\n","slug":"threejs进阶下：交互","published":1,"updated":"2018-10-11T13:44:35.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn4mysty0006hd7ojocessdk","content":"<h3 id=\"Raycaster\"><a href=\"#Raycaster\" class=\"headerlink\" title=\"Raycaster\"></a>Raycaster</h3><p><code>THREE.Raycaster</code>是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    </p>\n<h4 id=\"new-Raycaster-origin-direction-near-far\"><a href=\"#new-Raycaster-origin-direction-near-far\" class=\"headerlink\" title=\"new Raycaster(origin, direction, near, far)\"></a>new Raycaster(origin, direction, near, far)</h4><ul>\n<li>origin：光线投射的起点向量</li>\n<li>direction：光线投射的方向向量，归一化</li>\n<li>near：投射近点，用于限制光线的起点，不能为负，缺省为0</li>\n<li>far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大</li>\n</ul>\n<h4 id=\"setFromCamera-coords-camera\"><a href=\"#setFromCamera-coords-camera\" class=\"headerlink\" title=\"setFromCamera(coords, camera)\"></a>setFromCamera(coords, camera)</h4><p>用一个新的原点和方向向量来更新射线，参数说明如下。</p>\n<ul>\n<li><p>coords：鼠标的归一化二维坐标，归一化方法如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouse.x = (e.clientX / window.innerWidth) * 2 -1;</span><br><span class=\"line\">mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>camera：射线起点处的相机，即把射线起点设置在该相机位置处</p>\n</li>\n</ul>\n<h4 id=\"intersectObject-object-recursive\"><a href=\"#intersectObject-object-recursive\" class=\"headerlink\" title=\"intersectObject(object, recursive)\"></a>intersectObject(object, recursive)</h4><p>检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。</p>\n<ul>\n<li>object：用于检测和射线相交的物体</li>\n<li>recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false</li>\n</ul>\n<h4 id=\"点击返回选中物体\"><a href=\"#点击返回选中物体\" class=\"headerlink\" title=\"点击返回选中物体\"></a>点击返回选中物体</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var raycaster = new THREE.Raycaster(origin, direction, near, far);</span><br><span class=\"line\">mouse.x = (e.clientX / window.innerWidth) * 2 -1;</span><br><span class=\"line\">mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;</span><br><span class=\"line\">raycaster.setFromCamera(mouse, camera);</span><br><span class=\"line\">var intersects = raycaster.intersectObjects(locationGroup.children, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 获取物体中心点</span><br><span class=\"line\">var originP = obj.position.clone(); </span><br><span class=\"line\">for(var i=0; i&lt;obj.geometry.vertices.length; i++) &#123;</span><br><span class=\"line\">    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值</span><br><span class=\"line\">    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);</span><br><span class=\"line\">    // 获取由中心指向顶点的向量</span><br><span class=\"line\">    var directV = vertex.sub(obj.position);</span><br><span class=\"line\">    // 方向向量归一化并发射射线</span><br><span class=\"line\">    var ray = new Three.Raycaster(originP, directV.clone().normalize());</span><br><span class=\"line\">    // 检测相交物体和距离</span><br><span class=\"line\">    var collisionRes = ray.intersectObjects(collideMeshList, true);</span><br><span class=\"line\">    if (collisionRes.length&gt;0 &amp;&amp; collisionRes[0].distance &lt; directV.length() ) &#123;</span><br><span class=\"line\">        console.log(&apos;发生碰撞&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><a href=\"https://blog.csdn.net/birdflyto206/article/details/52414382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/birdflyto206/article/details/52414382</a></p>\n<h3 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h3><p>模型移动常常通过相机的移动来实现，常用的相机控件如下：   </p>\n<p>FirstPersonControls：第一人称控件，键盘移动，鼠标转动<br>FlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动<br>RollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转<br>TrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景<br>OrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移<br>PathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Raycaster\"><a href=\"#Raycaster\" class=\"headerlink\" title=\"Raycaster\"></a>Raycaster</h3><p><code>THREE.Raycaster</code>是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    </p>\n<h4 id=\"new-Raycaster-origin-direction-near-far\"><a href=\"#new-Raycaster-origin-direction-near-far\" class=\"headerlink\" title=\"new Raycaster(origin, direction, near, far)\"></a>new Raycaster(origin, direction, near, far)</h4><ul>\n<li>origin：光线投射的起点向量</li>\n<li>direction：光线投射的方向向量，归一化</li>\n<li>near：投射近点，用于限制光线的起点，不能为负，缺省为0</li>\n<li>far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大</li>\n</ul>\n<h4 id=\"setFromCamera-coords-camera\"><a href=\"#setFromCamera-coords-camera\" class=\"headerlink\" title=\"setFromCamera(coords, camera)\"></a>setFromCamera(coords, camera)</h4><p>用一个新的原点和方向向量来更新射线，参数说明如下。</p>\n<ul>\n<li><p>coords：鼠标的归一化二维坐标，归一化方法如下：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouse.x = (e.clientX / window.innerWidth) * 2 -1;</span><br><span class=\"line\">mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>camera：射线起点处的相机，即把射线起点设置在该相机位置处</p>\n</li>\n</ul>\n<h4 id=\"intersectObject-object-recursive\"><a href=\"#intersectObject-object-recursive\" class=\"headerlink\" title=\"intersectObject(object, recursive)\"></a>intersectObject(object, recursive)</h4><p>检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。</p>\n<ul>\n<li>object：用于检测和射线相交的物体</li>\n<li>recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false</li>\n</ul>\n<h4 id=\"点击返回选中物体\"><a href=\"#点击返回选中物体\" class=\"headerlink\" title=\"点击返回选中物体\"></a>点击返回选中物体</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var raycaster = new THREE.Raycaster(origin, direction, near, far);</span><br><span class=\"line\">mouse.x = (e.clientX / window.innerWidth) * 2 -1;</span><br><span class=\"line\">mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;</span><br><span class=\"line\">raycaster.setFromCamera(mouse, camera);</span><br><span class=\"line\">var intersects = raycaster.intersectObjects(locationGroup.children, true);</span><br></pre></td></tr></table></figure>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. 获取物体中心点</span><br><span class=\"line\">var originP = obj.position.clone(); </span><br><span class=\"line\">for(var i=0; i&lt;obj.geometry.vertices.length; i++) &#123;</span><br><span class=\"line\">    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值</span><br><span class=\"line\">    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);</span><br><span class=\"line\">    // 获取由中心指向顶点的向量</span><br><span class=\"line\">    var directV = vertex.sub(obj.position);</span><br><span class=\"line\">    // 方向向量归一化并发射射线</span><br><span class=\"line\">    var ray = new Three.Raycaster(originP, directV.clone().normalize());</span><br><span class=\"line\">    // 检测相交物体和距离</span><br><span class=\"line\">    var collisionRes = ray.intersectObjects(collideMeshList, true);</span><br><span class=\"line\">    if (collisionRes.length&gt;0 &amp;&amp; collisionRes[0].distance &lt; directV.length() ) &#123;</span><br><span class=\"line\">        console.log(&apos;发生碰撞&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><a href=\"https://blog.csdn.net/birdflyto206/article/details/52414382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/birdflyto206/article/details/52414382</a></p>\n<h3 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h3><p>模型移动常常通过相机的移动来实现，常用的相机控件如下：   </p>\n<p>FirstPersonControls：第一人称控件，键盘移动，鼠标转动<br>FlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动<br>RollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转<br>TrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景<br>OrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移<br>PathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置</p>\n"},{"title":"threejs问题集锦","date":"2018-10-11T13:45:32.000Z","_content":"\n- [贴图](#map)\n- [官方插件](#official-plugin)\n\n### <div id=\"map\">贴图</div>\n1. 贴图大小限制\nWebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。\n\n#### <div id=\"official-plugin\">官方插件</div>\n1. 使用最新版`OrbitControls.js`(2018/10/11)后，点击事件无法生效\n最新版的代码在所有涉及到的事件中都添加了`event.preventDefault()`，注释掉对应的就可以了。","source":"_posts/threejs问题集锦.md","raw":"---\ntitle: threejs问题集锦\ndate: 2018-10-11 21:45:32\ntags: threejs\ncategory: lesson\n---\n\n- [贴图](#map)\n- [官方插件](#official-plugin)\n\n### <div id=\"map\">贴图</div>\n1. 贴图大小限制\nWebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。\n\n#### <div id=\"official-plugin\">官方插件</div>\n1. 使用最新版`OrbitControls.js`(2018/10/11)后，点击事件无法生效\n最新版的代码在所有涉及到的事件中都添加了`event.preventDefault()`，注释掉对应的就可以了。","slug":"threejs问题集锦","published":1,"updated":"2018-10-11T13:46:28.533Z","_id":"cjn4mysu30009hd7out5o5k7f","comments":1,"layout":"post","photos":[],"link":"","content":"<ul>\n<li><a href=\"#map\">贴图</a></li>\n<li><a href=\"#official-plugin\">官方插件</a></li>\n</ul>\n<h3 id=\"贴图\"><a href=\"#贴图\" class=\"headerlink\" title=\"贴图\"></a><div id=\"map\">贴图</div></h3><ol>\n<li>贴图大小限制<br>WebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。</li>\n</ol>\n<h4 id=\"官方插件\"><a href=\"#官方插件\" class=\"headerlink\" title=\"官方插件\"></a><div id=\"official-plugin\">官方插件</div></h4><ol>\n<li>使用最新版<code>OrbitControls.js</code>(2018/10/11)后，点击事件无法生效<br>最新版的代码在所有涉及到的事件中都添加了<code>event.preventDefault()</code>，注释掉对应的就可以了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#map\">贴图</a></li>\n<li><a href=\"#official-plugin\">官方插件</a></li>\n</ul>\n<h3 id=\"贴图\"><a href=\"#贴图\" class=\"headerlink\" title=\"贴图\"></a><div id=\"map\">贴图</div></h3><ol>\n<li>贴图大小限制<br>WebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。</li>\n</ol>\n<h4 id=\"官方插件\"><a href=\"#官方插件\" class=\"headerlink\" title=\"官方插件\"></a><div id=\"official-plugin\">官方插件</div></h4><ol>\n<li>使用最新版<code>OrbitControls.js</code>(2018/10/11)后，点击事件无法生效<br>最新版的代码在所有涉及到的事件中都添加了<code>event.preventDefault()</code>，注释掉对应的就可以了。</li>\n</ol>\n"},{"title":"vuepress搭建","date":"2018-08-10T11:13:12.000Z","_content":"\n## 介绍\n1. `vuepress`支持html、md、vue。这些格式最终都会被转换成vue组件：`markdown -> html -> vue`。\n \n## 搭建\n1. 初始化：`npm init`\n2. 安装vuepress  \n*全局安装`-g`，在已有的项目中安装`-d`。*  \n    ```bash\n    # 全局安装\n    npm install -g vuepress\n \n    # 创建一个专门的docs目录存放md文件\n    # mkdir docs\n \n    # 创建一个 markdown 文件\n    # echo '# Hello Vuepress' > docs/README.md\n    echo '# Hello Vuepress' > README.md\n \n    # 编写文档\n    # npx vuepress dev docs\n    npx vuepress dev\n \n    # 构建\n    # npx vuepress build docs\n    npx vuepress build\n    ```\n    为了防止以后忘记命令，建议在`package.json`中添加`scripts`脚本。\n    ```\n    {\n        \"scripts\": {\n            \"dev\": \"vuepress dev docs\",\n            \"build\": \"vuepress build docs\"\n        }\n    }\n    ```\n3. 在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在`.vuepress`文件下添加配置文件`config.js`。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照[官方文档](https://vuepress.docschina.org/config/)。  \n    ```\n    module.exports = {\n        base: '/gh-pages/', // github仓库名\n        title: 'Hello VuePress', // 标题\n        description: 'Justing do it!',\n \n        // 顶部导航栏nav\n        themeConfig: {\n            nav: [\n                {text: '指南', link: '/guide/'},\n                {text: '配置参考', link: '/config/'},\n                {text: '默认主题配置', link: '/default-theme-config/'},\n                {text: 'Github', link: 'https://github.com/docschina/vuepress/'},\n            ],\n \n            // 左侧sidebar\n            sidebar: [\n                '/',\n                'pageA.html',\n                'pageB.html'\n            ]\n        },\n    }\n    ```\n4. 为了让这个系统能够在外部访问，可以借助github。\n    - 建立好一个github仓库，如：https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base: [仓库名]`  \n    - 同步远程仓库到本地输出目录下`.vuepress/dist`  \n        ```\n        cd .vuepress/dist\n        git init\n        git pull -f\n        ```\n    - 将`dist`目录下的文件上传到github的gh-pages分支下`.vuepress/`  \n        ```\n        git add -A\n        git commit -m 'deploy'\n        git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages\n        ```\n    - 在远程仓库`Settings -> Github Pages -> Source`设置为`gh-pages branch`，点击save。\n    - 这样就大功告成啦，效果：[DEMO](https://jinglecjy.github.io/technical-docs/)。\n## 问题记录\n1. 不使用`README.md`作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？ \nREADME.md 默认生成index.html为默认首页，不可更改。 \n2. 注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。`vuepress`比较适合不需要经常修改的静态文档。","source":"_posts/vuepress搭建.md","raw":"---\ntitle: vuepress搭建\ndate: 2018-08-10 19:13:12\ntags: 小项目\ncategory: tools\n---\n\n## 介绍\n1. `vuepress`支持html、md、vue。这些格式最终都会被转换成vue组件：`markdown -> html -> vue`。\n \n## 搭建\n1. 初始化：`npm init`\n2. 安装vuepress  \n*全局安装`-g`，在已有的项目中安装`-d`。*  \n    ```bash\n    # 全局安装\n    npm install -g vuepress\n \n    # 创建一个专门的docs目录存放md文件\n    # mkdir docs\n \n    # 创建一个 markdown 文件\n    # echo '# Hello Vuepress' > docs/README.md\n    echo '# Hello Vuepress' > README.md\n \n    # 编写文档\n    # npx vuepress dev docs\n    npx vuepress dev\n \n    # 构建\n    # npx vuepress build docs\n    npx vuepress build\n    ```\n    为了防止以后忘记命令，建议在`package.json`中添加`scripts`脚本。\n    ```\n    {\n        \"scripts\": {\n            \"dev\": \"vuepress dev docs\",\n            \"build\": \"vuepress build docs\"\n        }\n    }\n    ```\n3. 在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在`.vuepress`文件下添加配置文件`config.js`。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照[官方文档](https://vuepress.docschina.org/config/)。  \n    ```\n    module.exports = {\n        base: '/gh-pages/', // github仓库名\n        title: 'Hello VuePress', // 标题\n        description: 'Justing do it!',\n \n        // 顶部导航栏nav\n        themeConfig: {\n            nav: [\n                {text: '指南', link: '/guide/'},\n                {text: '配置参考', link: '/config/'},\n                {text: '默认主题配置', link: '/default-theme-config/'},\n                {text: 'Github', link: 'https://github.com/docschina/vuepress/'},\n            ],\n \n            // 左侧sidebar\n            sidebar: [\n                '/',\n                'pageA.html',\n                'pageB.html'\n            ]\n        },\n    }\n    ```\n4. 为了让这个系统能够在外部访问，可以借助github。\n    - 建立好一个github仓库，如：https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base: [仓库名]`  \n    - 同步远程仓库到本地输出目录下`.vuepress/dist`  \n        ```\n        cd .vuepress/dist\n        git init\n        git pull -f\n        ```\n    - 将`dist`目录下的文件上传到github的gh-pages分支下`.vuepress/`  \n        ```\n        git add -A\n        git commit -m 'deploy'\n        git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages\n        ```\n    - 在远程仓库`Settings -> Github Pages -> Source`设置为`gh-pages branch`，点击save。\n    - 这样就大功告成啦，效果：[DEMO](https://jinglecjy.github.io/technical-docs/)。\n## 问题记录\n1. 不使用`README.md`作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？ \nREADME.md 默认生成index.html为默认首页，不可更改。 \n2. 注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。`vuepress`比较适合不需要经常修改的静态文档。","slug":"vuepress搭建","published":1,"updated":"2018-08-10T11:34:18.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn4mysu4000ahd7ogsyc7l7n","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><code>vuepress</code>支持html、md、vue。这些格式最终都会被转换成vue组件：<code>markdown -&gt; html -&gt; vue</code>。</li>\n</ol>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><ol>\n<li>初始化：<code>npm init</code></li>\n<li><p>安装vuepress<br><em>全局安装<code>-g</code>，在已有的项目中安装<code>-d</code>。</em>  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install -g vuepress</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个专门的docs目录存放md文件</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"comment\"># echo '# Hello Vuepress' &gt; docs/README.md</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'# Hello Vuepress'</span> &gt; README.md</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编写文档</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress dev docs</span></span><br><span class=\"line\">npx vuepress dev</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress build docs</span></span><br><span class=\"line\">npx vuepress build</span><br></pre></td></tr></table></figure>\n<p> 为了防止以后忘记命令，建议在<code>package.json</code>中添加<code>scripts</code>脚本。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;dev&quot;: &quot;vuepress dev docs&quot;,</span><br><span class=\"line\">        &quot;build&quot;: &quot;vuepress build docs&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在<code>.vuepress</code>文件下添加配置文件<code>config.js</code>。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照<a href=\"https://vuepress.docschina.org/config/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    base: &apos;/gh-pages/&apos;, // github仓库名</span><br><span class=\"line\">    title: &apos;Hello VuePress&apos;, // 标题</span><br><span class=\"line\">    description: &apos;Justing do it!&apos;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 顶部导航栏nav</span><br><span class=\"line\">    themeConfig: &#123;</span><br><span class=\"line\">        nav: [</span><br><span class=\"line\">            &#123;text: &apos;指南&apos;, link: &apos;/guide/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;配置参考&apos;, link: &apos;/config/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;默认主题配置&apos;, link: &apos;/default-theme-config/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;Github&apos;, link: &apos;https://github.com/docschina/vuepress/&apos;&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"> </span><br><span class=\"line\">        // 左侧sidebar</span><br><span class=\"line\">        sidebar: [</span><br><span class=\"line\">            &apos;/&apos;,</span><br><span class=\"line\">            &apos;pageA.html&apos;,</span><br><span class=\"line\">            &apos;pageB.html&apos;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了让这个系统能够在外部访问，可以借助github。</p>\n<ul>\n<li>建立好一个github仓库，如：<a href=\"https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base</a>: [仓库名]`  </li>\n<li><p>同步远程仓库到本地输出目录下<code>.vuepress/dist</code>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .vuepress/dist</span><br><span class=\"line\">git init</span><br><span class=\"line\">git pull -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>dist</code>目录下的文件上传到github的gh-pages分支下<code>.vuepress/</code>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &apos;deploy&apos;</span><br><span class=\"line\">git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在远程仓库<code>Settings -&gt; Github Pages -&gt; Source</code>设置为<code>gh-pages branch</code>，点击save。</p>\n</li>\n<li>这样就大功告成啦，效果：<a href=\"https://jinglecjy.github.io/technical-docs/\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2></li>\n</ul>\n</li>\n<li>不使用<code>README.md</code>作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？<br>README.md 默认生成index.html为默认首页，不可更改。 </li>\n<li>注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。<code>vuepress</code>比较适合不需要经常修改的静态文档。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><code>vuepress</code>支持html、md、vue。这些格式最终都会被转换成vue组件：<code>markdown -&gt; html -&gt; vue</code>。</li>\n</ol>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><ol>\n<li>初始化：<code>npm init</code></li>\n<li><p>安装vuepress<br><em>全局安装<code>-g</code>，在已有的项目中安装<code>-d</code>。</em>  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install -g vuepress</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个专门的docs目录存放md文件</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"comment\"># echo '# Hello Vuepress' &gt; docs/README.md</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'# Hello Vuepress'</span> &gt; README.md</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编写文档</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress dev docs</span></span><br><span class=\"line\">npx vuepress dev</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress build docs</span></span><br><span class=\"line\">npx vuepress build</span><br></pre></td></tr></table></figure>\n<p> 为了防止以后忘记命令，建议在<code>package.json</code>中添加<code>scripts</code>脚本。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;scripts&quot;: &#123;</span><br><span class=\"line\">        &quot;dev&quot;: &quot;vuepress dev docs&quot;,</span><br><span class=\"line\">        &quot;build&quot;: &quot;vuepress build docs&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在<code>.vuepress</code>文件下添加配置文件<code>config.js</code>。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照<a href=\"https://vuepress.docschina.org/config/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。  </p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    base: &apos;/gh-pages/&apos;, // github仓库名</span><br><span class=\"line\">    title: &apos;Hello VuePress&apos;, // 标题</span><br><span class=\"line\">    description: &apos;Justing do it!&apos;,</span><br><span class=\"line\"> </span><br><span class=\"line\">    // 顶部导航栏nav</span><br><span class=\"line\">    themeConfig: &#123;</span><br><span class=\"line\">        nav: [</span><br><span class=\"line\">            &#123;text: &apos;指南&apos;, link: &apos;/guide/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;配置参考&apos;, link: &apos;/config/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;默认主题配置&apos;, link: &apos;/default-theme-config/&apos;&#125;,</span><br><span class=\"line\">            &#123;text: &apos;Github&apos;, link: &apos;https://github.com/docschina/vuepress/&apos;&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"> </span><br><span class=\"line\">        // 左侧sidebar</span><br><span class=\"line\">        sidebar: [</span><br><span class=\"line\">            &apos;/&apos;,</span><br><span class=\"line\">            &apos;pageA.html&apos;,</span><br><span class=\"line\">            &apos;pageB.html&apos;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了让这个系统能够在外部访问，可以借助github。</p>\n<ul>\n<li>建立好一个github仓库，如：<a href=\"https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base</a>: [仓库名]`  </li>\n<li><p>同步远程仓库到本地输出目录下<code>.vuepress/dist</code>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd .vuepress/dist</span><br><span class=\"line\">git init</span><br><span class=\"line\">git pull -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>dist</code>目录下的文件上传到github的gh-pages分支下<code>.vuepress/</code>  </p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m &apos;deploy&apos;</span><br><span class=\"line\">git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在远程仓库<code>Settings -&gt; Github Pages -&gt; Source</code>设置为<code>gh-pages branch</code>，点击save。</p>\n</li>\n<li>这样就大功告成啦，效果：<a href=\"https://jinglecjy.github.io/technical-docs/\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2></li>\n</ul>\n</li>\n<li>不使用<code>README.md</code>作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？<br>README.md 默认生成index.html为默认首页，不可更改。 </li>\n<li>注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。<code>vuepress</code>比较适合不需要经常修改的静态文档。</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjn4mystn0000hd7okzu1n691","category_id":"cjn4mystt0002hd7o88vl5855","_id":"cjn4mysu5000bhd7o78e3py1v"},{"post_id":"cjn4mysu30009hd7out5o5k7f","category_id":"cjn4mysu30007hd7otz8kykfe","_id":"cjn4mysu7000ehd7ojwqcvjjf"},{"post_id":"cjn4mystr0001hd7ophm3h8vy","category_id":"cjn4mysu30007hd7otz8kykfe","_id":"cjn4mysu8000hhd7oqb6jzs30"},{"post_id":"cjn4mystv0004hd7ox4h9kxmr","category_id":"cjn4mysu30007hd7otz8kykfe","_id":"cjn4mysu9000khd7oz5inv55r"},{"post_id":"cjn4mystw0005hd7ouzdnjrso","category_id":"cjn4mysu30007hd7otz8kykfe","_id":"cjn4mysu9000phd7o21cqfifz"},{"post_id":"cjn4mysty0006hd7ojocessdk","category_id":"cjn4mysu30007hd7otz8kykfe","_id":"cjn4mysua000thd7odw1qoc01"},{"post_id":"cjn4mysu4000ahd7ogsyc7l7n","category_id":"cjn4mysu9000ohd7och21nntb","_id":"cjn4mysub000whd7oc7lm2r6u"}],"PostTag":[{"post_id":"cjn4mystn0000hd7okzu1n691","tag_id":"cjn4mystu0003hd7o5tt0wrup","_id":"cjn4mysu8000ihd7otj2mcwj1"},{"post_id":"cjn4mystn0000hd7okzu1n691","tag_id":"cjn4mysu30008hd7ow77sldl7","_id":"cjn4mysu9000lhd7oodcpdla1"},{"post_id":"cjn4mystn0000hd7okzu1n691","tag_id":"cjn4mysu5000dhd7owgpixyq9","_id":"cjn4mysu9000nhd7o2zoqe73m"},{"post_id":"cjn4mystr0001hd7ophm3h8vy","tag_id":"cjn4mysu8000ghd7otn907vxu","_id":"cjn4mysu9000qhd7oob1bvgzw"},{"post_id":"cjn4mystv0004hd7ox4h9kxmr","tag_id":"cjn4mysu8000ghd7otn907vxu","_id":"cjn4mysua000shd7oalhjunkf"},{"post_id":"cjn4mystw0005hd7ouzdnjrso","tag_id":"cjn4mysu8000ghd7otn907vxu","_id":"cjn4mysub000vhd7o9ec4juwo"},{"post_id":"cjn4mysty0006hd7ojocessdk","tag_id":"cjn4mysu8000ghd7otn907vxu","_id":"cjn4mysuc000yhd7onwgi5wcm"},{"post_id":"cjn4mysu30009hd7out5o5k7f","tag_id":"cjn4mysu8000ghd7otn907vxu","_id":"cjn4mysuc0010hd7ohfczjrsb"},{"post_id":"cjn4mysu4000ahd7ogsyc7l7n","tag_id":"cjn4mysuc000zhd7o1xhzjqe3","_id":"cjn4mysuc0011hd7oiwj3j9wk"}],"Tag":[{"name":"sass","_id":"cjn4mystu0003hd7o5tt0wrup"},{"name":"compass","_id":"cjn4mysu30008hd7ow77sldl7"},{"name":"react","_id":"cjn4mysu5000dhd7owgpixyq9"},{"name":"threejs","_id":"cjn4mysu8000ghd7otn907vxu"},{"name":"小项目","_id":"cjn4mysuc000zhd7o1xhzjqe3"}]}}