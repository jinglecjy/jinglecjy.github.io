{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"source/images/weekly/05/qraround.png","path":"images/weekly/05/qraround.png","modified":0,"renderable":0},{"_id":"source/images/weekly/05/qrearth.png","path":"images/weekly/05/qrearth.png","modified":0,"renderable":0},{"_id":"source/images/weekly/07/draw2playQR.png","path":"images/weekly/07/draw2playQR.png","modified":0,"renderable":0},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"source/images/weekly/01/fire0.gif","path":"images/weekly/01/fire0.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/06/webassembly.png","path":"images/weekly/06/webassembly.png","modified":0,"renderable":0},{"_id":"source/images/weekly/07/draw2play.gif","path":"images/weekly/07/draw2play.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/07/miniprogram.png","path":"images/weekly/07/miniprogram.png","modified":0,"renderable":0},{"_id":"source/images/weekly/01/cssdoodle0.gif","path":"images/weekly/01/cssdoodle0.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/01/fire1.gif","path":"images/weekly/01/fire1.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/02/snapsvg0.gif","path":"images/weekly/02/snapsvg0.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/02/snapsvg1.gif","path":"images/weekly/02/snapsvg1.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/01/cssdoodle1.gif","path":"images/weekly/01/cssdoodle1.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/03/earth.gif","path":"images/weekly/03/earth.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/05/around.gif","path":"images/weekly/05/around.gif","modified":0,"renderable":0},{"_id":"source/images/weekly/05/earth.gif","path":"images/weekly/05/earth.gif","modified":0,"renderable":0}],"Cache":[{"_id":"themes/maupassant/.gitignore","hash":"16945417d10c15c950306794dbb0d970b5a199fe","modified":1551075796043},{"_id":"themes/maupassant/LICENSE","hash":"f0ac2f92770650c9835183f79010c0d307b34acd","modified":1551075796044},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1551075796044},{"_id":"themes/maupassant/README.md","hash":"a3dcfa9b646980ee5811ec03b4c5786618b85ff9","modified":1551075796044},{"_id":"themes/maupassant/_config.yml","hash":"b87d225a7bbbc8906077b7a3825a6db94b55ae07","modified":1551079121842},{"_id":"themes/maupassant/package.json","hash":"f092433469eb87362e831326425a6a5c3c9fea0d","modified":1551075796053},{"_id":"source/_posts/threejs进阶上：动画.md","hash":"c1b396300216a93013cbdc92d67503f9ab591a5a","modified":1551076925539},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1539307197538},{"_id":"source/_posts/threejs基础上：初始化.md","hash":"e76be8c39459f7ff98f8ef2c099a21aab1337256","modified":1551076956045},{"_id":"source/_posts/React前置知识01：SASS和COMPASS.md","hash":"599c3462f6622cfaf4f250a8c623d158b52d4090","modified":1551076966030},{"_id":"source/_posts/threejs基础下：贴图资源加载与光照.md","hash":"4317165a9a16f8fc6237fdcece7fb6c3d546b3c8","modified":1551076942805},{"_id":"source/_posts/threejs进阶下：交互.md","hash":"51257a5a97aa44d4869fdedb59f5776921ebf9e0","modified":1551076916873},{"_id":"source/_posts/threejs问题集锦.md","hash":"aa5561462d231474a463f8e570c9c460cb088238","modified":1551076894213},{"_id":"source/_posts/vuepress搭建.md","hash":"e5d2fc715908f2556b74d9a1c2f9c12d6aec1841","modified":1551076849764},{"_id":"source/_posts/两周一报04（20181005）.md","hash":"52cfecce6329b9e666b4c33a11763366afee8610","modified":1551076730959},{"_id":"source/_posts/两周一报01（20180826）.md","hash":"edb60e8897324c443f0da503b20c02df65e40e73","modified":1551076795097},{"_id":"source/_posts/两周一报02（20180909）.md","hash":"7b4082ed3be5efad2691217c22d301086008942a","modified":1551076767337},{"_id":"source/_posts/两周一报03（20180923）.md","hash":"49314efa51d8c910ea9a4a94c7eb11074486f533","modified":1551076747550},{"_id":"source/_posts/两周一报07（20181116）.md","hash":"b211ee6a10be6ff7eca9cef400ff6354804f4e68","modified":1551076531930},{"_id":"source/_posts/两周一报05（20181021）.md","hash":"b353473072a617031aa54cbf7a8e2a570d00d0e0","modified":1551076719860},{"_id":"source/_posts/两周一报06（20181102）.md","hash":"78e2a435a3a158a2c5aac38449e4fc764f69c620","modified":1551076690823},{"_id":"source/_posts/两周一报08（20181130）.md","hash":"c623d0aa25ac9c9a868780b636e1568021c9444f","modified":1551076514720},{"_id":"source/_posts/两周一报09（20181214）.md","hash":"d5766b9f714dc20c3a59e7a3cbe08c83816754ca","modified":1551076491866},{"_id":"source/_posts/两周一报11（20190111）.md","hash":"5f6bc1cca3f8583fff4216699bb2d288648a20c4","modified":1551076455044},{"_id":"source/_posts/两周一报12（20190125）.md","hash":"4cf23a54ee57d518c45713bac71b3c0f438627d7","modified":1551076437712},{"_id":"source/_posts/两周一报10（20181228）.md","hash":"d838b0a743b221210e7e9fa0cb4aeb2f80b61e36","modified":1551076476030},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1551075796038},{"_id":"source/_posts/两周一报13（20190222）.md","hash":"1898cf91b88d04201cdd6c2892239aff1d94b0cd","modified":1551076417387},{"_id":"source/about/index.md","hash":"04184fd49742b6ae63e1229c2d76de48a07e8fb7","modified":1551078213209},{"_id":"source/_posts/优化动画卡顿：卡顿原因分析及优化方案.md","hash":"2bef408b8b94d15c08d1f32923e53e971bf356fc","modified":1552554770234},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1551075791129},{"_id":"themes/maupassant/.git/config","hash":"037345b11c41abb3dbbbd6e0242ced24979a7097","modified":1551075796040},{"_id":"themes/maupassant/.git/index","hash":"119904b40b6e429518ebc86824c7e5118b50a756","modified":1551078943440},{"_id":"themes/maupassant/.git/packed-refs","hash":"8e0957abce13b70f3a90ea04ab3d2aefabe249ac","modified":1551075796037},{"_id":"themes/maupassant/languages/en.yml","hash":"c3fb5c155560a00889a75882c680afe1197ebf1a","modified":1551075796045},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1551075796045},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1551075796045},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1551075796045},{"_id":"themes/maupassant/languages/ru.yml","hash":"2476a631f4d3c668de04af85a6c2c97ba2a57e96","modified":1551075796046},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1551075796045},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"bf3ab970f2ab3f29ddeb9f59bf98163be635e284","modified":1551075796046},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"710b204e637c18b86ac7c681f7d1cf8dfeddf4bb","modified":1551075796046},{"_id":"themes/maupassant/layout/archive.pug","hash":"2fe2cff144c9b7b509b7b6cb1b3acba27aa1d132","modified":1551075796050},{"_id":"themes/maupassant/layout/base.pug","hash":"a4e32bcb580b76af9ad0582d9d3f0107e34509ed","modified":1551075796051},{"_id":"themes/maupassant/layout/base-without-sidebar.pug","hash":"16c4d1079450f801b5ac079d3cc101856d8f387c","modified":1551075796051},{"_id":"themes/maupassant/layout/index.pug","hash":"0435a4e5f5c6976e05b3079d335453c246f5ba6e","modified":1551075796052},{"_id":"themes/maupassant/layout/single-column.pug","hash":"0593f261dc208bb0b5c4232eb41eff597a291bd9","modified":1551075796052},{"_id":"themes/maupassant/layout/page.pug","hash":"8cfd307b13cad8be34a1e75c4566f96c1722e08e","modified":1551075796052},{"_id":"themes/maupassant/layout/timeline.pug","hash":"84fbfc92ccdf291b491140d89557553141a5d3f9","modified":1551075796053},{"_id":"themes/maupassant/layout/post.pug","hash":"f4d17b1b2a590cc076e80d912591648f9e99aeaf","modified":1551075796052},{"_id":"source/images/weekly/.DS_Store","hash":"3835df9829c7bf0ed2c851fab8eb33358eba46d6","modified":1549952823762},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1551075791130},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1551075791131},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1551075791133},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1551075791133},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1551075791130},{"_id":"themes/maupassant/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1551075791132},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1551075791131},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1551075791134},{"_id":"themes/maupassant/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1551075791129},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1551075791133},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1551075791132},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1551075791134},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"aef7748d01ea213f5d71e9cdba2bffaab66af56c","modified":1551075796039},{"_id":"themes/maupassant/layout/_partial/footer.pug","hash":"650781b5bc8c632658ad6880ba663b1e3bfb5798","modified":1551075796047},{"_id":"themes/maupassant/layout/_partial/comments.pug","hash":"ff14baa25f6db34dedfb5e029c25687a335ad430","modified":1551075796047},{"_id":"themes/maupassant/layout/_partial/after_footer.pug","hash":"06969aefa52218aa2320b7d735f751df4a7b5e1d","modified":1551075796047},{"_id":"themes/maupassant/layout/_partial/head.pug","hash":"025c34e4e89d99b866fd5af2924e60e9f63e386b","modified":1551075796047},{"_id":"themes/maupassant/layout/_partial/helpers.pug","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1551075796048},{"_id":"themes/maupassant/layout/_partial/mathjax2.pug","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1551075796048},{"_id":"themes/maupassant/layout/_partial/mathjax.pug","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1551075796048},{"_id":"themes/maupassant/layout/_partial/paginator.pug","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1551075796048},{"_id":"themes/maupassant/layout/_partial/totop.pug","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1551075796049},{"_id":"themes/maupassant/layout/_partial/post_nav.pug","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1551075796048},{"_id":"themes/maupassant/layout/_partial/wordcount.pug","hash":"004c8a3edc19d428179b83a0f97eae3c1a6d3cfa","modified":1551075796049},{"_id":"themes/maupassant/layout/_widget/category.pug","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1551075796049},{"_id":"themes/maupassant/layout/_widget/links.pug","hash":"c45aa7ec00158579e58f1f8dfd890447bb5e5e54","modified":1551075796049},{"_id":"themes/maupassant/layout/_widget/recent_comments.pug","hash":"4102d446f13b02ff617f055c2a8f726bca12744a","modified":1551075796049},{"_id":"themes/maupassant/layout/_partial/tag.pug","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1551075796048},{"_id":"themes/maupassant/layout/_widget/recent_posts.pug","hash":"19431336d724d2118e46da43683bce9063176541","modified":1551075796049},{"_id":"themes/maupassant/layout/_widget/search.pug","hash":"6e8e4123cca38840c4607c1a056205972b82bb7b","modified":1551075796050},{"_id":"themes/maupassant/layout/_widget/tag.pug","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1551075796050},{"_id":"themes/maupassant/source/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1551075796054},{"_id":"themes/maupassant/source/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1551075796053},{"_id":"themes/maupassant/source/donate/index.html","hash":"04fb043ed312f6eaf8435440739febac2d465de0","modified":1551075796055},{"_id":"themes/maupassant/source/css/style.scss","hash":"b44da192f0875e144bf7990a99b42e31e986e099","modified":1551075796054},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1551075796055},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1551075796055},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1551075796056},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1551075796056},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1551075796056},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1551075796057},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1551075796057},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1551075796058},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1551075796057},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1551075796058},{"_id":"themes/maupassant/source/js/donate.js","hash":"780beaaf44b1e6c057752bdbc085b1048937e5e7","modified":1551075796058},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1551075796059},{"_id":"themes/maupassant/source/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1551075796061},{"_id":"themes/maupassant/source/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1551075796060},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1551075796061},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1551075796061},{"_id":"source/images/weekly/05/qraround.png","hash":"b6117e5324596130ae0948e4fc3e932ec63fc20b","modified":1548731818351},{"_id":"source/images/weekly/05/qrearth.png","hash":"69473599e80e23d00fd1c2a2a9a8ff0c6b3b3d96","modified":1548731779532},{"_id":"source/images/weekly/07/draw2playQR.png","hash":"733655fd4a470bb7896faaf14aeb7c62778cfc23","modified":1549952740370},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"491663a8794038aeea0f679f365d2b616d19d619","modified":1551075796039},{"_id":"themes/maupassant/.git/objects/pack/pack-0c4d105750b32e84c2a319e34af4bb0c5aca9201.idx","hash":"40e991eeaa541aeffaa7f793bb4ca74f541e2973","modified":1551075796025},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1551075796060},{"_id":"source/images/weekly/01/fire0.gif","hash":"31c59b32d08069c0d08dddb5708a5fbb7c734b2e","modified":1548669905529},{"_id":"source/images/weekly/06/webassembly.png","hash":"8fb993e867e70e819f7d9b92cf0c1c32ba7e8b1c","modified":1549942057297},{"_id":"source/images/weekly/07/draw2play.gif","hash":"80c8e1913504dc56935001aaefb6eee568f4a286","modified":1549952753888},{"_id":"source/images/weekly/07/miniprogram.png","hash":"7e1e57a3e01f19b11caea1c2dc35f25556b96da7","modified":1549952605010},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1551075796038},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"aef7748d01ea213f5d71e9cdba2bffaab66af56c","modified":1551075796039},{"_id":"source/images/weekly/01/cssdoodle0.gif","hash":"fa820b133d3dae8006c407037afdc793480747ed","modified":1548669877186},{"_id":"source/images/weekly/01/fire1.gif","hash":"23ce7272dea115393d4ae7ee0d2d86d123b1e2a8","modified":1548669918111},{"_id":"source/images/weekly/02/snapsvg0.gif","hash":"2ae1ac8769528728e47706dea0d93bfba91e0d8e","modified":1548670705313},{"_id":"source/images/weekly/02/snapsvg1.gif","hash":"0d814410965cbbd5a9d230f48ecfed32b0c671df","modified":1548670720435},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"aef7748d01ea213f5d71e9cdba2bffaab66af56c","modified":1551075796038},{"_id":"source/images/weekly/01/cssdoodle1.gif","hash":"2ba24d1c587de3c6beb90b78cd5cea462f21ece6","modified":1548669894015},{"_id":"themes/maupassant/.git/objects/pack/pack-0c4d105750b32e84c2a319e34af4bb0c5aca9201.pack","hash":"54e444fd73c5f5c7f8b533cc6e332c6633bcd6a5","modified":1551075796024},{"_id":"source/images/weekly/03/earth.gif","hash":"36807885cf8e39398a2dec7136c01006b250ef89","modified":1548727075100},{"_id":"source/images/weekly/05/around.gif","hash":"d248a545931f421ce971964e87a39d8c47f167f8","modified":1548731828767},{"_id":"source/images/weekly/05/earth.gif","hash":"607b2a16624069c9f595d74173bc7765c432d637","modified":1548731796136},{"_id":"public/search.xml","hash":"a0d198978ccf6a267bf8514d2101d7444da6a9b7","modified":1552554777826},{"_id":"public/about/index.html","hash":"77dfa1c7ab7aff1cb4861bd7fb68e3515998ce6e","modified":1552554544173},{"_id":"public/2019/01/25/两周一报12（20190125）/index.html","hash":"d6f4a490ad54435aa8892b62847e0202ee67c9ae","modified":1552554544174},{"_id":"public/2019/01/11/两周一报11（20190111）/index.html","hash":"1a24fb18c68549ca6d096594b136245b77daf2c1","modified":1552554544174},{"_id":"public/2018/12/28/两周一报10（20181228）/index.html","hash":"5835841fd5549d2dcf13f51d993e588bcd3663ce","modified":1552554544174},{"_id":"public/2018/12/14/两周一报09（20181214）/index.html","hash":"491c93bfa35f3de31d9b1ae84012b6bebc52d6b8","modified":1552554544174},{"_id":"public/2018/11/30/两周一报08（20181130）/index.html","hash":"66620d63950787a234a7753103ca760da6428338","modified":1552554544175},{"_id":"public/2018/11/16/两周一报07（20181116）/index.html","hash":"eb063ebf4e5c63a38ae56ee3f36d3bd695b365a1","modified":1552554544175},{"_id":"public/2018/11/02/两周一报06（20181102）/index.html","hash":"f310311844291acad0c82488c84c299d21b5809d","modified":1552554544175},{"_id":"public/2018/10/21/两周一报05（20181021）/index.html","hash":"44c1509ffd0455a94c62a9af696cd077f390e380","modified":1552554544175},{"_id":"public/2018/10/11/threejs问题集锦/index.html","hash":"0c5268262a4f0f49d08c33bb2eb9d91eb815af8d","modified":1552554544175},{"_id":"public/2018/10/11/threejs进阶上：动画/index.html","hash":"d9dabc38f22752aadb8ae3a445ecfbaa98b27613","modified":1552554544175},{"_id":"public/2018/10/05/两周一报04（20181005）/index.html","hash":"4c0bbc4013417d20f387ca6928f25bd0a866232d","modified":1552554544175},{"_id":"public/2018/09/23/两周一报03（20180923）/index.html","hash":"acf7a526a51f8b8f17c5168c8fd11b82b98586ab","modified":1552554544175},{"_id":"public/2018/09/09/两周一报02（20180909）/index.html","hash":"db95b8a1377c2cd994064f42b830c1eb05cd0ecb","modified":1552554544175},{"_id":"public/2018/08/26/两周一报01（20180826）/index.html","hash":"f32a18ad6691686b1e63c5dd466b09acafd78ec6","modified":1552554544175},{"_id":"public/categories/lesson/index.html","hash":"8967a6f24436553390bded22ec98a3e697ff4c46","modified":1552554544175},{"_id":"public/categories/notes/index.html","hash":"d3bf2eabaf64eda361850c59bf8c4dca16ee6a25","modified":1552554544175},{"_id":"public/categories/tools/index.html","hash":"65c4e53fb134515eb0b1ae2e2466044ae4736f27","modified":1552554544175},{"_id":"public/categories/weekly/index.html","hash":"603484436316009a07fe690f89fa511f8e65dcef","modified":1552554544175},{"_id":"public/categories/weekly/page/2/index.html","hash":"5cc3ac46409c19270b668a00423ee95d3ccbc26f","modified":1552554544175},{"_id":"public/archives/index.html","hash":"b073753045c0f70856f9b186570bb3b60859ca1d","modified":1552554544175},{"_id":"public/archives/page/2/index.html","hash":"ad146c49c0d8279d1155d7e08ffe081d6b9f9dd7","modified":1552554544175},{"_id":"public/archives/2018/index.html","hash":"67f55faab16427bd3beee4349735ac57e90ec40c","modified":1552554544176},{"_id":"public/archives/2018/page/2/index.html","hash":"51a9b9a04c63f8242206b0c7e5b6c01fd01bfb5c","modified":1552554544176},{"_id":"public/archives/2018/08/index.html","hash":"3c02d63a4966e8789464216155bc7d04748e864f","modified":1552554544176},{"_id":"public/archives/2018/09/index.html","hash":"d27841561cb4323de531d6db047e181da2d086b8","modified":1552554544176},{"_id":"public/archives/2018/11/index.html","hash":"acb16d208811df7b92626b23fe2234f796e29aba","modified":1552554544176},{"_id":"public/archives/2018/10/index.html","hash":"ab46c8c5914f3edab5b59e3dbe11f43e755d41ac","modified":1552554544176},{"_id":"public/archives/2018/12/index.html","hash":"95d40cc202c2c98617afaacfe60d2914e463f231","modified":1552554544176},{"_id":"public/archives/2019/index.html","hash":"abc80bdc683fc94dd7300b66563c836dea607d04","modified":1552554544176},{"_id":"public/archives/2019/01/index.html","hash":"037063550e8c5cfcdea34a64e042291b5c6b8f88","modified":1552554544176},{"_id":"public/archives/2019/02/index.html","hash":"ee1a93e921e6f90ebe7560adc0efae05cfc5ec69","modified":1552554544176},{"_id":"public/index.html","hash":"fe8ff346567e9d1ac9401a0832d5326508805efa","modified":1552554544176},{"_id":"public/page/2/index.html","hash":"d5aaedc16b0b592ba826dde9afd64c8d5d783878","modified":1552554544176},{"_id":"public/tags/threejs/index.html","hash":"454fcfdcd962efd0a0363ca3e54b8987c9fd2efe","modified":1552554544176},{"_id":"public/tags/sass/index.html","hash":"f5807d099c1b067d93ebb51363a6def6aa6879b1","modified":1552554544176},{"_id":"public/tags/compass/index.html","hash":"76dfbb3aa6200fbd1c09ceadd550a971572a987a","modified":1552554544176},{"_id":"public/tags/react/index.html","hash":"d9543b0507867f6a4ffa5fb4a19c1d201a569038","modified":1552554544176},{"_id":"public/tags/小项目/index.html","hash":"fb06e699cab7d0aa2390bd25c479f0f0b782b705","modified":1552554544176},{"_id":"public/tags/周报/index.html","hash":"be392fba4ff87f56219050e88bdfa74e2f52a8ec","modified":1552554544176},{"_id":"public/tags/周报/page/2/index.html","hash":"8e8610435185a9a24dd3afa8c54aa92d2eeb1f62","modified":1552554544177},{"_id":"public/2019/02/22/两周一报13（20190222）/index.html","hash":"83166024149c31770d54a2b2ca21b0b31124ef03","modified":1552554544177},{"_id":"public/2018/10/11/threejs进阶下：交互/index.html","hash":"55962d4451900770e03b0ca97ec82d76bd5b29d6","modified":1552554544177},{"_id":"public/2018/10/11/threejs基础下：贴图资源加载与光照/index.html","hash":"77b466182259ff3ff1b17c2c69f76adec0774beb","modified":1552554544177},{"_id":"public/2018/10/11/threejs基础上：初始化/index.html","hash":"21d06ad78808148c68ff3bbc6b44ae9d035514ba","modified":1552554544177},{"_id":"public/2018/08/10/React前置知识01：SASS和COMPASS/index.html","hash":"7cc4ea8c4922e3bb86e2c5ead4d238367bc6e505","modified":1552554544177},{"_id":"public/2018/08/10/vuepress搭建/index.html","hash":"1d8bde05fc142b727f8bf45c4ea42c998fba045f","modified":1552554544177},{"_id":"public/categories/intensive-study/index.html","hash":"13e67d0a97c3cfeb17729ea85188035ff622bd41","modified":1552554544181},{"_id":"public/archives/page/3/index.html","hash":"71c2be08c3853eaf3dd993ce145d5236a1222fef","modified":1552554544181},{"_id":"public/archives/2019/03/index.html","hash":"0342820eaaeeae00610df9d2982a5c980d697d40","modified":1552554544182},{"_id":"public/page/3/index.html","hash":"bde101b2fbb9d119ae42f11f0f9ee579bbb73953","modified":1552554544182},{"_id":"public/tags/日常研究/index.html","hash":"c4a97d2018578978aed7c0459a03b1e0a73c6eac","modified":1552554544182},{"_id":"public/2019/03/14/优化动画卡顿：卡顿原因分析及优化方案/index.html","hash":"65ea5b574e342852a4ca3af68e558cb7656c2b08","modified":1552554777843},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1552554544186},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1552554544186},{"_id":"public/img/alipay.svg","hash":"46cc0552a9f6d700d618db3fcad25e1b8e697e36","modified":1552554544186},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1552554544186},{"_id":"public/img/bitcoin.svg","hash":"635f7cca5e675d192be2717788175c7a2146013a","modified":1552554544186},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1552554544186},{"_id":"public/img/paypal.svg","hash":"92f3bc495f20a0190d3041be03345c46d6238c25","modified":1552554544186},{"_id":"public/img/wechat.svg","hash":"330496ad42446a29f37a2b97fc388ebd77a8cb9f","modified":1552554544186},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1552554544186},{"_id":"public/images/weekly/05/qraround.png","hash":"b6117e5324596130ae0948e4fc3e932ec63fc20b","modified":1552554544186},{"_id":"public/images/weekly/05/qrearth.png","hash":"69473599e80e23d00fd1c2a2a9a8ff0c6b3b3d96","modified":1552554544188},{"_id":"public/images/weekly/07/draw2playQR.png","hash":"733655fd4a470bb7896faaf14aeb7c62778cfc23","modified":1552554544188},{"_id":"public/images/weekly/01/fire0.gif","hash":"31c59b32d08069c0d08dddb5708a5fbb7c734b2e","modified":1552554544231},{"_id":"public/images/weekly/07/miniprogram.png","hash":"7e1e57a3e01f19b11caea1c2dc35f25556b96da7","modified":1552554544232},{"_id":"public/images/weekly/06/webassembly.png","hash":"8fb993e867e70e819f7d9b92cf0c1c32ba7e8b1c","modified":1552554544232},{"_id":"public/images/weekly/07/draw2play.gif","hash":"80c8e1913504dc56935001aaefb6eee568f4a286","modified":1552554544232},{"_id":"public/css/donate.css","hash":"f019876946aeb80e567ece250d54c1327c794583","modified":1552554544238},{"_id":"public/donate/index.html","hash":"04fb043ed312f6eaf8435440739febac2d465de0","modified":1552554544238},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1552554544238},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1552554544238},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1552554544238},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1552554544238},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1552554544238},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1552554544239},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1552554544239},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1552554544239},{"_id":"public/css/style.css","hash":"773ad46efbd957c22bbbc2900521908f81c04d7a","modified":1552554544239},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1552554544239},{"_id":"public/images/weekly/01/cssdoodle0.gif","hash":"fa820b133d3dae8006c407037afdc793480747ed","modified":1552554544243},{"_id":"public/images/weekly/01/fire1.gif","hash":"23ce7272dea115393d4ae7ee0d2d86d123b1e2a8","modified":1552554544243},{"_id":"public/images/weekly/02/snapsvg0.gif","hash":"2ae1ac8769528728e47706dea0d93bfba91e0d8e","modified":1552554544243},{"_id":"public/images/weekly/02/snapsvg1.gif","hash":"0d814410965cbbd5a9d230f48ecfed32b0c671df","modified":1552554544243},{"_id":"public/images/weekly/01/cssdoodle1.gif","hash":"2ba24d1c587de3c6beb90b78cd5cea462f21ece6","modified":1552554544250},{"_id":"public/images/weekly/03/earth.gif","hash":"36807885cf8e39398a2dec7136c01006b250ef89","modified":1552554544279},{"_id":"public/images/weekly/05/around.gif","hash":"d248a545931f421ce971964e87a39d8c47f167f8","modified":1552554544284},{"_id":"public/images/weekly/05/earth.gif","hash":"607b2a16624069c9f595d74173bc7765c432d637","modified":1552554544302}],"Category":[{"name":"lesson","_id":"cjt8ew04v0003yn7ouu0elrxk"},{"name":"notes","_id":"cjt8ew05e000myn7ojz1yoea8"},{"name":"tools","_id":"cjt8ew05h000uyn7ol6vfdnq2"},{"name":"weekly","_id":"cjt8ew05j000zyn7ocbcjicyb"},{"name":"intensive study","_id":"cjt8ew05x0022yn7oq5l3u1ls"}],"Data":[],"Page":[{"title":"关于","comments":0,"_content":"\nEmail: 2036726438@qq.com\nGithub: https://github.com/jinglecjy\n","source":"about/index.md","raw":"---\ntitle: 关于\ncomments: false\n---\n\nEmail: 2036726438@qq.com\nGithub: https://github.com/jinglecjy\n","date":"2019-02-25T07:03:33.209Z","updated":"2019-02-25T07:03:33.209Z","path":"about/index.html","layout":"page","_id":"cjt8ew04r0001yn7onq9mpwj3","content":"<p>Email: <a href=\"mailto:2036726438@qq.com\" target=\"_blank\" rel=\"noopener\">2036726438@qq.com</a><br>Github: <a href=\"https://github.com/jinglecjy\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Email: <a href=\"mailto:2036726438@qq.com\" target=\"_blank\" rel=\"noopener\">2036726438@qq.com</a><br>Github: <a href=\"https://github.com/jinglecjy\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy</a></p>\n"}],"Post":[{"title":"threejs进阶上：动画","date":"2018-10-11T13:16:18.000Z","toc":true,"comments":1,"description":"threejs动画","_content":"\n### 简单动画\n对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用`requestAnimationFrame`来进行重绘，示例：   \n```JavaScript\nfunction render() {\n    earth.rotation.y += 0.005;\n    cloud.rotation.y += 0.003;\n\n    renderer.render(scene, camera);\n    var id = requestAnimationFrame(render);\n}\nrender();\n```\n\n`requestAnimationFrame`方法设置的动画，停止的方式如`cancelRequestFrame(id)`。\n通过`requestAnimationFrame`实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库[tween.js](http://www.createjs.cc/tweenjs/)来实现。\n\n\n### 模型骨骼动画\n*注意：复杂的骨骼动画容易出问题而且定位较难，建议**谨慎使用**。*\nthree.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是`glTF`格式的模型数据，支持较好。   \n使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。\n\n### 性能插件stats\n\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。   \n```JavaScript\n// 1. 引入插件\n<script src=\"../lib/stats.min.js\"></script>\n\n// 2. 实例化组件并添加到dom中\nvar stats = new Stats();\ncontainer.appendChild(stats.dom);\n\n// 3. 在requestAnimationFrame()函数调用里面更新stats\nfunction render() {\n    // ...\n    stats.update();\n    requestAnimationFrame(render);\n}\nrender();\n```","source":"_posts/threejs进阶上：动画.md","raw":"---\ntitle: threejs进阶上：动画\ndate: 2018-10-11 21:16:18\ntags: threejs\ncategory: lesson\ntoc: true\ncomments: true\ndescription: threejs动画\n---\n\n### 简单动画\n对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用`requestAnimationFrame`来进行重绘，示例：   \n```JavaScript\nfunction render() {\n    earth.rotation.y += 0.005;\n    cloud.rotation.y += 0.003;\n\n    renderer.render(scene, camera);\n    var id = requestAnimationFrame(render);\n}\nrender();\n```\n\n`requestAnimationFrame`方法设置的动画，停止的方式如`cancelRequestFrame(id)`。\n通过`requestAnimationFrame`实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库[tween.js](http://www.createjs.cc/tweenjs/)来实现。\n\n\n### 模型骨骼动画\n*注意：复杂的骨骼动画容易出问题而且定位较难，建议**谨慎使用**。*\nthree.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是`glTF`格式的模型数据，支持较好。   \n使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。\n\n### 性能插件stats\n\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。   \n```JavaScript\n// 1. 引入插件\n<script src=\"../lib/stats.min.js\"></script>\n\n// 2. 实例化组件并添加到dom中\nvar stats = new Stats();\ncontainer.appendChild(stats.dom);\n\n// 3. 在requestAnimationFrame()函数调用里面更新stats\nfunction render() {\n    // ...\n    stats.update();\n    requestAnimationFrame(render);\n}\nrender();\n```","slug":"threejs进阶上：动画","published":1,"updated":"2019-02-25T06:42:05.539Z","layout":"post","photos":[],"link":"","_id":"cjt8ew04o0000yn7ope7t03gv","content":"<h3 id=\"简单动画\"><a href=\"#简单动画\" class=\"headerlink\" title=\"简单动画\"></a>简单动画</h3><p>对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用<code>requestAnimationFrame</code>来进行重绘，示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    earth.rotation.y += <span class=\"number\">0.005</span>;</span><br><span class=\"line\">    cloud.rotation.y += <span class=\"number\">0.003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderer.render(scene, camera);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n<p><code>requestAnimationFrame</code>方法设置的动画，停止的方式如<code>cancelRequestFrame(id)</code>。<br>通过<code>requestAnimationFrame</code>实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库<a href=\"http://www.createjs.cc/tweenjs/\" target=\"_blank\" rel=\"noopener\">tween.js</a>来实现。</p>\n<h3 id=\"模型骨骼动画\"><a href=\"#模型骨骼动画\" class=\"headerlink\" title=\"模型骨骼动画\"></a>模型骨骼动画</h3><p><em>注意：复杂的骨骼动画容易出问题而且定位较难，建议<strong>谨慎使用</strong>。</em><br>three.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是<code>glTF</code>格式的模型数据，支持较好。<br>使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。</p>\n<h3 id=\"性能插件stats\"><a href=\"#性能插件stats\" class=\"headerlink\" title=\"性能插件stats\"></a>性能插件stats</h3><p>\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 引入插件</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/stats.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实例化组件并添加到dom中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stats = <span class=\"keyword\">new</span> Stats();</span><br><span class=\"line\">container.appendChild(stats.dom);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 在requestAnimationFrame()函数调用里面更新stats</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    stats.update();</span><br><span class=\"line\">    requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单动画\"><a href=\"#简单动画\" class=\"headerlink\" title=\"简单动画\"></a>简单动画</h3><p>对于一些简单的动画，比如\b旋转/位置变换等等，可以直接使用<code>requestAnimationFrame</code>来进行重绘，示例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    earth.rotation.y += <span class=\"number\">0.005</span>;</span><br><span class=\"line\">    cloud.rotation.y += <span class=\"number\">0.003</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    renderer.render(scene, camera);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> id = requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n<p><code>requestAnimationFrame</code>方法设置的动画，停止的方式如<code>cancelRequestFrame(id)</code>。<br>通过<code>requestAnimationFrame</code>实现的动画是匀速的，如果希望有缓动效果，可以结合补间动画库<a href=\"http://www.createjs.cc/tweenjs/\" target=\"_blank\" rel=\"noopener\">tween.js</a>来实现。</p>\n<h3 id=\"模型骨骼动画\"><a href=\"#模型骨骼动画\" class=\"headerlink\" title=\"模型骨骼动画\"></a>模型骨骼动画</h3><p><em>注意：复杂的骨骼动画容易出问题而且定位较难，建议<strong>谨慎使用</strong>。</em><br>three.js\b提供了各种各样的模型加载器，但是这些加载器的完善程度有待商榷，容易出现问题。\b官方目前推荐使用的是<code>glTF</code>格式的模型数据，支持较好。<br>使用官方示例的模型测试没什么问题，实际应用估计问题还比较多，考虑到使用模型导入动画的资源大小问题，实际应用可能比较困难，待之后使用到再进行补充。</p>\n<h3 id=\"性能插件stats\"><a href=\"#性能插件stats\" class=\"headerlink\" title=\"性能插件stats\"></a>性能插件stats</h3><p>\bThree.js\b辅助库，显示性能帧数，每次刷新所用时间，占用内存。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 引入插件</span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"../lib/stats.min.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 实例化组件并添加到dom中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stats = <span class=\"keyword\">new</span> Stats();</span><br><span class=\"line\">container.appendChild(stats.dom);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 在requestAnimationFrame()函数调用里面更新stats</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">render</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    stats.update();</span><br><span class=\"line\">    requestAnimationFrame(render);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">render();</span><br></pre></td></tr></table></figure></p>\n"},{"title":"threejs基础上：初始化","date":"2018-10-11T13:15:23.000Z","toc":true,"comments":1,"description":"threejs入门第一步","_content":"\nThree.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   \n\n\n\nThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   \n\n\n\n***\n\n\n\n### 初始化对象\n\n#### 1、初始化场景scene\n\n场景相当于是一个容器来容纳所有的物体，创建场景如下：   \n\n`var scene = new THREE.Scene();`   \n\n设置背景scene.background，可以为纯色，也可以为图片资源：\n\n`scene.background = new THREE.Color(0xffffff)`\n\n\n\n#### 2、相机camera\n\nTHREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。\n\n`var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);`\n\n\n| 参数 | 类型 | 默认值 | 说明|\n| --- | --- | --- | --- |\n| fov |number | 50 | 视野角度 |\n| aspect | number | 1 | 实际窗口的宽高比 |\n| near | number | 0.1 | 相机到近平面的距离 |\n| far | number | 2000 | 相机到远平面的距离 |\n\n\n#### 3、初始化渲染器renderer\n创建一个WebGL渲染器，可以通过插件`Detector.js`检测canvas/webgl兼容性，并在页面添加不兼容信息。   \n```JavaScript\nvar renderer = null;\nif(Detector.webgl)\n    renderer = new THREE.WebGLRenderer({antialias: true})\nelse if(Detector.canvas)\n    renderer = new THREE.CanvasRenderer()      \nelse \n    console.log('不兼容')  \n```\n   \nantialias属性开启用于抗锯齿。初始化渲染器有一些[其他参数](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29)，一般不需要设置使用默认值即可。   \n\n      \n##### setSize(width, height, updateStyle)\n\n调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。\n\n##### setViewport(x, y, width, height)\n\n设置视口，从(x, y)到(x+width, y+height)，***注意：**此处的(x, y)是该区域的左下角*\n\n##### renderer.domElement\n\n渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   \n\n`document.body.appendChild(renderer.domElement)`;   \n\n##### setPixelRatio(value)\n\n设置设备像素比，用于HiDPI设备防止模糊输出canvas。\n\n`renderer.setPixelRatio(window.devicePixelRatio)`\n\n\n\n到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~\n\n\n\n***\n\n\n\n### 展示一个球体\n\n#### 1. 创建物体\n\n##### Mesh对象\n\n可以通过类似以下方式创建：   \n```JavaScript\nvar geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */\nvar meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */\nvar earth = new THREE.Mesh(geometry, meterial); \n```\n\n一个普通的物体对象的构成需要两个参数。\n- **Geometry**：在threejs中有两种几何体（基本几何体和buffer几何体）。   \n***基本几何体*** 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；   \n***buffer几何体*** 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。   \n不同的集合\n- **Meterial**：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   \n\n| 材质 | \b描述 |\n| --- | --- |\n| \b\bMaterial | \b材料基类 |\n| MeshBasicMaterial | 基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果 |\n| MeshDepthMaterial | 渲染成简单的平面多边形，不考虑光照的影响 |\n| MeshNormalMaterial | 计算法向量颜色的材质 |\n| MeshLambertMaterial | 对光源做出反应，可用于创建暗淡的材质 |\n| MeshPhongMaterial | 对光源做出反应，可用于创建光亮的材质 |\n| MeshFaceMaterial | 为几何体的每一面指定材质，更像是一种材质容器 |\n| THREE.SceneUtil.createMultiMaterialObject | 同时应用多种材质 |\n| ShaderMaterial | 自己创建着色程序，需要通过GLSL语言 |\n| LineBasicMaterial | 只能应用于THREE.Line |\n| LineDashedMaterial | 只能应用于THREE.Line |\n\n\n\n 附：Meterial的[所有通用属性](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29)，其中需要注意的有：   \n\n- overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好\n\n\n\n#### 2. 添加到场景\n\n将物体添加到场景中：   \n\n`scene.add(earth);`\n\n注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。\n\n`camera.position.z = 50;`\n\n#### 3. 渲染页面\n\n`renderer.render(scene, camera);`   \n\n这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    \n\n***\n\n\n### \\**附表：对象的通用属性/函数*\n以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。\n\n| 属性/函数 | \b描述 |\n| --- | --- |\n| \bposition | \b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象 |\n| rotation | 对象的局部旋转，单位为弧度 |\n| scale | 控制对象的缩放 |\n| up | 空间向上的方向，缺省是THREE.Vector3(0, 1, 0) |\n| translateX/ranslateY/ranslateZ(distance) | \b沿X/Y/Z轴平移对象 |\n| rotateX/rotateY/rotateZ(rad) | \b沿X/Y/Z轴平移对象 |\n| lookAt(vector) | 一个世界向量观察点，用于旋转模型以面对观察点 |\n| add(object, ...) | 添加object为该对象的子对象 |\n| remove(object, ...) | 删除object子对象 |\n| clone(recursive) | 克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆 |\n\n以上属性可以通过`obj.[attr].x/obj.[attr].y/obj.[attr].z`来设置，或者是一次性设置3个值`obj.[attr].set(x, y, z)` ","source":"_posts/threejs基础上：初始化.md","raw":"---\ntitle: threejs基础上：初始化\ndate: 2018-10-11 21:15:23\ntags: threejs\ncategory: lesson\ntoc: true\ncomments: true\ndescription: threejs入门第一步\n---\n\nThree.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   \n\n\n\nThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   \n\n\n\n***\n\n\n\n### 初始化对象\n\n#### 1、初始化场景scene\n\n场景相当于是一个容器来容纳所有的物体，创建场景如下：   \n\n`var scene = new THREE.Scene();`   \n\n设置背景scene.background，可以为纯色，也可以为图片资源：\n\n`scene.background = new THREE.Color(0xffffff)`\n\n\n\n#### 2、相机camera\n\nTHREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。\n\n`var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);`\n\n\n| 参数 | 类型 | 默认值 | 说明|\n| --- | --- | --- | --- |\n| fov |number | 50 | 视野角度 |\n| aspect | number | 1 | 实际窗口的宽高比 |\n| near | number | 0.1 | 相机到近平面的距离 |\n| far | number | 2000 | 相机到远平面的距离 |\n\n\n#### 3、初始化渲染器renderer\n创建一个WebGL渲染器，可以通过插件`Detector.js`检测canvas/webgl兼容性，并在页面添加不兼容信息。   \n```JavaScript\nvar renderer = null;\nif(Detector.webgl)\n    renderer = new THREE.WebGLRenderer({antialias: true})\nelse if(Detector.canvas)\n    renderer = new THREE.CanvasRenderer()      \nelse \n    console.log('不兼容')  \n```\n   \nantialias属性开启用于抗锯齿。初始化渲染器有一些[其他参数](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29)，一般不需要设置使用默认值即可。   \n\n      \n##### setSize(width, height, updateStyle)\n\n调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。\n\n##### setViewport(x, y, width, height)\n\n设置视口，从(x, y)到(x+width, y+height)，***注意：**此处的(x, y)是该区域的左下角*\n\n##### renderer.domElement\n\n渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   \n\n`document.body.appendChild(renderer.domElement)`;   \n\n##### setPixelRatio(value)\n\n设置设备像素比，用于HiDPI设备防止模糊输出canvas。\n\n`renderer.setPixelRatio(window.devicePixelRatio)`\n\n\n\n到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~\n\n\n\n***\n\n\n\n### 展示一个球体\n\n#### 1. 创建物体\n\n##### Mesh对象\n\n可以通过类似以下方式创建：   \n```JavaScript\nvar geometry = new THREE.SphereGeometry(15, 10, 10); /* 几何模型，用于定义结构 */\nvar meterial = new THREE.MeshNormalMeterial(); /* 材质，用于定义外观 */\nvar earth = new THREE.Mesh(geometry, meterial); \n```\n\n一个普通的物体对象的构成需要两个参数。\n- **Geometry**：在threejs中有两种几何体（基本几何体和buffer几何体）。   \n***基本几何体*** 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；   \n***buffer几何体*** 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。   \n不同的集合\n- **Meterial**：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   \n\n| 材质 | \b描述 |\n| --- | --- |\n| \b\bMaterial | \b材料基类 |\n| MeshBasicMaterial | 基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果 |\n| MeshDepthMaterial | 渲染成简单的平面多边形，不考虑光照的影响 |\n| MeshNormalMaterial | 计算法向量颜色的材质 |\n| MeshLambertMaterial | 对光源做出反应，可用于创建暗淡的材质 |\n| MeshPhongMaterial | 对光源做出反应，可用于创建光亮的材质 |\n| MeshFaceMaterial | 为几何体的每一面指定材质，更像是一种材质容器 |\n| THREE.SceneUtil.createMultiMaterialObject | 同时应用多种材质 |\n| ShaderMaterial | 自己创建着色程序，需要通过GLSL语言 |\n| LineBasicMaterial | 只能应用于THREE.Line |\n| LineDashedMaterial | 只能应用于THREE.Line |\n\n\n\n 附：Meterial的[所有通用属性](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29)，其中需要注意的有：   \n\n- overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好\n\n\n\n#### 2. 添加到场景\n\n将物体添加到场景中：   \n\n`scene.add(earth);`\n\n注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。\n\n`camera.position.z = 50;`\n\n#### 3. 渲染页面\n\n`renderer.render(scene, camera);`   \n\n这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    \n\n***\n\n\n### \\**附表：对象的通用属性/函数*\n以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。\n\n| 属性/函数 | \b描述 |\n| --- | --- |\n| \bposition | \b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象 |\n| rotation | 对象的局部旋转，单位为弧度 |\n| scale | 控制对象的缩放 |\n| up | 空间向上的方向，缺省是THREE.Vector3(0, 1, 0) |\n| translateX/ranslateY/ranslateZ(distance) | \b沿X/Y/Z轴平移对象 |\n| rotateX/rotateY/rotateZ(rad) | \b沿X/Y/Z轴平移对象 |\n| lookAt(vector) | 一个世界向量观察点，用于旋转模型以面对观察点 |\n| add(object, ...) | 添加object为该对象的子对象 |\n| remove(object, ...) | 删除object子对象 |\n| clone(recursive) | 克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆 |\n\n以上属性可以通过`obj.[attr].x/obj.[attr].y/obj.[attr].z`来设置，或者是一次性设置3个值`obj.[attr].set(x, y, z)` ","slug":"threejs基础上：初始化","published":1,"updated":"2019-02-25T06:42:36.045Z","layout":"post","photos":[],"link":"","_id":"cjt8ew04s0002yn7ool53iiiz","content":"<p>Three.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   </p>\n<p>ThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   </p>\n<hr>\n<h3 id=\"初始化对象\"><a href=\"#初始化对象\" class=\"headerlink\" title=\"初始化对象\"></a>初始化对象</h3><h4 id=\"1、初始化场景scene\"><a href=\"#1、初始化场景scene\" class=\"headerlink\" title=\"1、初始化场景scene\"></a>1、初始化场景scene</h4><p>场景相当于是一个容器来容纳所有的物体，创建场景如下：   </p>\n<p><code>var scene = new THREE.Scene();</code>   </p>\n<p>设置背景scene.background，可以为纯色，也可以为图片资源：</p>\n<p><code>scene.background = new THREE.Color(0xffffff)</code></p>\n<h4 id=\"2、相机camera\"><a href=\"#2、相机camera\" class=\"headerlink\" title=\"2、相机camera\"></a>2、相机camera</h4><p>THREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。</p>\n<p><code>var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>number</td>\n<td>50</td>\n<td>视野角度</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>number</td>\n<td>1</td>\n<td>实际窗口的宽高比</td>\n</tr>\n<tr>\n<td>near</td>\n<td>number</td>\n<td>0.1</td>\n<td>相机到近平面的距离</td>\n</tr>\n<tr>\n<td>far</td>\n<td>number</td>\n<td>2000</td>\n<td>相机到远平面的距离</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3、初始化渲染器renderer\"><a href=\"#3、初始化渲染器renderer\" class=\"headerlink\" title=\"3、初始化渲染器renderer\"></a>3、初始化渲染器renderer</h4><p>创建一个WebGL渲染器，可以通过插件<code>Detector.js</code>检测canvas/webgl兼容性，并在页面添加不兼容信息。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(Detector.webgl)</span><br><span class=\"line\">    renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer(&#123;<span class=\"attr\">antialias</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Detector.canvas)</span><br><span class=\"line\">    renderer = <span class=\"keyword\">new</span> THREE.CanvasRenderer()      </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'不兼容'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>antialias属性开启用于抗锯齿。初始化渲染器有一些<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29\" target=\"_blank\" rel=\"noopener\">其他参数</a>，一般不需要设置使用默认值即可。   </p>\n<h5 id=\"setSize-width-height-updateStyle\"><a href=\"#setSize-width-height-updateStyle\" class=\"headerlink\" title=\"setSize(width, height, updateStyle)\"></a>setSize(width, height, updateStyle)</h5><p>调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。</p>\n<h5 id=\"setViewport-x-y-width-height\"><a href=\"#setViewport-x-y-width-height\" class=\"headerlink\" title=\"setViewport(x, y, width, height)\"></a>setViewport(x, y, width, height)</h5><p>设置视口，从(x, y)到(x+width, y+height)，<strong>*注意：</strong>此处的(x, y)是该区域的左下角*</p>\n<h5 id=\"renderer-domElement\"><a href=\"#renderer-domElement\" class=\"headerlink\" title=\"renderer.domElement\"></a>renderer.domElement</h5><p>渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   </p>\n<p><code>document.body.appendChild(renderer.domElement)</code>;   </p>\n<h5 id=\"setPixelRatio-value\"><a href=\"#setPixelRatio-value\" class=\"headerlink\" title=\"setPixelRatio(value)\"></a>setPixelRatio(value)</h5><p>设置设备像素比，用于HiDPI设备防止模糊输出canvas。</p>\n<p><code>renderer.setPixelRatio(window.devicePixelRatio)</code></p>\n<p>到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~</p>\n<hr>\n<h3 id=\"展示一个球体\"><a href=\"#展示一个球体\" class=\"headerlink\" title=\"展示一个球体\"></a>展示一个球体</h3><h4 id=\"1-创建物体\"><a href=\"#1-创建物体\" class=\"headerlink\" title=\"1. 创建物体\"></a>1. 创建物体</h4><h5 id=\"Mesh对象\"><a href=\"#Mesh对象\" class=\"headerlink\" title=\"Mesh对象\"></a>Mesh对象</h5><p>可以通过类似以下方式创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.SphereGeometry(<span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>); <span class=\"comment\">/* 几何模型，用于定义结构 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> THREE.MeshNormalMeterial(); <span class=\"comment\">/* 材质，用于定义外观 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> earth = <span class=\"keyword\">new</span> THREE.Mesh(geometry, meterial);</span><br></pre></td></tr></table></figure></p>\n<p>一个普通的物体对象的构成需要两个参数。</p>\n<ul>\n<li><strong>Geometry</strong>：在threejs中有两种几何体（基本几何体和buffer几何体）。<br><strong><em>基本几何体</em></strong> 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；<br><strong><em>buffer几何体</em></strong> 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。<br>不同的集合</li>\n<li><strong>Meterial</strong>：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>材质</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\b\bMaterial</td>\n<td>\b材料基类</td>\n</tr>\n<tr>\n<td>MeshBasicMaterial</td>\n<td>基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果</td>\n</tr>\n<tr>\n<td>MeshDepthMaterial</td>\n<td>渲染成简单的平面多边形，不考虑光照的影响</td>\n</tr>\n<tr>\n<td>MeshNormalMaterial</td>\n<td>计算法向量颜色的材质</td>\n</tr>\n<tr>\n<td>MeshLambertMaterial</td>\n<td>对光源做出反应，可用于创建暗淡的材质</td>\n</tr>\n<tr>\n<td>MeshPhongMaterial</td>\n<td>对光源做出反应，可用于创建光亮的材质</td>\n</tr>\n<tr>\n<td>MeshFaceMaterial</td>\n<td>为几何体的每一面指定材质，更像是一种材质容器</td>\n</tr>\n<tr>\n<td>THREE.SceneUtil.createMultiMaterialObject</td>\n<td>同时应用多种材质</td>\n</tr>\n<tr>\n<td>ShaderMaterial</td>\n<td>自己创建着色程序，需要通过GLSL语言</td>\n</tr>\n<tr>\n<td>LineBasicMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n<tr>\n<td>LineDashedMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n</tbody>\n</table>\n<p> 附：Meterial的<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29\" target=\"_blank\" rel=\"noopener\">所有通用属性</a>，其中需要注意的有：   </p>\n<ul>\n<li>overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好</li>\n</ul>\n<h4 id=\"2-添加到场景\"><a href=\"#2-添加到场景\" class=\"headerlink\" title=\"2. 添加到场景\"></a>2. 添加到场景</h4><p>将物体添加到场景中：   </p>\n<p><code>scene.add(earth);</code></p>\n<p>注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。</p>\n<p><code>camera.position.z = 50;</code></p>\n<h4 id=\"3-渲染页面\"><a href=\"#3-渲染页面\" class=\"headerlink\" title=\"3. 渲染页面\"></a>3. 渲染页面</h4><p><code>renderer.render(scene, camera);</code>   </p>\n<p>这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    </p>\n<hr>\n<h3 id=\"附表：对象的通用属性-函数\"><a href=\"#附表：对象的通用属性-函数\" class=\"headerlink\" title=\"*附表：对象的通用属性/函数\"></a>*<em>附表：对象的通用属性/函数</em></h3><p>以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。</p>\n<table>\n<thead>\n<tr>\n<th>属性/函数</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\bposition</td>\n<td>\b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象</td>\n</tr>\n<tr>\n<td>rotation</td>\n<td>对象的局部旋转，单位为弧度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>控制对象的缩放</td>\n</tr>\n<tr>\n<td>up</td>\n<td>空间向上的方向，缺省是THREE.Vector3(0, 1, 0)</td>\n</tr>\n<tr>\n<td>translateX/ranslateY/ranslateZ(distance)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>rotateX/rotateY/rotateZ(rad)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>lookAt(vector)</td>\n<td>一个世界向量观察点，用于旋转模型以面对观察点</td>\n</tr>\n<tr>\n<td>add(object, …)</td>\n<td>添加object为该对象的子对象</td>\n</tr>\n<tr>\n<td>remove(object, …)</td>\n<td>删除object子对象</td>\n</tr>\n<tr>\n<td>clone(recursive)</td>\n<td>克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性可以通过<code>obj.[attr].x/obj.[attr].y/obj.[attr].z</code>来设置，或者是一次性设置3个值<code>obj.[attr].set(x, y, z)</code> </p>\n","site":{"data":{}},"excerpt":"","more":"<p>Three.js是一个用于简化webGL编程的3D库，即使在不支持webGL的环境下也能做到优雅降级，以下教程将围绕构建这个地球DEMO来展开。   </p>\n<p>ThreeJs中最主要的有三个对象场景（scene）、相机（camera）、渲染器（renderer）。scene是布景空间，camera是拍摄镜头，render是用来将scene和camera生成的场景渲染到屏幕上，有了这三个对象才能将场景渲染到网页上去。   </p>\n<hr>\n<h3 id=\"初始化对象\"><a href=\"#初始化对象\" class=\"headerlink\" title=\"初始化对象\"></a>初始化对象</h3><h4 id=\"1、初始化场景scene\"><a href=\"#1、初始化场景scene\" class=\"headerlink\" title=\"1、初始化场景scene\"></a>1、初始化场景scene</h4><p>场景相当于是一个容器来容纳所有的物体，创建场景如下：   </p>\n<p><code>var scene = new THREE.Scene();</code>   </p>\n<p>设置背景scene.background，可以为纯色，也可以为图片资源：</p>\n<p><code>scene.background = new THREE.Color(0xffffff)</code></p>\n<h4 id=\"2、相机camera\"><a href=\"#2、相机camera\" class=\"headerlink\" title=\"2、相机camera\"></a>2、相机camera</h4><p>THREE中的camera有三种，最常用的是远景相机，也就是人眼观察世界的模式，在相机拍摄的3D空间之外的物体不会被渲染。</p>\n<p><code>var camera = new THREE.PespectiveCamera(\bfov, aspect, near,far);</code></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>fov</td>\n<td>number</td>\n<td>50</td>\n<td>视野角度</td>\n</tr>\n<tr>\n<td>aspect</td>\n<td>number</td>\n<td>1</td>\n<td>实际窗口的宽高比</td>\n</tr>\n<tr>\n<td>near</td>\n<td>number</td>\n<td>0.1</td>\n<td>相机到近平面的距离</td>\n</tr>\n<tr>\n<td>far</td>\n<td>number</td>\n<td>2000</td>\n<td>相机到远平面的距离</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3、初始化渲染器renderer\"><a href=\"#3、初始化渲染器renderer\" class=\"headerlink\" title=\"3、初始化渲染器renderer\"></a>3、初始化渲染器renderer</h4><p>创建一个WebGL渲染器，可以通过插件<code>Detector.js</code>检测canvas/webgl兼容性，并在页面添加不兼容信息。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> renderer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(Detector.webgl)</span><br><span class=\"line\">    renderer = <span class=\"keyword\">new</span> THREE.WebGLRenderer(&#123;<span class=\"attr\">antialias</span>: <span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Detector.canvas)</span><br><span class=\"line\">    renderer = <span class=\"keyword\">new</span> THREE.CanvasRenderer()      </span><br><span class=\"line\"><span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'不兼容'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>antialias属性开启用于抗锯齿。初始化渲染器有一些<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%B8%B2%E6%9F%93%E5%99%A8%28Renderers%29/WebGL%E6%B8%B2%E6%9F%93%E5%99%A8%28WebGLRenderer%29\" target=\"_blank\" rel=\"noopener\">其他参数</a>，一般不需要设置使用默认值即可。   </p>\n<h5 id=\"setSize-width-height-updateStyle\"><a href=\"#setSize-width-height-updateStyle\" class=\"headerlink\" title=\"setSize(width, height, updateStyle)\"></a>setSize(width, height, updateStyle)</h5><p>调整输出canvas尺寸（宽度，高度），通常设置为屏幕大小，若不是则需考虑设备像素比并设置视口（viewport）以匹配尺寸，updateStyle为true时，则显式添加像素输出canvas的样式中，默认为false。</p>\n<h5 id=\"setViewport-x-y-width-height\"><a href=\"#setViewport-x-y-width-height\" class=\"headerlink\" title=\"setViewport(x, y, width, height)\"></a>setViewport(x, y, width, height)</h5><p>设置视口，从(x, y)到(x+width, y+height)，<strong>*注意：</strong>此处的(x, y)是该区域的左下角*</p>\n<h5 id=\"renderer-domElement\"><a href=\"#renderer-domElement\" class=\"headerlink\" title=\"renderer.domElement\"></a>renderer.domElement</h5><p>渲染器renderer的domElement元素表示渲染器中的画布，通常需要将domElement挂载到body下面，渲染的结果就能正确显示了。   </p>\n<p><code>document.body.appendChild(renderer.domElement)</code>;   </p>\n<h5 id=\"setPixelRatio-value\"><a href=\"#setPixelRatio-value\" class=\"headerlink\" title=\"setPixelRatio(value)\"></a>setPixelRatio(value)</h5><p>设置设备像素比，用于HiDPI设备防止模糊输出canvas。</p>\n<p><code>renderer.setPixelRatio(window.devicePixelRatio)</code></p>\n<p>到这里，我们已经构建好了基本的“舞台”，就差“演员”上场了~</p>\n<hr>\n<h3 id=\"展示一个球体\"><a href=\"#展示一个球体\" class=\"headerlink\" title=\"展示一个球体\"></a>展示一个球体</h3><h4 id=\"1-创建物体\"><a href=\"#1-创建物体\" class=\"headerlink\" title=\"1. 创建物体\"></a>1. 创建物体</h4><h5 id=\"Mesh对象\"><a href=\"#Mesh对象\" class=\"headerlink\" title=\"Mesh对象\"></a>Mesh对象</h5><p>可以通过类似以下方式创建：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> geometry = <span class=\"keyword\">new</span> THREE.SphereGeometry(<span class=\"number\">15</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>); <span class=\"comment\">/* 几何模型，用于定义结构 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> THREE.MeshNormalMeterial(); <span class=\"comment\">/* 材质，用于定义外观 */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> earth = <span class=\"keyword\">new</span> THREE.Mesh(geometry, meterial);</span><br></pre></td></tr></table></figure></p>\n<p>一个普通的物体对象的构成需要两个参数。</p>\n<ul>\n<li><strong>Geometry</strong>：在threejs中有两种几何体（基本几何体和buffer几何体）。<br><strong><em>基本几何体</em></strong> 是通过类来管理自身信息，比如顶点位置、颜色等，便于操作，用于\b创建经常变化的物体；<br><strong><em>buffer几何体</em></strong> 是用数组存储的，且保存在内存缓存区，减低对GPU的消耗，适用于一经创建就不需要修改的物体。<br>不同的集合</li>\n<li><strong>Meterial</strong>：不同材质的显示效果不同，可以在具体使用到的时候再进行查看，以下给出简单地\b描述，在需要使用的时候才去看具体的材质即可：   </li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>材质</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\b\bMaterial</td>\n<td>\b材料基类</td>\n</tr>\n<tr>\n<td>MeshBasicMaterial</td>\n<td>基于深度着色的材质，由物体和相机的距离决定颜色，可以做出逐渐消失的效果</td>\n</tr>\n<tr>\n<td>MeshDepthMaterial</td>\n<td>渲染成简单的平面多边形，不考虑光照的影响</td>\n</tr>\n<tr>\n<td>MeshNormalMaterial</td>\n<td>计算法向量颜色的材质</td>\n</tr>\n<tr>\n<td>MeshLambertMaterial</td>\n<td>对光源做出反应，可用于创建暗淡的材质</td>\n</tr>\n<tr>\n<td>MeshPhongMaterial</td>\n<td>对光源做出反应，可用于创建光亮的材质</td>\n</tr>\n<tr>\n<td>MeshFaceMaterial</td>\n<td>为几何体的每一面指定材质，更像是一种材质容器</td>\n</tr>\n<tr>\n<td>THREE.SceneUtil.createMultiMaterialObject</td>\n<td>同时应用多种材质</td>\n</tr>\n<tr>\n<td>ShaderMaterial</td>\n<td>自己创建着色程序，需要通过GLSL语言</td>\n</tr>\n<tr>\n<td>LineBasicMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n<tr>\n<td>LineDashedMaterial</td>\n<td>只能应用于THREE.Line</td>\n</tr>\n</tbody>\n</table>\n<p> 附：Meterial的<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E6%9D%90%E6%96%99%28Materials%29/%E6%9D%90%E6%96%99%28Material%29\" target=\"_blank\" rel=\"noopener\">所有通用属性</a>，其中需要注意的有：   </p>\n<ul>\n<li>overdraw：解决绘制三角形时出现间隙，当设置为0.5时效果较好</li>\n</ul>\n<h4 id=\"2-添加到场景\"><a href=\"#2-添加到场景\" class=\"headerlink\" title=\"2. 添加到场景\"></a>2. 添加到场景</h4><p>将物体添加到场景中：   </p>\n<p><code>scene.add(earth);</code></p>\n<p>注意通过scene.add方法添加到场景的位置默认为原点(0,0,0)，此时跟相机位置是重叠的，需要移动一下相机的位置才能够看到物体。</p>\n<p><code>camera.position.z = 50;</code></p>\n<h4 id=\"3-渲染页面\"><a href=\"#3-渲染页面\" class=\"headerlink\" title=\"3. 渲染页面\"></a>3. 渲染页面</h4><p><code>renderer.render(scene, camera);</code>   </p>\n<p>这样我们就简单地渲染出了一个带有静态球体的场景，由于此处使用的材质只是一个颜色，所以添加了经纬线使他看起来更像球体。    </p>\n<hr>\n<h3 id=\"附表：对象的通用属性-函数\"><a href=\"#附表：对象的通用属性-函数\" class=\"headerlink\" title=\"*附表：对象的通用属性/函数\"></a>*<em>附表：对象的通用属性/函数</em></h3><p>以下给出3D对象的通用属性与函数，属性值可以直接通过console.log查看。</p>\n<table>\n<thead>\n<tr>\n<th>属性/函数</th>\n<th>\b描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\bposition</td>\n<td>\b决定对象相对于其父对象的位置，大部分情况下一个对象的父对象是THREE.Scene()对象</td>\n</tr>\n<tr>\n<td>rotation</td>\n<td>对象的局部旋转，单位为弧度</td>\n</tr>\n<tr>\n<td>scale</td>\n<td>控制对象的缩放</td>\n</tr>\n<tr>\n<td>up</td>\n<td>空间向上的方向，缺省是THREE.Vector3(0, 1, 0)</td>\n</tr>\n<tr>\n<td>translateX/ranslateY/ranslateZ(distance)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>rotateX/rotateY/rotateZ(rad)</td>\n<td>\b沿X/Y/Z轴平移对象</td>\n</tr>\n<tr>\n<td>lookAt(vector)</td>\n<td>一个世界向量观察点，用于旋转模型以面对观察点</td>\n</tr>\n<tr>\n<td>add(object, …)</td>\n<td>添加object为该对象的子对象</td>\n</tr>\n<tr>\n<td>remove(object, …)</td>\n<td>删除object子对象</td>\n</tr>\n<tr>\n<td>clone(recursive)</td>\n<td>克隆对象，当recursive为true时（默认为true），对象的后代也会被克隆</td>\n</tr>\n</tbody>\n</table>\n<p>以上属性可以通过<code>obj.[attr].x/obj.[attr].y/obj.[attr].z</code>来设置，或者是一次性设置3个值<code>obj.[attr].set(x, y, z)</code> </p>\n"},{"title":"threejs基础下：贴图资源加载与光照","date":"2018-10-11T13:16:01.000Z","toc":true,"comments":1,"description":"threejs加载器，贴图","_content":"\n\n### 加载器Loaders\n加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：\n```\nvar loader = new THREE.[Loader]();\n/* \n * 函数名：.load(url, onLoad, onProgress, onError)\n * url：资源地址\n * onLoad: 加载完成的回调，参数是已加载的资源文本\n * onProgress: 加载中的调用，参数是XmlHttpRequest实例\n * onError：加载出错时调用\n*/\nloader.load(url, onLoad, onProgress, onError)\n```\n\n#### 1. TextureLoader/ImageLoader\n加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。\n```\nvar loader = new THREE.TextureLoader();\nloader.load('texture/earth.jpg', function( texture ) {\n    // 作为纹理，或直接使用TextureLoader\n    // var geometry = new THREE.SphereGeometry(15, 10, 10);\n    // var meterial = new THREE.MeshBasicMaterial({color: 0x739783, map:texture});\n    // earth = new THREE.Mesh(geometry, material);\n    // scene.add(earth);\n    // 直接绘制在canvas上\n    var canvas =document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    context.drawImage(texture, 100, 100);    \n})\n```\n\n\n#### 2. AudioLoader\n加载音乐也是常见的需求，加载音乐并播放的实现方法如下：\n```\n// 初始化侦听器并添加到相机中\nvar listener = new THREE.AudioListener();\ncamera.add(listener);\n// 实例化一个音频对象并添加到场景中\nvar audio = new THREE.audio( audioListener );\nscene.add(audio);\n// 加载资源\nvar loader = new THREE.AudioLoader();\nloader.load( 'audio/amobient.ogg', function(audioBuffer) {\n    audio.setBuffer(audioBuffer);\n    audio.play();\n},\nfunction(xhr) {\n    console.log( (xhr.loaded / xhr.total * 100) + \"% is loaded\" );\n},\nfunction(xhr) {\n    console.log('An error happened');\n})\n```\n音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。\n\n#### 3. JSONLoader\n实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。\n```\nvar loader = new THREE.JSONLoader();\nloader.load(\n    './monster/monster.js',\n    function (geometry, materials) {\n        var material = new THREE.MultiMaterial(materials);\n        var object = new THREE.Mesh(geometry, material);\n        scene.add(object);\n    }\n)\n```\n\n**注意**：\n- 使用加载的资源时，要适时重新渲染，否则无法生效。\n- \b存在跨域问题。\n\n***\n\n### 贴图详解\n大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      \n#### 1. 凹凸贴图（Bump Map）\n用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：   \n```\nvar meterial = new THREE.MeshPhongMaterial({\n    bumpMap: textureLoader.load('./img_bump.jpg')\n})\n```\n\n#### 2. 漫反射贴图（Diffuse Map）\n用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。\n\n\n#### 3. 高光贴图（Specular Map）\n用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。\n```\nvar meterial = new THREE.MeshPhongMaterial({\n    specular: 0x404040, // 高光颜色\n    shininess: 5,              // 高光平滑度，默认30，值越高越强烈\n    specularMap: textureLoader.load('./img_spec.jpg')\n})\n```\n\n#### 4. 环境贴图（Cube Map）\n通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。\n```\n// 立方体环境，顺序是前后上下右左\nvar cubeTexture = new THREE.CubeTextureLoader().setPath('../img/skyBox').load({\n    'px.jpg', 'nx.jpg',\n    'py.jpg', 'ny.jpg',\n    'pz.jpg', 'nz.jpg'\n})\nscene.background = cubeTexture;\n```\n\n***\n\n### 光源Lights\n为了让图片看起来更加立体真实，通常需要增加一些光线。\n**注意：**只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 \n\n#### 1. 环境光（AmbientLight）\n这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。  \n```\nvar light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光\nscene.add(light);\n```\n\n#### 2. 平行光（DirectionalLight）\n产生平行的光线，当材质为`MeshLambertMaterial`或`MeshPhongMaterial`时才会受到影响。\n```\nvar light = new THREE.DirectionalLight(hex, instensity)\n```\n\n\n#### 3. 点光源（PointLight）\n```\n/*\n* hex：颜色的RGB值，如0x333333\n* intensity：光强，optional\n* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional\n* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional\n*/\nvar light = new THREE.PointLight(hex, intensity, distance, decay)\n```\n\n#### PointLight和DirectionalLight常用属性\n| 常用属性 | 默认值 | 说明|\n| --- | --- | --- |\n| target | - | 阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh） |\n| penumbra | 0.0 | 聚光锥的半影衰减百分比[0, 1] |\n| shadow | - | 用于存储光照阴影的所有信息，具体属性可参考[光照阴影](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights)/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow)) |\n| castShadow | false | 是否投射动态阴影，<font color=\"tomato\">*很耗费计算资源*</font> |","source":"_posts/threejs基础下：贴图资源加载与光照.md","raw":"---\ntitle: threejs基础下：贴图资源加载与光照\ndate: 2018-10-11 21:16:01\ntags: threejs\ncategory: lesson\ntoc: true\ncomments: true\ndescription: threejs加载器，贴图\n---\n\n\n### 加载器Loaders\n加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：\n```\nvar loader = new THREE.[Loader]();\n/* \n * 函数名：.load(url, onLoad, onProgress, onError)\n * url：资源地址\n * onLoad: 加载完成的回调，参数是已加载的资源文本\n * onProgress: 加载中的调用，参数是XmlHttpRequest实例\n * onError：加载出错时调用\n*/\nloader.load(url, onLoad, onProgress, onError)\n```\n\n#### 1. TextureLoader/ImageLoader\n加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。\n```\nvar loader = new THREE.TextureLoader();\nloader.load('texture/earth.jpg', function( texture ) {\n    // 作为纹理，或直接使用TextureLoader\n    // var geometry = new THREE.SphereGeometry(15, 10, 10);\n    // var meterial = new THREE.MeshBasicMaterial({color: 0x739783, map:texture});\n    // earth = new THREE.Mesh(geometry, material);\n    // scene.add(earth);\n    // 直接绘制在canvas上\n    var canvas =document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    context.drawImage(texture, 100, 100);    \n})\n```\n\n\n#### 2. AudioLoader\n加载音乐也是常见的需求，加载音乐并播放的实现方法如下：\n```\n// 初始化侦听器并添加到相机中\nvar listener = new THREE.AudioListener();\ncamera.add(listener);\n// 实例化一个音频对象并添加到场景中\nvar audio = new THREE.audio( audioListener );\nscene.add(audio);\n// 加载资源\nvar loader = new THREE.AudioLoader();\nloader.load( 'audio/amobient.ogg', function(audioBuffer) {\n    audio.setBuffer(audioBuffer);\n    audio.play();\n},\nfunction(xhr) {\n    console.log( (xhr.loaded / xhr.total * 100) + \"% is loaded\" );\n},\nfunction(xhr) {\n    console.log('An error happened');\n})\n```\n音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。\n\n#### 3. JSONLoader\n实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。\n```\nvar loader = new THREE.JSONLoader();\nloader.load(\n    './monster/monster.js',\n    function (geometry, materials) {\n        var material = new THREE.MultiMaterial(materials);\n        var object = new THREE.Mesh(geometry, material);\n        scene.add(object);\n    }\n)\n```\n\n**注意**：\n- 使用加载的资源时，要适时重新渲染，否则无法生效。\n- \b存在跨域问题。\n\n***\n\n### 贴图详解\n大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      \n#### 1. 凹凸贴图（Bump Map）\n用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：   \n```\nvar meterial = new THREE.MeshPhongMaterial({\n    bumpMap: textureLoader.load('./img_bump.jpg')\n})\n```\n\n#### 2. 漫反射贴图（Diffuse Map）\n用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。\n\n\n#### 3. 高光贴图（Specular Map）\n用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。\n```\nvar meterial = new THREE.MeshPhongMaterial({\n    specular: 0x404040, // 高光颜色\n    shininess: 5,              // 高光平滑度，默认30，值越高越强烈\n    specularMap: textureLoader.load('./img_spec.jpg')\n})\n```\n\n#### 4. 环境贴图（Cube Map）\n通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。\n```\n// 立方体环境，顺序是前后上下右左\nvar cubeTexture = new THREE.CubeTextureLoader().setPath('../img/skyBox').load({\n    'px.jpg', 'nx.jpg',\n    'py.jpg', 'ny.jpg',\n    'pz.jpg', 'nz.jpg'\n})\nscene.background = cubeTexture;\n```\n\n***\n\n### 光源Lights\n为了让图片看起来更加立体真实，通常需要增加一些光线。\n**注意：**只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 \n\n#### 1. 环境光（AmbientLight）\n这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。  \n```\nvar light = new THREE.AmbientLight(color, instensity); // 创建一个给定颜色和强度的环境光\nscene.add(light);\n```\n\n#### 2. 平行光（DirectionalLight）\n产生平行的光线，当材质为`MeshLambertMaterial`或`MeshPhongMaterial`时才会受到影响。\n```\nvar light = new THREE.DirectionalLight(hex, instensity)\n```\n\n\n#### 3. 点光源（PointLight）\n```\n/*\n* hex：颜色的RGB值，如0x333333\n* intensity：光强，optional\n* distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional\n* decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional\n*/\nvar light = new THREE.PointLight(hex, intensity, distance, decay)\n```\n\n#### PointLight和DirectionalLight常用属性\n| 常用属性 | 默认值 | 说明|\n| --- | --- | --- |\n| target | - | 阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh） |\n| penumbra | 0.0 | 聚光锥的半影衰减百分比[0, 1] |\n| shadow | - | 用于存储光照阴影的所有信息，具体属性可参考[光照阴影](http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights)/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow)) |\n| castShadow | false | 是否投射动态阴影，<font color=\"tomato\">*很耗费计算资源*</font> |","slug":"threejs基础下：贴图资源加载与光照","published":1,"updated":"2019-02-25T06:42:22.805Z","layout":"post","photos":[],"link":"","_id":"cjt8ew04x0005yn7odiffk5te","content":"<h3 id=\"加载器Loaders\"><a href=\"#加载器Loaders\" class=\"headerlink\" title=\"加载器Loaders\"></a>加载器Loaders</h3><p>加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.[<span class=\"string\">Loader</span>](<span class=\"link\"></span>);</span><br><span class=\"line\">/* </span><br><span class=\"line\"> * 函数名：.load(url, onLoad, onProgress, onError)</span><br><span class=\"line\"> * url：资源地址</span><br><span class=\"line\"> * onLoad: 加载完成的回调，参数是已加载的资源文本</span><br><span class=\"line\"> * onProgress: 加载中的调用，参数是XmlHttpRequest实例</span><br><span class=\"line\"> * onError：加载出错时调用</span><br><span class=\"line\">*/</span><br><span class=\"line\">loader.load(url, onLoad, onProgress, onError)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-TextureLoader-ImageLoader\"><a href=\"#1-TextureLoader-ImageLoader\" class=\"headerlink\" title=\"1. TextureLoader/ImageLoader\"></a>1. TextureLoader/ImageLoader</h4><p>加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> THREE.TextureLoader();</span><br><span class=\"line\">loader.load(<span class=\"string\">'texture/earth.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> texture </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 作为纹理，或直接使用TextureLoader</span></span><br><span class=\"line\">    <span class=\"comment\">// var geometry = new THREE.SphereGeometry(15, 10, 10);</span></span><br><span class=\"line\">    <span class=\"comment\">// var meterial = new THREE.MeshBasicMaterial(&#123;color: 0x739783, map:texture&#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// earth = new THREE.Mesh(geometry, material);</span></span><br><span class=\"line\">    <span class=\"comment\">// scene.add(earth);</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接绘制在canvas上</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas =<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    context.drawImage(texture, <span class=\"number\">100</span>, <span class=\"number\">100</span>);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-AudioLoader\"><a href=\"#2-AudioLoader\" class=\"headerlink\" title=\"2. AudioLoader\"></a>2. AudioLoader</h4><p>加载音乐也是常见的需求，加载音乐并播放的实现方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化侦听器并添加到相机中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> THREE.AudioListener();</span><br><span class=\"line\">camera.add(listener);</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个音频对象并添加到场景中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> audio = <span class=\"keyword\">new</span> THREE.audio( audioListener );</span><br><span class=\"line\">scene.add(audio);</span><br><span class=\"line\"><span class=\"comment\">// 加载资源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> THREE.AudioLoader();</span><br><span class=\"line\">loader.load( <span class=\"string\">'audio/amobient.ogg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">audioBuffer</span>) </span>&#123;</span><br><span class=\"line\">    audio.setBuffer(audioBuffer);</span><br><span class=\"line\">    audio.play();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( (xhr.loaded / xhr.total * <span class=\"number\">100</span>) + <span class=\"string\">\"% is loaded\"</span> );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'An error happened'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。</p>\n<h4 id=\"3-JSONLoader\"><a href=\"#3-JSONLoader\" class=\"headerlink\" title=\"3. JSONLoader\"></a>3. JSONLoader</h4><p>实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.JSONLoader();</span><br><span class=\"line\">loader.load(</span><br><span class=\"line\">    <span class=\"string\">'./monster/monster.js'</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> </span>(geometry, materials) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MultiMaterial(materials);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.Mesh(geometry, material);</span><br><span class=\"line\">        scene.add(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>使用加载的资源时，要适时重新渲染，否则无法生效。</li>\n<li>\b存在跨域问题。</li>\n</ul>\n<hr>\n<h3 id=\"贴图详解\"><a href=\"#贴图详解\" class=\"headerlink\" title=\"贴图详解\"></a>贴图详解</h3><p>大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      </p>\n<h4 id=\"1-凹凸贴图（Bump-Map）\"><a href=\"#1-凹凸贴图（Bump-Map）\" class=\"headerlink\" title=\"1. 凹凸贴图（Bump Map）\"></a>1. 凹凸贴图（Bump Map）</h4><p>用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    bumpMap: <span class=\"type\">textureLoader</span>.load(<span class=\"string\">'./img_bump.jpg'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-漫反射贴图（Diffuse-Map）\"><a href=\"#2-漫反射贴图（Diffuse-Map）\" class=\"headerlink\" title=\"2. 漫反射贴图（Diffuse Map）\"></a>2. 漫反射贴图（Diffuse Map）</h4><p>用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。</p>\n<h4 id=\"3-高光贴图（Specular-Map）\"><a href=\"#3-高光贴图（Specular-Map）\" class=\"headerlink\" title=\"3. 高光贴图（Specular Map）\"></a>3. 高光贴图（Specular Map）</h4><p>用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    specular: <span class=\"type\">0x404040</span>, <span class=\"comment\">// 高光颜色</span></span><br><span class=\"line\">    shininess: <span class=\"type\">5</span>,              <span class=\"comment\">// 高光平滑度，默认30，值越高越强烈</span></span><br><span class=\"line\">    specularMap: <span class=\"type\">textureLoader</span>.load(<span class=\"string\">'./img_spec.jpg'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-环境贴图（Cube-Map）\"><a href=\"#4-环境贴图（Cube-Map）\" class=\"headerlink\" title=\"4. 环境贴图（Cube Map）\"></a>4. 环境贴图（Cube Map）</h4><p>通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 立方体环境，顺序是前后上下右左</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cubeTexture = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.CubeTextureLoader().setPath(<span class=\"string\">'../img/skyBox'</span>).load(&#123;</span><br><span class=\"line\">    <span class=\"string\">'px.jpg'</span>, <span class=\"string\">'nx.jpg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'py.jpg'</span>, <span class=\"string\">'ny.jpg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pz.jpg'</span>, <span class=\"string\">'nz.jpg'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">scene.background = cubeTexture;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"光源Lights\"><a href=\"#光源Lights\" class=\"headerlink\" title=\"光源Lights\"></a>光源Lights</h3><p>为了让图片看起来更加立体真实，通常需要增加一些光线。<br><strong>注意：</strong>只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 </p>\n<h4 id=\"1-环境光（AmbientLight）\"><a href=\"#1-环境光（AmbientLight）\" class=\"headerlink\" title=\"1. 环境光（AmbientLight）\"></a>1. 环境光（AmbientLight）</h4><p>这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">THREE</span>.<span class=\"title\">AmbientLight</span>(color, instensity); <span class=\"comment\">// 创建一个给定颜色和强度的环境光</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">scene</span>.<span class=\"title\">add</span>(light);</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-平行光（DirectionalLight）\"><a href=\"#2-平行光（DirectionalLight）\" class=\"headerlink\" title=\"2. 平行光（DirectionalLight）\"></a>2. 平行光（DirectionalLight）</h4><p>产生平行的光线，当材质为<code>MeshLambertMaterial</code>或<code>MeshPhongMaterial</code>时才会受到影响。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.DirectionalLight(hex, instensity)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-点光源（PointLight）\"><a href=\"#3-点光源（PointLight）\" class=\"headerlink\" title=\"3. 点光源（PointLight）\"></a>3. 点光源（PointLight）</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> hex：颜色的RGB值，如0x333333</span><br><span class=\"line\"><span class=\"bullet\">* </span>intensity：光强，optional</span><br><span class=\"line\"><span class=\"bullet\">* </span>distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional</span><br><span class=\"line\"><span class=\"bullet\">* </span>decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional</span><br><span class=\"line\"><span class=\"strong\">*/</span></span><br><span class=\"line\"><span class=\"strong\">var light = new THREE.PointLight(hex, intensity, distance, decay)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PointLight和DirectionalLight常用属性\"><a href=\"#PointLight和DirectionalLight常用属性\" class=\"headerlink\" title=\"PointLight和DirectionalLight常用属性\"></a>PointLight和DirectionalLight常用属性</h4><table>\n<thead>\n<tr>\n<th>常用属性</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>-</td>\n<td>阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh）</td>\n</tr>\n<tr>\n<td>penumbra</td>\n<td>0.0</td>\n<td>聚光锥的半影衰减百分比[0, 1]</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>-</td>\n<td>用于存储光照阴影的所有信息，具体属性可参考<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights\" target=\"_blank\" rel=\"noopener\">光照阴影</a>/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow))</td>\n</tr>\n<tr>\n<td>castShadow</td>\n<td>false</td>\n<td>是否投射动态阴影，<font color=\"tomato\"><em>很耗费计算资源</em></font></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"加载器Loaders\"><a href=\"#加载器Loaders\" class=\"headerlink\" title=\"加载器Loaders\"></a>加载器Loaders</h3><p>加载器是threejs中很重要的一个步骤，可以用于加载纹理/图片/模型/音频等资源，不同的loader对应不同格式的文件，loaders通用流程如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var loader = new THREE.[<span class=\"string\">Loader</span>](<span class=\"link\"></span>);</span><br><span class=\"line\">/* </span><br><span class=\"line\"> * 函数名：.load(url, onLoad, onProgress, onError)</span><br><span class=\"line\"> * url：资源地址</span><br><span class=\"line\"> * onLoad: 加载完成的回调，参数是已加载的资源文本</span><br><span class=\"line\"> * onProgress: 加载中的调用，参数是XmlHttpRequest实例</span><br><span class=\"line\"> * onError：加载出错时调用</span><br><span class=\"line\">*/</span><br><span class=\"line\">loader.load(url, onLoad, onProgress, onError)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"1-TextureLoader-ImageLoader\"><a href=\"#1-TextureLoader-ImageLoader\" class=\"headerlink\" title=\"1. TextureLoader/ImageLoader\"></a>1. TextureLoader/ImageLoader</h4><p>加载图片资源，可以作为贴图(map)覆盖在物体上或者直接绘制在canvas上。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> THREE.TextureLoader();</span><br><span class=\"line\">loader.load(<span class=\"string\">'texture/earth.jpg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> texture </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 作为纹理，或直接使用TextureLoader</span></span><br><span class=\"line\">    <span class=\"comment\">// var geometry = new THREE.SphereGeometry(15, 10, 10);</span></span><br><span class=\"line\">    <span class=\"comment\">// var meterial = new THREE.MeshBasicMaterial(&#123;color: 0x739783, map:texture&#125;);</span></span><br><span class=\"line\">    <span class=\"comment\">// earth = new THREE.Mesh(geometry, material);</span></span><br><span class=\"line\">    <span class=\"comment\">// scene.add(earth);</span></span><br><span class=\"line\">    <span class=\"comment\">// 直接绘制在canvas上</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> canvas =<span class=\"built_in\">document</span>.createElement(<span class=\"string\">'canvas'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = canvas.getContext(<span class=\"string\">'2d'</span>);</span><br><span class=\"line\">    context.drawImage(texture, <span class=\"number\">100</span>, <span class=\"number\">100</span>);    </span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-AudioLoader\"><a href=\"#2-AudioLoader\" class=\"headerlink\" title=\"2. AudioLoader\"></a>2. AudioLoader</h4><p>加载音乐也是常见的需求，加载音乐并播放的实现方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化侦听器并添加到相机中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> listener = <span class=\"keyword\">new</span> THREE.AudioListener();</span><br><span class=\"line\">camera.add(listener);</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个音频对象并添加到场景中</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> audio = <span class=\"keyword\">new</span> THREE.audio( audioListener );</span><br><span class=\"line\">scene.add(audio);</span><br><span class=\"line\"><span class=\"comment\">// 加载资源</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> THREE.AudioLoader();</span><br><span class=\"line\">loader.load( <span class=\"string\">'audio/amobient.ogg'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">audioBuffer</span>) </span>&#123;</span><br><span class=\"line\">    audio.setBuffer(audioBuffer);</span><br><span class=\"line\">    audio.play();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log( (xhr.loaded / xhr.total * <span class=\"number\">100</span>) + <span class=\"string\">\"% is loaded\"</span> );</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'An error happened'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>音频可以做到与场景相关，比如说做出3D音效，或者是让音乐可视化。在这里暂时不讨论，在之后使用到的时候再进行具体研究。</p>\n<h4 id=\"3-JSONLoader\"><a href=\"#3-JSONLoader\" class=\"headerlink\" title=\"3. JSONLoader\"></a>3. JSONLoader</h4><p>实际项目中的物体可能十分复杂，不可以简单地用几何体实现，3D模型导出的JSON文件即可以存放物体的模型，也可以存放其材质和动画信息。解析一个 JSON 结构的数据并返回一个 object ，包含解析后的 geometry 和 materials。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loader = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.JSONLoader();</span><br><span class=\"line\">loader.load(</span><br><span class=\"line\">    <span class=\"string\">'./monster/monster.js'</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> </span>(geometry, materials) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> material = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MultiMaterial(materials);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> object = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.Mesh(geometry, material);</span><br><span class=\"line\">        scene.add(object);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><strong>注意</strong>：</p>\n<ul>\n<li>使用加载的资源时，要适时重新渲染，否则无法生效。</li>\n<li>\b存在跨域问题。</li>\n</ul>\n<hr>\n<h3 id=\"贴图详解\"><a href=\"#贴图详解\" class=\"headerlink\" title=\"贴图详解\"></a>贴图详解</h3><p>大部分贴图都是通过材质（Meterial）中的属性来应用到模型上，不同材质支持的贴图不同，需要具体问题具体分析，以下\b列出目前使用过的贴图介绍。      </p>\n<h4 id=\"1-凹凸贴图（Bump-Map）\"><a href=\"#1-凹凸贴图（Bump-Map）\" class=\"headerlink\" title=\"1. 凹凸贴图（Bump Map）\"></a>1. 凹凸贴图（Bump Map）</h4><p>用于给模型增加立体感，实际上并没有改变模型的形状，而是通过模型表面的阴影来达到凹凸的效果，使用方法如下：<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    bumpMap: <span class=\"type\">textureLoader</span>.load(<span class=\"string\">'./img_bump.jpg'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-漫反射贴图（Diffuse-Map）\"><a href=\"#2-漫反射贴图（Diffuse-Map）\" class=\"headerlink\" title=\"2. 漫反射贴图（Diffuse Map）\"></a>2. 漫反射贴图（Diffuse Map）</h4><p>用于表现物体表面的反射和表面颜色，即表现出物体被光照射到而显现的颜色和强度。漫反射贴图可以反映出物体的固有色及纹理，还有贴图上的光影。对于由几个模型拼接成的模型来说，光影是不必要的，因为通过打光就可以实现光影效果了，比如由许多砖模型拼凑成的一道墙。而对于一个整体，比如说一道墙的模型，\b砖块是由贴图实现的，那么在砖缝上绘制投影就很有必要了。</p>\n<h4 id=\"3-高光贴图（Specular-Map）\"><a href=\"#3-高光贴图（Specular-Map）\" class=\"headerlink\" title=\"3. 高光贴图（Specular Map）\"></a>3. 高光贴图（Specular Map）</h4><p>用来表现当光线照到模型表面时其表面属性，不同材质反射光的强度不同。越偏向RGB(0,0,0)的部分高光越弱，越偏向RGB(255,255,255)的部分高光越强。高光贴图需要与凹凸贴图和漫反射贴图配合使用，展现的材质才会趋近于真实世界。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> meterial = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.MeshPhongMaterial(&#123;</span><br><span class=\"line\">    specular: <span class=\"type\">0x404040</span>, <span class=\"comment\">// 高光颜色</span></span><br><span class=\"line\">    shininess: <span class=\"type\">5</span>,              <span class=\"comment\">// 高光平滑度，默认30，值越高越强烈</span></span><br><span class=\"line\">    specularMap: <span class=\"type\">textureLoader</span>.load(<span class=\"string\">'./img_spec.jpg'</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-环境贴图（Cube-Map）\"><a href=\"#4-环境贴图（Cube-Map）\" class=\"headerlink\" title=\"4. 环境贴图（Cube Map）\"></a>4. 环境贴图（Cube Map）</h4><p>通过一个虚拟的立方体包围住物体，通过上下左右前后6张图来模拟真实环境，threejs将这些图片渲染成无缝环境盒子。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 立方体环境，顺序是前后上下右左</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cubeTexture = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.CubeTextureLoader().setPath(<span class=\"string\">'../img/skyBox'</span>).load(&#123;</span><br><span class=\"line\">    <span class=\"string\">'px.jpg'</span>, <span class=\"string\">'nx.jpg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'py.jpg'</span>, <span class=\"string\">'ny.jpg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pz.jpg'</span>, <span class=\"string\">'nz.jpg'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">scene.background = cubeTexture;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h3 id=\"光源Lights\"><a href=\"#光源Lights\" class=\"headerlink\" title=\"光源Lights\"></a>光源Lights</h3><p>为了让图片看起来更加立体真实，通常需要增加一些光线。<br><strong>注意：</strong>只有部分的材质会受到光照的影响，比如MeshPhongMaterial、MeshLambertMaterial等，如MeshBasicMaterial是不会受到光照影响的。 </p>\n<h4 id=\"1-环境光（AmbientLight）\"><a href=\"#1-环境光（AmbientLight）\" class=\"headerlink\" title=\"1. 环境光（AmbientLight）\"></a>1. 环境光（AmbientLight）</h4><p>这种光应用到全局范围内的所有对象，可用于提高全局亮度，弱化阴影，给全局添加一个基调色。<br><figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">THREE</span>.<span class=\"title\">AmbientLight</span>(color, instensity); <span class=\"comment\">// 创建一个给定颜色和强度的环境光</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">scene</span>.<span class=\"title\">add</span>(light);</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2-平行光（DirectionalLight）\"><a href=\"#2-平行光（DirectionalLight）\" class=\"headerlink\" title=\"2. 平行光（DirectionalLight）\"></a>2. 平行光（DirectionalLight）</h4><p>产生平行的光线，当材质为<code>MeshLambertMaterial</code>或<code>MeshPhongMaterial</code>时才会受到影响。<br><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> light = <span class=\"keyword\">new</span> <span class=\"type\">THREE</span>.DirectionalLight(hex, instensity)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"3-点光源（PointLight）\"><a href=\"#3-点光源（PointLight）\" class=\"headerlink\" title=\"3. 点光源（PointLight）\"></a>3. 点光源（PointLight）</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> hex：颜色的RGB值，如0x333333</span><br><span class=\"line\"><span class=\"bullet\">* </span>intensity：光强，optional</span><br><span class=\"line\"><span class=\"bullet\">* </span>distance：光照为0处到光源的距离，0表示到无穷远处为0，默认值，optional</span><br><span class=\"line\"><span class=\"bullet\">* </span>decay：沿着光照距离的衰退量，为2时实现现实世界的光衰减，缺省为1，optional</span><br><span class=\"line\"><span class=\"strong\">*/</span></span><br><span class=\"line\"><span class=\"strong\">var light = new THREE.PointLight(hex, intensity, distance, decay)</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PointLight和DirectionalLight常用属性\"><a href=\"#PointLight和DirectionalLight常用属性\" class=\"headerlink\" title=\"PointLight和DirectionalLight常用属性\"></a>PointLight和DirectionalLight常用属性</h4><table>\n<thead>\n<tr>\n<th>常用属性</th>\n<th>默认值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>target</td>\n<td>-</td>\n<td>阴影相机定位的目标，必须为THREE.Object3D对象（如THREE.Mesh）</td>\n</tr>\n<tr>\n<td>penumbra</td>\n<td>0.0</td>\n<td>聚光锥的半影衰减百分比[0, 1]</td>\n</tr>\n<tr>\n<td>shadow</td>\n<td>-</td>\n<td>用于存储光照阴影的所有信息，具体属性可参考<a href=\"http://techbrood.com/threejs/docs/#%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/%E5%85%89%E7%85%A7(Lights\" target=\"_blank\" rel=\"noopener\">光照阴影</a>/%E5%85%89%E7%85%A7%E9%98%B4%E5%BD%B1(LightShadow))</td>\n</tr>\n<tr>\n<td>castShadow</td>\n<td>false</td>\n<td>是否投射动态阴影，<font color=\"tomato\"><em>很耗费计算资源</em></font></td>\n</tr>\n</tbody>\n</table>\n"},{"layout":"posts","title":"React前置知识01：SASS和COMPASS","date":"2018-08-10T11:49:23.000Z","toc":true,"comments":1,"description":"React前置知识01：SASS和COMPASS","_content":"\n## Sass与Compass \n1. Compass是Sass基础上二次开发的工具。\n2. **优点**：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。\n3. **应用场景**：重构时自动化CSS；项目周期内更好组织项目内容。\n \n#### .sass和.scss\n```\n// .sass：类ruby语法，空格敏感\nh1\n    color: #000\n    background: #fff\n \n// .scss：类css语法，花括号\nh1 {color: red;}\n```\n \n## Sass\n#### sass安装及使用\n1. 安装ruby和rvm（可选，用于版本管理）\n2. 通过gem(ruby安装自带的一个包管理器)安装sass。  \n```\ngem sources -l // 显示当前的源\ngem sources --remove ... // 删除源...\ngem sources -a ... // 添加源..\ngem install sass // 安装sass\ngem install sass --version=3.5.6 // 安装版本为3.5.6的sass\ngem uninstall sass // 卸载sass\n```\n \n#### sass语法介绍\n```\nsass main.scss main.css // 编译成css文件\nsass-convert main.scss main.sass // .sass和.scss\n```\n1. 变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；\n    ```\n    $headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;\n    ```\n2. 文件引入`@import`：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过`import`引入。\n    ```\n    @import \"variables\";\n    // 多个import可用,分割\n    @import \"variables\", \"compass/reset\";\n    ```\n    ==注意==：这里的`@import`并不是css原生的`@import`（缺点：CSS原生的`@import`必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。\n    ```\n    以下情况使用的是css原生import\n    1. 文件名为.css结尾\n    @import \"variables.css\";\n    2. \"http://\"开头的字符串\n    @import \"http://variables.css\";\n    3. url()函数\n    @import url(\"variables.css\");\n    4. 跟有media queries\n    @import \"variables\" projection tv;\n    ```\n3. 嵌套语法和父类选择器\n    ```\n    // 类的嵌套\n    .head {\n        .content { color: red; }\n        &:hover { background: green; } // 父类选择器&\n        font: { // 属性嵌套\n            family: Arial;\n            size: 16px;\n        }\n    }\n    ```\n4. 变量操作\n    - 操作方式\n        - 直接操作变量，即变量表达式；\n        - 通过函数操作，函数包含以下几种：\n            - functions：跟代码块无关的函数，多为内置函数\n            - 可重用的代码块（类似于C中的宏macro）\n                - 使用时以复制拷贝的方式存在，称为mixin，通过@include调用\n                - 使用时以组合声明的形式存在，通过@extend调用\n    - 支持的运算操作符包含：`<,>,<=,>=,!=, ==, ()`。sass中的数值计算可以带单位，所以单位并不能混用。\n    - sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。\n    - mixin代码块的声明：一般放在页面顶部`@import`之后，或者单独抽离出一个文件，引入方法如下：  \n        ```\n        @mixin col-6 {\n            width: 50%;\n            float: left;\n        }\n        .webdemo {\n            @include col-6();\n        }\n \n        // 一种可以实现但是不建议的方法，\n        // 规范建议类名最好有语义化的作用，而非视觉化\n        @mixin col-6 {\n            .col-6 {\n                width: 50%;\n                float: left;\n            }\n        }\n \n        @include col-6();\n \n        // 带参数的mixin, 50%为默认参数\n        @mixin col ($width: 50%) {\n            width: $width;\n            float: left;\n        }\n        ```\n    - 组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。\n        ```\n        .error.instruction {\n            color: #0f0;\n        }\n \n        .error {\n            color: #f00;\n        }\n \n        .serious-error {\n            @extend .error;\n            border: 1px #f00;\n        }\n \n        <div class=\"serious-error instruction\">serious</div> // #0f0\n        ```\n        **注意**：extend不能继承选择器序列（即`@extend .A .B`不可行，会报错）；使用%可构建仅用于继承的选择器（`%name {...}`），不会出现在生成文件中。   \n \n5. sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  \n \n6. sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：\n     - 浏览器解析css文件是按照从右往左的顺序。即对于`.main .headline`会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  \n     - 增加了样式修饰的权重；\n     - 制造了样式位置的依赖；  \n \n    最佳实践是在命名的时候对类名进行语义化的命名，比如`.main-headline`，同时为了保留嵌套清晰易维护的优点，可以通过`at-root`指令指明将嵌套的内容输出到样式表顶层。   \n \n7. mixin的参数校验示例\n    ```\n    @mixin col-sm ($width: 50%) {\n        /*输入校验*/\n        @if type-of($width) != number {\n            @error \"$width必须是一个数值类型，目前输入的width是#{$width}.\";\n        }\n \n        @if not unitless($width) { /* 没有单位 */\n            @if unit($width) != \"%\" {\n                @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            }\n        } @else {\n            @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/\n        }\n        @media (min-width: 768px) {\n            width: $width;\n            float: left;\n        } \n    }\n    ```\n8. sass的四种输出格式`config.rb`中的`output_style`：\n    - expanded：默认，样式展开，与手动书写css习惯一致；\n    - nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；\n    - compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；\n    - compressed：样式表压缩以占用最少的空间。\n \n9. 其他：`@each` `@for` `@while`\n \n10. 常用网址\n    - Sass中的functions详情页：http://sass-lang.com/documentation/Sass/Script/Functions.html\n    - Sass和Compass必备技能之Sass篇（视频教程）：https://www.imooc.com/video/7155\n \n## Compass\n#### compass安装及使用\n1. 通过`gem install compass`即可安装成功\n2. Compass目录创建  \n```\ncompass create file-name // 初始化工作目录，file-name为生成的文件名\n```\n3. 目录结构  \n```\nsass：\n    - _*.scss：用于被其他sass文件引入，不会被单独编译\n    - *.scss：会被单独编译\n    注意：同一目录下，局部文件和非局部文件不能重名\nstylesheets：sass文件编译生成的css文件\nconfig.rb：配置项目文件\n```\n4. 命令\n```\ncompass compile [path/to/project] // 按需编译\ncompass watch [path/to/project] // 监听目录编译\n```\n#### compass核心模块\nCSS3、Helpers、Typography、Utilities模块通过`@import \"compass\"`就可以直接引入；而Reset和Layout模块需要分别通过`@import \"compass/reset\"`和`@import \"compass/layout`明确指定引入。  \n- CSS3：跨浏览器的CSS3兼容能力  \n- Helpers：内含多函数，比较少用到  \n- Typography：修饰文本样式  \n- Utilities：辅助工具模块，多为mixins  \n- Reset：浏览器样式重置模块  \n- Layout：提供对页面布局的控制 \n \n除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    \n\n1. **reset模块**\n    所有包含的模块可见：http://compass-style.org/reference/compass/reset/utilities/  \n    可以通过调用mixins来调用不同的模块。   \n```\n    // 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：\n    .test {\n        @include nested-reset;\n    }\n\n    // 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：\n    // 第一个参数为选择器，第二个参数为是否强制覆盖（!important）\n    @include reset-display('.test', true); \n```\n\n    ==使用normalize替代==\n\n    ```\n    gem install compass-normalize # 下载normalize\n    require 'compass-normalize' # 在config.rb引入\n\n    @import \"normalize\"; # 在scss文件中替换reset\n    ```\n\n    normalize核心模块本身包含八个部分：\n    - base: body和html标签的字体文字大小边距等\n    - html5: 统一html5中新增的元素样式，如article、section的展现形式\n    - links: 统一a标签的展示形式，去掉hover和active时的下划线\n    - typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰\n    - embeds: img, svg等\n    - groups: figure, pre, code等\n    - forms: form相关的button, input, textarea等\n    - tables: table相关table, td, th等\n    这八个部分可以通过子路径单独引入，如`@import \"normalize/base\";`，通过子类引入的方法需要在前置位置添加`@import \"normalize-version\";`。\n     \n\n2. **layout模块**（使用率低）  \nhttp://compass-style.org/reference/compass/layout/\n内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如`@import \"compass/layout/grid-background\"`的方式显示引入。   \n    - stretch：拉伸填充。通过`@include stretch(top, right, bottom, left)`调用，将元素拉伸填充屏幕，参数可缺省。  \n    - sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。\n    - grid-background: 使用css3中的grid定宽定高自适应宽高   \n   \n\n3. **CSS3模块&Browser Support 模块**     \n    - [CSS3模块](http://compass-style.org/reference/compass/css3/)：封装了CSS3新属性，通过调用对应的新属性即可，如`@include box-shadow(1px 1px 2px 2px #aaa);`，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。\n    - Browser Support模块：通过`@import \"compass/support\"`可直接引入，实际上CSS3已引入了该模块。\n        - `browser()`：通过`@debug browser()`可显示出当前支持的浏览器；\n        - `browser-version('chrome')`：显示当前对应浏览器考虑的所有版本；\n        - `$supported-browsers: chrome firefox`：限制当前支持的浏览器；\n        - `$browser-minmum-versions: (\"ie\": \"8\")`：通过键值对的方法限制最低支持的版本；\n        - `$graceful-usage-threshold=0.1`：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   \n        - `$critical-usage-threshold=0.01`：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      \n           \n\n4. **Typography模块**   \n    - Links\n        - `@include hover-link();`：正常态下去掉下划线，在hover或者focus时才显示\n        - `@include  link-colors(normal, hover, active, visited, focus)`：设置不同状态下的颜色值，只有第一个参数是必须参数\n        - `@include unstyle-link()`：抹平超链接样式\n    - Lists\n        - `@include no-bullets()`： 去掉列表前的list-style，包含ul和li下\n        - `@include no-bullet()`： 去掉单个li元素前的list-style\n        - `@include inline-list()`：使得list横向布局，通过设置为`inline`实现\n        - `@include horizontal-list(padding, float)`：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。\n        - `@include inline-block-list(padding)`：目的同上，通过设置li的display值为inline-block实现。\n        \n    - Text\n        - `@include force-wrap()`：连续长文本强制换行（如url等）\n        - `@include nowrap()`：连续长文本强制不换行，其实等同于`white-space: nowrap;`\n        - `@include ellipsis()`：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装`compass install ellipsis`，通过`$use-mozilla-ellipsis-binding: true;`开启对firefox低版本的支持。   \n        - `@include hide-text()`：隐藏文本，text-indent实现\n        - `@include squish-text()`：隐藏文本，通过font-size/opacity实现\n        - `@include replace-text(url, bg-pos-x, bg-pos-y)`：设置背景图片\n        - `@include replace-text-with-dimensions(本地图片地址)`：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致\n\n    - Vertical Rhythm\n        行内容间的留白，让所有文本元素的高度是基准高的整数倍   \n   \n\n5. **Helpers模块**  \n     Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。\n    - Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。`background-image: inline-image('image.png')` 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。\n    - `image-url('image.png')`：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。`stylesheet-url`和`font-url`用于管理指向CSS目录和font目录的资源文件路径，用法类似。   \n    - `compass-env()`：compass编译环境，只有两个返回值development和production。\n    - `image-width()`和`image-height()`：用于计算图片的宽和高   \n    - `append-selector($selector, $to-append)`：将第二个参数叠加组合到第一个参数中生成学则器。    \n\n   \n6. **Utilities模块**\n   Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：`Color`、`Print`、`Tables`、`General`、`Sprites`。\n    - Color\n        - `brightness($color)`：计算颜色的亮度\n        - contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   \n    - Print\n        必须在两个文件中协同使用，`pirnt.scss`和`screen.scss`都需要引入print模块，主要是应用于适配打印设备。\n        - `print-utilities`：在`screen.scss`中调用需要传参`@include print-utilities(screen)`不传默认为`print.scss`中。\n    - Tables\n        - `outer|inner-tables-borders($width, $color)`：分别用于设置table内外边框\n        - `table-scaffolding()`：单元格文本对齐和padding初始化，`th`居中，`.numberic`右对齐。\n        - `alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)`：对奇偶行|相隔列进行不同的颜色修饰。\n    - General\n        -`clearfix()`：通过在`.clearfix`中设置`overflow:hidden`清除浮动。\n        -`legacy-pie-clearfix()`：通过伪类清除浮动。\n        -`float($\bdirection)`：根据配置设置是否启用对IE6的hack解决double float-margin bug。\n        -`min-height|width($length)`：设置min-height/min-width，兼容IE。\n        -`tag-cloud($baseFontSize)`：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。\n    - Sprites\n        主要是通过`sprite helpers`实现。\n        ```\n        @import \"compass/utilities/sprites;\n        @import \"logo/*.png\";  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */\n        @include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */\n        ```\n        图片引用的方法有两种，一个是直接在对应元素中添加对应类名`logo-imageName`；另一个则是通过`@include logo-sprite(\"imageName\")`的方法。   \n        - 对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为`imageName_hover.png`等，compass就会自动生成对应样式。可通过设置`$disable-magic-sprite-selectors:true`关闭该特性。\n        - `$logo-layout: vertical|horizontal|diagonal|smart`：生成精灵图的布局方式设置。\n\n   \n#### compass其他知识\n1. config.rb中`require 'compass/import-once/activate'`：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import \"compass/reset!\"来引入后面的重复引用文件。  \n2. 当使用`compressed`作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如`/*! hahaha */`来避免被去除。\n3. `@debug`可以在控制台显示出mixins函数等对应的输出，如`@debug browser()`显示出的当前compass支持的浏览器，类似于console.log()的功能；\n4. 通过在控制台输入`compass interactive`可以进入console，直接调用mixins。   \n5. compass生成地址的时候，默认生成的都是绝对地址，认为`config.rb`所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  \n6. `compile compass -e production --force`：强制compass在production环境下编译，也可以在config.rb中配置`environment = :development`。   \n7. 在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。\n","source":"_posts/React前置知识01：SASS和COMPASS.md","raw":"---\nlayout: posts\ntitle: React前置知识01：SASS和COMPASS\ndate: 2018-08-10 19:49:23\ntags: [sass, compass, react]\ncategory: notes\ntoc: true\ncomments: true\ndescription: React前置知识01：SASS和COMPASS\n---\n\n## Sass与Compass \n1. Compass是Sass基础上二次开发的工具。\n2. **优点**：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。\n3. **应用场景**：重构时自动化CSS；项目周期内更好组织项目内容。\n \n#### .sass和.scss\n```\n// .sass：类ruby语法，空格敏感\nh1\n    color: #000\n    background: #fff\n \n// .scss：类css语法，花括号\nh1 {color: red;}\n```\n \n## Sass\n#### sass安装及使用\n1. 安装ruby和rvm（可选，用于版本管理）\n2. 通过gem(ruby安装自带的一个包管理器)安装sass。  \n```\ngem sources -l // 显示当前的源\ngem sources --remove ... // 删除源...\ngem sources -a ... // 添加源..\ngem install sass // 安装sass\ngem install sass --version=3.5.6 // 安装版本为3.5.6的sass\ngem uninstall sass // 卸载sass\n```\n \n#### sass语法介绍\n```\nsass main.scss main.css // 编译成css文件\nsass-convert main.scss main.sass // .sass和.scss\n```\n1. 变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；\n    ```\n    $headline-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;\n    ```\n2. 文件引入`@import`：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过`import`引入。\n    ```\n    @import \"variables\";\n    // 多个import可用,分割\n    @import \"variables\", \"compass/reset\";\n    ```\n    ==注意==：这里的`@import`并不是css原生的`@import`（缺点：CSS原生的`@import`必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。\n    ```\n    以下情况使用的是css原生import\n    1. 文件名为.css结尾\n    @import \"variables.css\";\n    2. \"http://\"开头的字符串\n    @import \"http://variables.css\";\n    3. url()函数\n    @import url(\"variables.css\");\n    4. 跟有media queries\n    @import \"variables\" projection tv;\n    ```\n3. 嵌套语法和父类选择器\n    ```\n    // 类的嵌套\n    .head {\n        .content { color: red; }\n        &:hover { background: green; } // 父类选择器&\n        font: { // 属性嵌套\n            family: Arial;\n            size: 16px;\n        }\n    }\n    ```\n4. 变量操作\n    - 操作方式\n        - 直接操作变量，即变量表达式；\n        - 通过函数操作，函数包含以下几种：\n            - functions：跟代码块无关的函数，多为内置函数\n            - 可重用的代码块（类似于C中的宏macro）\n                - 使用时以复制拷贝的方式存在，称为mixin，通过@include调用\n                - 使用时以组合声明的形式存在，通过@extend调用\n    - 支持的运算操作符包含：`<,>,<=,>=,!=, ==, ()`。sass中的数值计算可以带单位，所以单位并不能混用。\n    - sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。\n    - mixin代码块的声明：一般放在页面顶部`@import`之后，或者单独抽离出一个文件，引入方法如下：  \n        ```\n        @mixin col-6 {\n            width: 50%;\n            float: left;\n        }\n        .webdemo {\n            @include col-6();\n        }\n \n        // 一种可以实现但是不建议的方法，\n        // 规范建议类名最好有语义化的作用，而非视觉化\n        @mixin col-6 {\n            .col-6 {\n                width: 50%;\n                float: left;\n            }\n        }\n \n        @include col-6();\n \n        // 带参数的mixin, 50%为默认参数\n        @mixin col ($width: 50%) {\n            width: $width;\n            float: left;\n        }\n        ```\n    - 组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。\n        ```\n        .error.instruction {\n            color: #0f0;\n        }\n \n        .error {\n            color: #f00;\n        }\n \n        .serious-error {\n            @extend .error;\n            border: 1px #f00;\n        }\n \n        <div class=\"serious-error instruction\">serious</div> // #0f0\n        ```\n        **注意**：extend不能继承选择器序列（即`@extend .A .B`不可行，会报错）；使用%可构建仅用于继承的选择器（`%name {...}`），不会出现在生成文件中。   \n \n5. sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  \n \n6. sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：\n     - 浏览器解析css文件是按照从右往左的顺序。即对于`.main .headline`会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  \n     - 增加了样式修饰的权重；\n     - 制造了样式位置的依赖；  \n \n    最佳实践是在命名的时候对类名进行语义化的命名，比如`.main-headline`，同时为了保留嵌套清晰易维护的优点，可以通过`at-root`指令指明将嵌套的内容输出到样式表顶层。   \n \n7. mixin的参数校验示例\n    ```\n    @mixin col-sm ($width: 50%) {\n        /*输入校验*/\n        @if type-of($width) != number {\n            @error \"$width必须是一个数值类型，目前输入的width是#{$width}.\";\n        }\n \n        @if not unitless($width) { /* 没有单位 */\n            @if unit($width) != \"%\" {\n                @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            }\n        } @else {\n            @warn \"$width必须是一个百分值，目前输入的width是#{$width}.\";\n            $width: (percentage($width) / 100); /*数值变成百分号表示形式时会增加100倍*/\n        }\n        @media (min-width: 768px) {\n            width: $width;\n            float: left;\n        } \n    }\n    ```\n8. sass的四种输出格式`config.rb`中的`output_style`：\n    - expanded：默认，样式展开，与手动书写css习惯一致；\n    - nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；\n    - compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；\n    - compressed：样式表压缩以占用最少的空间。\n \n9. 其他：`@each` `@for` `@while`\n \n10. 常用网址\n    - Sass中的functions详情页：http://sass-lang.com/documentation/Sass/Script/Functions.html\n    - Sass和Compass必备技能之Sass篇（视频教程）：https://www.imooc.com/video/7155\n \n## Compass\n#### compass安装及使用\n1. 通过`gem install compass`即可安装成功\n2. Compass目录创建  \n```\ncompass create file-name // 初始化工作目录，file-name为生成的文件名\n```\n3. 目录结构  \n```\nsass：\n    - _*.scss：用于被其他sass文件引入，不会被单独编译\n    - *.scss：会被单独编译\n    注意：同一目录下，局部文件和非局部文件不能重名\nstylesheets：sass文件编译生成的css文件\nconfig.rb：配置项目文件\n```\n4. 命令\n```\ncompass compile [path/to/project] // 按需编译\ncompass watch [path/to/project] // 监听目录编译\n```\n#### compass核心模块\nCSS3、Helpers、Typography、Utilities模块通过`@import \"compass\"`就可以直接引入；而Reset和Layout模块需要分别通过`@import \"compass/reset\"`和`@import \"compass/layout`明确指定引入。  \n- CSS3：跨浏览器的CSS3兼容能力  \n- Helpers：内含多函数，比较少用到  \n- Typography：修饰文本样式  \n- Utilities：辅助工具模块，多为mixins  \n- Reset：浏览器样式重置模块  \n- Layout：提供对页面布局的控制 \n \n除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    \n\n1. **reset模块**\n    所有包含的模块可见：http://compass-style.org/reference/compass/reset/utilities/  \n    可以通过调用mixins来调用不同的模块。   \n```\n    // 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：\n    .test {\n        @include nested-reset;\n    }\n\n    // 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：\n    // 第一个参数为选择器，第二个参数为是否强制覆盖（!important）\n    @include reset-display('.test', true); \n```\n\n    ==使用normalize替代==\n\n    ```\n    gem install compass-normalize # 下载normalize\n    require 'compass-normalize' # 在config.rb引入\n\n    @import \"normalize\"; # 在scss文件中替换reset\n    ```\n\n    normalize核心模块本身包含八个部分：\n    - base: body和html标签的字体文字大小边距等\n    - html5: 统一html5中新增的元素样式，如article、section的展现形式\n    - links: 统一a标签的展示形式，去掉hover和active时的下划线\n    - typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰\n    - embeds: img, svg等\n    - groups: figure, pre, code等\n    - forms: form相关的button, input, textarea等\n    - tables: table相关table, td, th等\n    这八个部分可以通过子路径单独引入，如`@import \"normalize/base\";`，通过子类引入的方法需要在前置位置添加`@import \"normalize-version\";`。\n     \n\n2. **layout模块**（使用率低）  \nhttp://compass-style.org/reference/compass/layout/\n内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如`@import \"compass/layout/grid-background\"`的方式显示引入。   \n    - stretch：拉伸填充。通过`@include stretch(top, right, bottom, left)`调用，将元素拉伸填充屏幕，参数可缺省。  \n    - sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。\n    - grid-background: 使用css3中的grid定宽定高自适应宽高   \n   \n\n3. **CSS3模块&Browser Support 模块**     \n    - [CSS3模块](http://compass-style.org/reference/compass/css3/)：封装了CSS3新属性，通过调用对应的新属性即可，如`@include box-shadow(1px 1px 2px 2px #aaa);`，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。\n    - Browser Support模块：通过`@import \"compass/support\"`可直接引入，实际上CSS3已引入了该模块。\n        - `browser()`：通过`@debug browser()`可显示出当前支持的浏览器；\n        - `browser-version('chrome')`：显示当前对应浏览器考虑的所有版本；\n        - `$supported-browsers: chrome firefox`：限制当前支持的浏览器；\n        - `$browser-minmum-versions: (\"ie\": \"8\")`：通过键值对的方法限制最低支持的版本；\n        - `$graceful-usage-threshold=0.1`：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   \n        - `$critical-usage-threshold=0.01`：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      \n           \n\n4. **Typography模块**   \n    - Links\n        - `@include hover-link();`：正常态下去掉下划线，在hover或者focus时才显示\n        - `@include  link-colors(normal, hover, active, visited, focus)`：设置不同状态下的颜色值，只有第一个参数是必须参数\n        - `@include unstyle-link()`：抹平超链接样式\n    - Lists\n        - `@include no-bullets()`： 去掉列表前的list-style，包含ul和li下\n        - `@include no-bullet()`： 去掉单个li元素前的list-style\n        - `@include inline-list()`：使得list横向布局，通过设置为`inline`实现\n        - `@include horizontal-list(padding, float)`：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。\n        - `@include inline-block-list(padding)`：目的同上，通过设置li的display值为inline-block实现。\n        \n    - Text\n        - `@include force-wrap()`：连续长文本强制换行（如url等）\n        - `@include nowrap()`：连续长文本强制不换行，其实等同于`white-space: nowrap;`\n        - `@include ellipsis()`：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装`compass install ellipsis`，通过`$use-mozilla-ellipsis-binding: true;`开启对firefox低版本的支持。   \n        - `@include hide-text()`：隐藏文本，text-indent实现\n        - `@include squish-text()`：隐藏文本，通过font-size/opacity实现\n        - `@include replace-text(url, bg-pos-x, bg-pos-y)`：设置背景图片\n        - `@include replace-text-with-dimensions(本地图片地址)`：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致\n\n    - Vertical Rhythm\n        行内容间的留白，让所有文本元素的高度是基准高的整数倍   \n   \n\n5. **Helpers模块**  \n     Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。\n    - Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。`background-image: inline-image('image.png')` 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。\n    - `image-url('image.png')`：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。`stylesheet-url`和`font-url`用于管理指向CSS目录和font目录的资源文件路径，用法类似。   \n    - `compass-env()`：compass编译环境，只有两个返回值development和production。\n    - `image-width()`和`image-height()`：用于计算图片的宽和高   \n    - `append-selector($selector, $to-append)`：将第二个参数叠加组合到第一个参数中生成学则器。    \n\n   \n6. **Utilities模块**\n   Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：`Color`、`Print`、`Tables`、`General`、`Sprites`。\n    - Color\n        - `brightness($color)`：计算颜色的亮度\n        - contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   \n    - Print\n        必须在两个文件中协同使用，`pirnt.scss`和`screen.scss`都需要引入print模块，主要是应用于适配打印设备。\n        - `print-utilities`：在`screen.scss`中调用需要传参`@include print-utilities(screen)`不传默认为`print.scss`中。\n    - Tables\n        - `outer|inner-tables-borders($width, $color)`：分别用于设置table内外边框\n        - `table-scaffolding()`：单元格文本对齐和padding初始化，`th`居中，`.numberic`右对齐。\n        - `alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)`：对奇偶行|相隔列进行不同的颜色修饰。\n    - General\n        -`clearfix()`：通过在`.clearfix`中设置`overflow:hidden`清除浮动。\n        -`legacy-pie-clearfix()`：通过伪类清除浮动。\n        -`float($\bdirection)`：根据配置设置是否启用对IE6的hack解决double float-margin bug。\n        -`min-height|width($length)`：设置min-height/min-width，兼容IE。\n        -`tag-cloud($baseFontSize)`：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。\n    - Sprites\n        主要是通过`sprite helpers`实现。\n        ```\n        @import \"compass/utilities/sprites;\n        @import \"logo/*.png\";  /* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */\n        @include all-logo-sprites();   /* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */\n        ```\n        图片引用的方法有两种，一个是直接在对应元素中添加对应类名`logo-imageName`；另一个则是通过`@include logo-sprite(\"imageName\")`的方法。   \n        - 对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为`imageName_hover.png`等，compass就会自动生成对应样式。可通过设置`$disable-magic-sprite-selectors:true`关闭该特性。\n        - `$logo-layout: vertical|horizontal|diagonal|smart`：生成精灵图的布局方式设置。\n\n   \n#### compass其他知识\n1. config.rb中`require 'compass/import-once/activate'`：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import \"compass/reset!\"来引入后面的重复引用文件。  \n2. 当使用`compressed`作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如`/*! hahaha */`来避免被去除。\n3. `@debug`可以在控制台显示出mixins函数等对应的输出，如`@debug browser()`显示出的当前compass支持的浏览器，类似于console.log()的功能；\n4. 通过在控制台输入`compass interactive`可以进入console，直接调用mixins。   \n5. compass生成地址的时候，默认生成的都是绝对地址，认为`config.rb`所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  \n6. `compile compass -e production --force`：强制compass在production环境下编译，也可以在config.rb中配置`environment = :development`。   \n7. 在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。\n","slug":"React前置知识01：SASS和COMPASS","published":1,"updated":"2019-02-25T06:42:46.030Z","photos":[],"link":"","_id":"cjt8ew04z0006yn7o1nrwleqm","content":"<h2 id=\"Sass与Compass\"><a href=\"#Sass与Compass\" class=\"headerlink\" title=\"Sass与Compass\"></a>Sass与Compass</h2><ol>\n<li>Compass是Sass基础上二次开发的工具。</li>\n<li><strong>优点</strong>：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。</li>\n<li><strong>应用场景</strong>：重构时自动化CSS；项目周期内更好组织项目内容。</li>\n</ol>\n<h4 id=\"sass和-scss\"><a href=\"#sass和-scss\" class=\"headerlink\" title=\".sass和.scss\"></a>.sass和.scss</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .sass：类ruby语法，空格敏感</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// .scss：类css语法，花括号</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h2><h4 id=\"sass安装及使用\"><a href=\"#sass安装及使用\" class=\"headerlink\" title=\"sass安装及使用\"></a>sass安装及使用</h4><ol>\n<li>安装ruby和rvm（可选，用于版本管理）</li>\n<li>通过gem(ruby安装自带的一个包管理器)安装sass。  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l <span class=\"string\">//</span> 显示当前的源</span><br><span class=\"line\">gem sources <span class=\"params\">--remove</span> <span class=\"string\">...</span> <span class=\"string\">//</span> 删除源<span class=\"string\">...</span></span><br><span class=\"line\">gem sources -a <span class=\"string\">...</span> <span class=\"string\">//</span> 添加源<span class=\"string\">..</span></span><br><span class=\"line\">gem install sass <span class=\"string\">//</span> 安装sass</span><br><span class=\"line\">gem install sass <span class=\"params\">--version=3</span>.5.6 <span class=\"string\">//</span> 安装版本为3.5.6的sass</span><br><span class=\"line\">gem uninstall sass <span class=\"string\">//</span> 卸载sass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sass语法介绍\"><a href=\"#sass语法介绍\" class=\"headerlink\" title=\"sass语法介绍\"></a>sass语法介绍</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass main<span class=\"selector-class\">.scss</span> main<span class=\"selector-class\">.css</span> <span class=\"comment\">// 编译成css文件</span></span><br><span class=\"line\">sass-convert main<span class=\"selector-class\">.scss</span> main<span class=\"selector-class\">.sass</span> <span class=\"comment\">// .sass和.scss</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；</p>\n <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$headline</span>-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件引入<code>@import</code>：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过<code>import</code>引入。</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 多个import可用,分割</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span>, <span class=\"string\">\"compass/reset\"</span>;</span><br></pre></td></tr></table></figure>\n<p> ==注意==：这里的<code>@import</code>并不是css原生的<code>@import</code>（缺点：CSS原生的<code>@import</code>必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。</p>\n <figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下情况使用的是css原生<span class=\"keyword\">import</span></span><br><span class=\"line\"><span class=\"number\">1</span>. 文件名为.css结尾</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables.css\"</span>;</span><br><span class=\"line\"><span class=\"number\">2</span>. <span class=\"string\">\"http://\"</span>开头的字符串</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"http://variables.css\"</span>;</span><br><span class=\"line\"><span class=\"number\">3</span>. url()函数</span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"variables.css\"</span>);</span><br><span class=\"line\"><span class=\"number\">4</span>. 跟有media queries</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span> projection tv;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套语法和父类选择器</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的嵌套</span></span><br><span class=\"line\"><span class=\"selector-class\">.head</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.content</span> &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">    &amp;:hover &#123; <span class=\"attribute\">background</span>: green; &#125; <span class=\"comment\">// 父类选择器&amp;</span></span><br><span class=\"line\">    <span class=\"attribute\">font</span>: &#123; // 属性嵌套</span><br><span class=\"line\">        family: Arial;</span><br><span class=\"line\">        size: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量操作</p>\n<ul>\n<li>操作方式<ul>\n<li>直接操作变量，即变量表达式；</li>\n<li>通过函数操作，函数包含以下几种：<ul>\n<li>functions：跟代码块无关的函数，多为内置函数</li>\n<li>可重用的代码块（类似于C中的宏macro）<ul>\n<li>使用时以复制拷贝的方式存在，称为mixin，通过@include调用</li>\n<li>使用时以组合声明的形式存在，通过@extend调用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持的运算操作符包含：<code>&lt;,&gt;,&lt;=,&gt;=,!=, ==, ()</code>。sass中的数值计算可以带单位，所以单位并不能混用。</li>\n<li>sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。</li>\n<li><p>mixin代码块的声明：一般放在页面顶部<code>@import</code>之后，或者单独抽离出一个文件，引入方法如下：  </p>\n  <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> col-6 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.webdemo</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> col-6();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 一种可以实现但是不建议的方法，</span></span><br><span class=\"line\"><span class=\"comment\">// 规范建议类名最好有语义化的作用，而非视觉化</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> col-6 &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.col-6</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@<span class=\"keyword\">include</span> col-6();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 带参数的mixin, 50%为默认参数</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> col (<span class=\"variable\">$width</span>: 50%) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。</p>\n  <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error.<span class=\"class\">instruction </span>&#123;</span><br><span class=\"line\"><span class=\"symbol\">    color:</span> <span class=\"meta\">#0f0;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.<span class=\"class\">error </span>&#123;</span><br><span class=\"line\"><span class=\"symbol\">    color:</span> <span class=\"meta\">#f00;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.serious-<span class=\"class\">error </span>&#123;</span><br><span class=\"line\">    @extend .error;</span><br><span class=\"line\"><span class=\"symbol\">    border:</span> <span class=\"number\">1</span>px <span class=\"meta\">#f00;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"params\">&lt;div class=\"serious-error instruction\"&gt;</span>serious<span class=\"params\">&lt;/div&gt;</span> <span class=\"comment\">// #0f0</span></span><br></pre></td></tr></table></figure>\n<p>  <strong>注意</strong>：extend不能继承选择器序列（即<code>@extend .A .B</code>不可行，会报错）；使用%可构建仅用于继承的选择器（<code>%name {...}</code>），不会出现在生成文件中。   </p>\n</li>\n</ul>\n</li>\n<li><p>sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  </p>\n</li>\n<li><p>sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：</p>\n<ul>\n<li>浏览器解析css文件是按照从右往左的顺序。即对于<code>.main .headline</code>会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  </li>\n<li>增加了样式修饰的权重；</li>\n<li><p>制造了样式位置的依赖；  </p>\n<p>最佳实践是在命名的时候对类名进行语义化的命名，比如<code>.main-headline</code>，同时为了保留嵌套清晰易维护的优点，可以通过<code>at-root</code>指令指明将嵌套的内容输出到样式表顶层。   </p>\n</li>\n</ul>\n</li>\n<li><p>mixin的参数校验示例</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> col-sm (<span class=\"variable\">$width</span>: 50%) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*输入校验*/</span></span><br><span class=\"line\">    @<span class=\"keyword\">if</span> type-of(<span class=\"variable\">$width</span>) != number &#123;</span><br><span class=\"line\">        @error <span class=\"string\">\"$width必须是一个数值类型，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @<span class=\"keyword\">if</span> not unitless(<span class=\"variable\">$width</span>) &#123; <span class=\"comment\">/* 没有单位 */</span></span><br><span class=\"line\">        @<span class=\"keyword\">if</span> unit(<span class=\"variable\">$width</span>) != <span class=\"string\">\"%\"</span> &#123;</span><br><span class=\"line\">            @<span class=\"keyword\">warn</span> <span class=\"string\">\"$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">warn</span> <span class=\"string\">\"$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">        <span class=\"variable\">$width</span>: (percentage(<span class=\"variable\">$width</span>) / <span class=\"number\">100</span>); <span class=\"comment\">/*数值变成百分号表示形式时会增加100倍*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">media</span> (min-width: 768px) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sass的四种输出格式<code>config.rb</code>中的<code>output_style</code>：</p>\n<ul>\n<li>expanded：默认，样式展开，与手动书写css习惯一致；</li>\n<li>nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；</li>\n<li>compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；</li>\n<li>compressed：样式表压缩以占用最少的空间。</li>\n</ul>\n</li>\n<li><p>其他：<code>@each</code> <code>@for</code> <code>@while</code></p>\n</li>\n<li><p>常用网址</p>\n<ul>\n<li>Sass中的functions详情页：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/documentation/Sass/Script/Functions.html</a></li>\n<li>Sass和Compass必备技能之Sass篇（视频教程）：<a href=\"https://www.imooc.com/video/7155\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/7155</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Compass\"><a href=\"#Compass\" class=\"headerlink\" title=\"Compass\"></a>Compass</h2><h4 id=\"compass安装及使用\"><a href=\"#compass安装及使用\" class=\"headerlink\" title=\"compass安装及使用\"></a>compass安装及使用</h4><ol>\n<li>通过<code>gem install compass</code>即可安装成功</li>\n<li><p>Compass目录创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass <span class=\"keyword\">create</span> <span class=\"keyword\">file</span>-<span class=\"keyword\">name</span> // 初始化工作目录，<span class=\"keyword\">file</span>-<span class=\"keyword\">name</span>为生成的文件名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构  </p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass：</span><br><span class=\"line\">    -<span class=\"ruby\"> <span class=\"number\">_</span>*.scss：用于被其他sass文件引入，不会被单独编译</span></span><br><span class=\"line\"><span class=\"ruby\">    - *.scss：会被单独编译</span></span><br><span class=\"line\"><span class=\"ruby\">    注意：同一目录下，局部文件和非局部文件不能重名</span></span><br><span class=\"line\"><span class=\"ruby\">stylesheets：sass文件编译生成的css文件</span></span><br><span class=\"line\"><span class=\"ruby\">config.rb：配置项目文件</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass <span class=\"keyword\">compile</span> [path<span class=\"regexp\">/to/</span><span class=\"keyword\">project</span>] <span class=\"comment\">// 按需编译</span></span><br><span class=\"line\">compass watch [path<span class=\"regexp\">/to/</span><span class=\"keyword\">project</span>] <span class=\"comment\">// 监听目录编译</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"compass核心模块\"><a href=\"#compass核心模块\" class=\"headerlink\" title=\"compass核心模块\"></a>compass核心模块</h4><p>CSS3、Helpers、Typography、Utilities模块通过<code>@import &quot;compass&quot;</code>就可以直接引入；而Reset和Layout模块需要分别通过<code>@import &quot;compass/reset&quot;</code>和<code>@import &quot;compass/layout</code>明确指定引入。  </p>\n<ul>\n<li>CSS3：跨浏览器的CSS3兼容能力  </li>\n<li>Helpers：内含多函数，比较少用到  </li>\n<li>Typography：修饰文本样式  </li>\n<li>Utilities：辅助工具模块，多为mixins  </li>\n<li>Reset：浏览器样式重置模块  </li>\n<li>Layout：提供对页面布局的控制 </li>\n</ul>\n<p>除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    </p>\n<ol>\n<li><p><strong>reset模块</strong><br> 所有包含的模块可见：<a href=\"http://compass-style.org/reference/compass/reset/utilities/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/reset/utilities/</a><br> 可以通过调用mixins来调用不同的模块。   </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@include</span> nested-reset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为选择器，第二个参数为是否强制覆盖（!important）</span></span><br><span class=\"line\"><span class=\"variable\">@include</span> reset-display(<span class=\"string\">'.test'</span>, true);</span><br></pre></td></tr></table></figure>\n<p> ==使用normalize替代==</p>\n <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install compass-normalize <span class=\"comment\"># 下载normalize</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'compass-normalize'</span> <span class=\"comment\"># 在config.rb引入</span></span><br><span class=\"line\"></span><br><span class=\"line\">@import <span class=\"string\">\"normalize\"</span>; <span class=\"comment\"># 在scss文件中替换reset</span></span><br></pre></td></tr></table></figure>\n<p> normalize核心模块本身包含八个部分：</p>\n<ul>\n<li>base: body和html标签的字体文字大小边距等</li>\n<li>html5: 统一html5中新增的元素样式，如article、section的展现形式</li>\n<li>links: 统一a标签的展示形式，去掉hover和active时的下划线</li>\n<li>typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰</li>\n<li>embeds: img, svg等</li>\n<li>groups: figure, pre, code等</li>\n<li>forms: form相关的button, input, textarea等</li>\n<li>tables: table相关table, td, th等<br>这八个部分可以通过子路径单独引入，如<code>@import &quot;normalize/base&quot;;</code>，通过子类引入的方法需要在前置位置添加<code>@import &quot;normalize-version&quot;;</code>。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>layout模块</strong>（使用率低）<br><a href=\"http://compass-style.org/reference/compass/layout/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/layout/</a><br>内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如<code>@import &quot;compass/layout/grid-background&quot;</code>的方式显示引入。   <ul>\n<li>stretch：拉伸填充。通过<code>@include stretch(top, right, bottom, left)</code>调用，将元素拉伸填充屏幕，参数可缺省。  </li>\n<li>sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。</li>\n<li>grid-background: 使用css3中的grid定宽定高自适应宽高   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><strong>CSS3模块&amp;Browser Support 模块</strong>     <ul>\n<li><a href=\"http://compass-style.org/reference/compass/css3/\" target=\"_blank\" rel=\"noopener\">CSS3模块</a>：封装了CSS3新属性，通过调用对应的新属性即可，如<code>@include box-shadow(1px 1px 2px 2px #aaa);</code>，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。</li>\n<li>Browser Support模块：通过<code>@import &quot;compass/support&quot;</code>可直接引入，实际上CSS3已引入了该模块。<ul>\n<li><code>browser()</code>：通过<code>@debug browser()</code>可显示出当前支持的浏览器；</li>\n<li><code>browser-version(&#39;chrome&#39;)</code>：显示当前对应浏览器考虑的所有版本；</li>\n<li><code>$supported-browsers: chrome firefox</code>：限制当前支持的浏览器；</li>\n<li><code>$browser-minmum-versions: (&quot;ie&quot;: &quot;8&quot;)</code>：通过键值对的方法限制最低支持的版本；</li>\n<li><code>$graceful-usage-threshold=0.1</code>：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   </li>\n<li><code>$critical-usage-threshold=0.01</code>：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      </li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>Typography模块</strong>   </p>\n<ul>\n<li>Links<ul>\n<li><code>@include hover-link();</code>：正常态下去掉下划线，在hover或者focus时才显示</li>\n<li><code>@include  link-colors(normal, hover, active, visited, focus)</code>：设置不同状态下的颜色值，只有第一个参数是必须参数</li>\n<li><code>@include unstyle-link()</code>：抹平超链接样式</li>\n</ul>\n</li>\n<li><p>Lists</p>\n<ul>\n<li><code>@include no-bullets()</code>： 去掉列表前的list-style，包含ul和li下</li>\n<li><code>@include no-bullet()</code>： 去掉单个li元素前的list-style</li>\n<li><code>@include inline-list()</code>：使得list横向布局，通过设置为<code>inline</code>实现</li>\n<li><code>@include horizontal-list(padding, float)</code>：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。</li>\n<li><code>@include inline-block-list(padding)</code>：目的同上，通过设置li的display值为inline-block实现。</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><code>@include force-wrap()</code>：连续长文本强制换行（如url等）</li>\n<li><code>@include nowrap()</code>：连续长文本强制不换行，其实等同于<code>white-space: nowrap;</code></li>\n<li><code>@include ellipsis()</code>：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装<code>compass install ellipsis</code>，通过<code>$use-mozilla-ellipsis-binding: true;</code>开启对firefox低版本的支持。   </li>\n<li><code>@include hide-text()</code>：隐藏文本，text-indent实现</li>\n<li><code>@include squish-text()</code>：隐藏文本，通过font-size/opacity实现</li>\n<li><code>@include replace-text(url, bg-pos-x, bg-pos-y)</code>：设置背景图片</li>\n<li><code>@include replace-text-with-dimensions(本地图片地址)</code>：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致</li>\n</ul>\n</li>\n<li><p>Vertical Rhythm<br>  行内容间的留白，让所有文本元素的高度是基准高的整数倍   </p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><strong>Helpers模块</strong><br>  Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。<ul>\n<li>Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。<code>background-image: inline-image(&#39;image.png&#39;)</code> 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。</li>\n<li><code>image-url(&#39;image.png&#39;)</code>：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。<code>stylesheet-url</code>和<code>font-url</code>用于管理指向CSS目录和font目录的资源文件路径，用法类似。   </li>\n<li><code>compass-env()</code>：compass编译环境，只有两个返回值development和production。</li>\n<li><code>image-width()</code>和<code>image-height()</code>：用于计算图片的宽和高   </li>\n<li><code>append-selector($selector, $to-append)</code>：将第二个参数叠加组合到第一个参数中生成学则器。    </li>\n</ul>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><strong>Utilities模块</strong><br>Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：<code>Color</code>、<code>Print</code>、<code>Tables</code>、<code>General</code>、<code>Sprites</code>。</p>\n<ul>\n<li>Color<ul>\n<li><code>brightness($color)</code>：计算颜色的亮度</li>\n<li>contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   </li>\n</ul>\n</li>\n<li>Print<br>  必须在两个文件中协同使用，<code>pirnt.scss</code>和<code>screen.scss</code>都需要引入print模块，主要是应用于适配打印设备。<ul>\n<li><code>print-utilities</code>：在<code>screen.scss</code>中调用需要传参<code>@include print-utilities(screen)</code>不传默认为<code>print.scss</code>中。</li>\n</ul>\n</li>\n<li>Tables<ul>\n<li><code>outer|inner-tables-borders($width, $color)</code>：分别用于设置table内外边框</li>\n<li><code>table-scaffolding()</code>：单元格文本对齐和padding初始化，<code>th</code>居中，<code>.numberic</code>右对齐。</li>\n<li><code>alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)</code>：对奇偶行|相隔列进行不同的颜色修饰。</li>\n</ul>\n</li>\n<li>General<br>  -<code>clearfix()</code>：通过在<code>.clearfix</code>中设置<code>overflow:hidden</code>清除浮动。<br>  -<code>legacy-pie-clearfix()</code>：通过伪类清除浮动。<br>  -<code>float($\bdirection)</code>：根据配置设置是否启用对IE6的hack解决double float-margin bug。<br>  -<code>min-height|width($length)</code>：设置min-height/min-width，兼容IE。<br>  -<code>tag-cloud($baseFontSize)</code>：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。</li>\n<li><p>Sprites<br>  主要是通过<code>sprite helpers</code>实现。</p>\n  <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">import</span> \"compass/utilities/sprites;</span></span><br><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">import</span> \"logo/*.png\";</span>  <span class=\"comment\">/* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */</span></span><br><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">include</span> all-logo-sprites();</span>   <span class=\"comment\">/* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */</span></span><br></pre></td></tr></table></figure>\n<p>  图片引用的方法有两种，一个是直接在对应元素中添加对应类名<code>logo-imageName</code>；另一个则是通过<code>@include logo-sprite(&quot;imageName&quot;)</code>的方法。   </p>\n<ul>\n<li>对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为<code>imageName_hover.png</code>等，compass就会自动生成对应样式。可通过设置<code>$disable-magic-sprite-selectors:true</code>关闭该特性。</li>\n<li><code>$logo-layout: vertical|horizontal|diagonal|smart</code>：生成精灵图的布局方式设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"compass其他知识\"><a href=\"#compass其他知识\" class=\"headerlink\" title=\"compass其他知识\"></a>compass其他知识</h4><ol>\n<li>config.rb中<code>require &#39;compass/import-once/activate&#39;</code>：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import “compass/reset!”来引入后面的重复引用文件。  </li>\n<li>当使用<code>compressed</code>作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如<code>/*! hahaha */</code>来避免被去除。</li>\n<li><code>@debug</code>可以在控制台显示出mixins函数等对应的输出，如<code>@debug browser()</code>显示出的当前compass支持的浏览器，类似于console.log()的功能；</li>\n<li>通过在控制台输入<code>compass interactive</code>可以进入console，直接调用mixins。   </li>\n<li>compass生成地址的时候，默认生成的都是绝对地址，认为<code>config.rb</code>所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  </li>\n<li><code>compile compass -e production --force</code>：强制compass在production环境下编译，也可以在config.rb中配置<code>environment = :development</code>。   </li>\n<li>在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Sass与Compass\"><a href=\"#Sass与Compass\" class=\"headerlink\" title=\"Sass与Compass\"></a>Sass与Compass</h2><ol>\n<li>Compass是Sass基础上二次开发的工具。</li>\n<li><strong>优点</strong>：写出更优秀的CSS；解决CSS编写过程中的痛点问题（如精灵图合图等）；有效组织样式、图片、字体等项目元素。</li>\n<li><strong>应用场景</strong>：重构时自动化CSS；项目周期内更好组织项目内容。</li>\n</ol>\n<h4 id=\"sass和-scss\"><a href=\"#sass和-scss\" class=\"headerlink\" title=\".sass和.scss\"></a>.sass和.scss</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .sass：类ruby语法，空格敏感</span></span><br><span class=\"line\">h1</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000</span></span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// .scss：类css语法，花括号</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;<span class=\"attribute\">color</span>: red;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sass\"><a href=\"#Sass\" class=\"headerlink\" title=\"Sass\"></a>Sass</h2><h4 id=\"sass安装及使用\"><a href=\"#sass安装及使用\" class=\"headerlink\" title=\"sass安装及使用\"></a>sass安装及使用</h4><ol>\n<li>安装ruby和rvm（可选，用于版本管理）</li>\n<li>通过gem(ruby安装自带的一个包管理器)安装sass。  <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem sources -l <span class=\"string\">//</span> 显示当前的源</span><br><span class=\"line\">gem sources <span class=\"params\">--remove</span> <span class=\"string\">...</span> <span class=\"string\">//</span> 删除源<span class=\"string\">...</span></span><br><span class=\"line\">gem sources -a <span class=\"string\">...</span> <span class=\"string\">//</span> 添加源<span class=\"string\">..</span></span><br><span class=\"line\">gem install sass <span class=\"string\">//</span> 安装sass</span><br><span class=\"line\">gem install sass <span class=\"params\">--version=3</span>.5.6 <span class=\"string\">//</span> 安装版本为3.5.6的sass</span><br><span class=\"line\">gem uninstall sass <span class=\"string\">//</span> 卸载sass</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"sass语法介绍\"><a href=\"#sass语法介绍\" class=\"headerlink\" title=\"sass语法介绍\"></a>sass语法介绍</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass main<span class=\"selector-class\">.scss</span> main<span class=\"selector-class\">.css</span> <span class=\"comment\">// 编译成css文件</span></span><br><span class=\"line\">sass-convert main<span class=\"selector-class\">.scss</span> main<span class=\"selector-class\">.sass</span> <span class=\"comment\">// .sass和.scss</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>变量：存储一些后期可能会修改的通篇使用的量，如字体等等，一般放在文件头部；</p>\n <figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$headline</span>-ff: Braggadocio, Arial, Verdana, Helvetica, sans-serif;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>文件引入<code>@import</code>：类似于全局变量通常会单独放在一个文件中（_variables.scss）需要时通过<code>import</code>引入。</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 多个import可用,分割</span></span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span>, <span class=\"string\">\"compass/reset\"</span>;</span><br></pre></td></tr></table></figure>\n<p> ==注意==：这里的<code>@import</code>并不是css原生的<code>@import</code>（缺点：CSS原生的<code>@import</code>必须要放在代码的最前边才能生效；当a.css引入了b.css，只有当浏览器将a下载下来，解析渲染时读到import时才回去下载b，此时浏览器处于阻塞过程，大大影响渲染时间，所以不建议使用）。sass在被编译时会将import的文件输出到相应的css文件，并且import指令可以放在任何地方。</p>\n <figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">以下情况使用的是css原生<span class=\"keyword\">import</span></span><br><span class=\"line\"><span class=\"number\">1</span>. 文件名为.css结尾</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables.css\"</span>;</span><br><span class=\"line\"><span class=\"number\">2</span>. <span class=\"string\">\"http://\"</span>开头的字符串</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"http://variables.css\"</span>;</span><br><span class=\"line\"><span class=\"number\">3</span>. url()函数</span><br><span class=\"line\">@<span class=\"keyword\">import</span> url(<span class=\"string\">\"variables.css\"</span>);</span><br><span class=\"line\"><span class=\"number\">4</span>. 跟有media queries</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"variables\"</span> projection tv;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>嵌套语法和父类选择器</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类的嵌套</span></span><br><span class=\"line\"><span class=\"selector-class\">.head</span> &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.content</span> &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">    &amp;:hover &#123; <span class=\"attribute\">background</span>: green; &#125; <span class=\"comment\">// 父类选择器&amp;</span></span><br><span class=\"line\">    <span class=\"attribute\">font</span>: &#123; // 属性嵌套</span><br><span class=\"line\">        family: Arial;</span><br><span class=\"line\">        size: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>变量操作</p>\n<ul>\n<li>操作方式<ul>\n<li>直接操作变量，即变量表达式；</li>\n<li>通过函数操作，函数包含以下几种：<ul>\n<li>functions：跟代码块无关的函数，多为内置函数</li>\n<li>可重用的代码块（类似于C中的宏macro）<ul>\n<li>使用时以复制拷贝的方式存在，称为mixin，通过@include调用</li>\n<li>使用时以组合声明的形式存在，通过@extend调用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持的运算操作符包含：<code>&lt;,&gt;,&lt;=,&gt;=,!=, ==, ()</code>。sass中的数值计算可以带单位，所以单位并不能混用。</li>\n<li>sass支持css3中添加的hsl功能，自动转换为16进制色值，解决了不兼容问题。</li>\n<li><p>mixin代码块的声明：一般放在页面顶部<code>@import</code>之后，或者单独抽离出一个文件，引入方法如下：  </p>\n  <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> col-6 &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.webdemo</span> &#123;</span><br><span class=\"line\">    @<span class=\"keyword\">include</span> col-6();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 一种可以实现但是不建议的方法，</span></span><br><span class=\"line\"><span class=\"comment\">// 规范建议类名最好有语义化的作用，而非视觉化</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> col-6 &#123;</span><br><span class=\"line\">    <span class=\"selector-class\">.col-6</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">@<span class=\"keyword\">include</span> col-6();</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 带参数的mixin, 50%为默认参数</span></span><br><span class=\"line\">@<span class=\"keyword\">mixin</span> col (<span class=\"variable\">$width</span>: 50%) &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组合声明：以一种继承的形式来避免CSS的冗余。==工作原理是把继承者的选择器，插入到被继承者选择器所在的位置==。</p>\n  <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.error.<span class=\"class\">instruction </span>&#123;</span><br><span class=\"line\"><span class=\"symbol\">    color:</span> <span class=\"meta\">#0f0;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.<span class=\"class\">error </span>&#123;</span><br><span class=\"line\"><span class=\"symbol\">    color:</span> <span class=\"meta\">#f00;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">.serious-<span class=\"class\">error </span>&#123;</span><br><span class=\"line\">    @extend .error;</span><br><span class=\"line\"><span class=\"symbol\">    border:</span> <span class=\"number\">1</span>px <span class=\"meta\">#f00;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"params\">&lt;div class=\"serious-error instruction\"&gt;</span>serious<span class=\"params\">&lt;/div&gt;</span> <span class=\"comment\">// #0f0</span></span><br></pre></td></tr></table></figure>\n<p>  <strong>注意</strong>：extend不能继承选择器序列（即<code>@extend .A .B</code>不可行，会报错）；使用%可构建仅用于继承的选择器（<code>%name {...}</code>），不会出现在生成文件中。   </p>\n</li>\n</ul>\n</li>\n<li><p>sass中的媒体查询：sass中的media query可以内嵌在css规则中，在生成css的时候，media query才会被提到样式的最高层级。避免重复书写选择器，同时避免打乱样式表的流程。  </p>\n</li>\n<li><p>sass提供了非常好的嵌套能力，但是嵌套带来的副作用也是不可忽视的：</p>\n<ul>\n<li>浏览器解析css文件是按照从右往左的顺序。即对于<code>.main .headline</code>会先找到类名为headline的元素，然后再向上查找父级元素是否类名为main，否则继续向上直到查找到类名对应的元素或者html元素。这样导致渲染效率的低下；  </li>\n<li>增加了样式修饰的权重；</li>\n<li><p>制造了样式位置的依赖；  </p>\n<p>最佳实践是在命名的时候对类名进行语义化的命名，比如<code>.main-headline</code>，同时为了保留嵌套清晰易维护的优点，可以通过<code>at-root</code>指令指明将嵌套的内容输出到样式表顶层。   </p>\n</li>\n</ul>\n</li>\n<li><p>mixin的参数校验示例</p>\n <figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> col-sm (<span class=\"variable\">$width</span>: 50%) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*输入校验*/</span></span><br><span class=\"line\">    @<span class=\"keyword\">if</span> type-of(<span class=\"variable\">$width</span>) != number &#123;</span><br><span class=\"line\">        @error <span class=\"string\">\"$width必须是一个数值类型，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    @<span class=\"keyword\">if</span> not unitless(<span class=\"variable\">$width</span>) &#123; <span class=\"comment\">/* 没有单位 */</span></span><br><span class=\"line\">        @<span class=\"keyword\">if</span> unit(<span class=\"variable\">$width</span>) != <span class=\"string\">\"%\"</span> &#123;</span><br><span class=\"line\">            @<span class=\"keyword\">warn</span> <span class=\"string\">\"$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; @<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        @<span class=\"keyword\">warn</span> <span class=\"string\">\"$width必须是一个百分值，目前输入的width是#&#123;$width&#125;.\"</span>;</span><br><span class=\"line\">        <span class=\"variable\">$width</span>: (percentage(<span class=\"variable\">$width</span>) / <span class=\"number\">100</span>); <span class=\"comment\">/*数值变成百分号表示形式时会增加100倍*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @<span class=\"keyword\">media</span> (min-width: 768px) &#123;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"variable\">$width</span>;</span><br><span class=\"line\">        <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>sass的四种输出格式<code>config.rb</code>中的<code>output_style</code>：</p>\n<ul>\n<li>expanded：默认，样式展开，与手动书写css习惯一致；</li>\n<li>nested：反映css样式修饰的html的结构，根据嵌套对应缩进样式；</li>\n<li>compact：将所有属性汇总到一行，关注选择器之间的关系，而非选择器内的属性；</li>\n<li>compressed：样式表压缩以占用最少的空间。</li>\n</ul>\n</li>\n<li><p>其他：<code>@each</code> <code>@for</code> <code>@while</code></p>\n</li>\n<li><p>常用网址</p>\n<ul>\n<li>Sass中的functions详情页：<a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html\" target=\"_blank\" rel=\"noopener\">http://sass-lang.com/documentation/Sass/Script/Functions.html</a></li>\n<li>Sass和Compass必备技能之Sass篇（视频教程）：<a href=\"https://www.imooc.com/video/7155\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/video/7155</a></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Compass\"><a href=\"#Compass\" class=\"headerlink\" title=\"Compass\"></a>Compass</h2><h4 id=\"compass安装及使用\"><a href=\"#compass安装及使用\" class=\"headerlink\" title=\"compass安装及使用\"></a>compass安装及使用</h4><ol>\n<li>通过<code>gem install compass</code>即可安装成功</li>\n<li><p>Compass目录创建  </p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass <span class=\"keyword\">create</span> <span class=\"keyword\">file</span>-<span class=\"keyword\">name</span> // 初始化工作目录，<span class=\"keyword\">file</span>-<span class=\"keyword\">name</span>为生成的文件名</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>目录结构  </p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sass：</span><br><span class=\"line\">    -<span class=\"ruby\"> <span class=\"number\">_</span>*.scss：用于被其他sass文件引入，不会被单独编译</span></span><br><span class=\"line\"><span class=\"ruby\">    - *.scss：会被单独编译</span></span><br><span class=\"line\"><span class=\"ruby\">    注意：同一目录下，局部文件和非局部文件不能重名</span></span><br><span class=\"line\"><span class=\"ruby\">stylesheets：sass文件编译生成的css文件</span></span><br><span class=\"line\"><span class=\"ruby\">config.rb：配置项目文件</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>命令</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compass <span class=\"keyword\">compile</span> [path<span class=\"regexp\">/to/</span><span class=\"keyword\">project</span>] <span class=\"comment\">// 按需编译</span></span><br><span class=\"line\">compass watch [path<span class=\"regexp\">/to/</span><span class=\"keyword\">project</span>] <span class=\"comment\">// 监听目录编译</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h4 id=\"compass核心模块\"><a href=\"#compass核心模块\" class=\"headerlink\" title=\"compass核心模块\"></a>compass核心模块</h4><p>CSS3、Helpers、Typography、Utilities模块通过<code>@import &quot;compass&quot;</code>就可以直接引入；而Reset和Layout模块需要分别通过<code>@import &quot;compass/reset&quot;</code>和<code>@import &quot;compass/layout</code>明确指定引入。  </p>\n<ul>\n<li>CSS3：跨浏览器的CSS3兼容能力  </li>\n<li>Helpers：内含多函数，比较少用到  </li>\n<li>Typography：修饰文本样式  </li>\n<li>Utilities：辅助工具模块，多为mixins  </li>\n<li>Reset：浏览器样式重置模块  </li>\n<li>Layout：提供对页面布局的控制 </li>\n</ul>\n<p>除了以上六大功能模块之外，还包含browser模块，用于配置compass默认支持的浏览器机器版本，该模块的配置会影响其他模块的输出。    </p>\n<ol>\n<li><p><strong>reset模块</strong><br> 所有包含的模块可见：<a href=\"http://compass-style.org/reference/compass/reset/utilities/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/reset/utilities/</a><br> 可以通过调用mixins来调用不同的模块。   </p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如`nested-reset`用于重置页面下某个选择器的所有标签，方式如下：</span></span><br><span class=\"line\"><span class=\"selector-class\">.test</span> &#123;</span><br><span class=\"line\">    <span class=\"variable\">@include</span> nested-reset;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以通过传参的方法，将某个选择器下的样式重置，方式如下：</span></span><br><span class=\"line\"><span class=\"comment\">// 第一个参数为选择器，第二个参数为是否强制覆盖（!important）</span></span><br><span class=\"line\"><span class=\"variable\">@include</span> reset-display(<span class=\"string\">'.test'</span>, true);</span><br></pre></td></tr></table></figure>\n<p> ==使用normalize替代==</p>\n <figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install compass-normalize <span class=\"comment\"># 下载normalize</span></span><br><span class=\"line\"><span class=\"built_in\">require</span> <span class=\"string\">'compass-normalize'</span> <span class=\"comment\"># 在config.rb引入</span></span><br><span class=\"line\"></span><br><span class=\"line\">@import <span class=\"string\">\"normalize\"</span>; <span class=\"comment\"># 在scss文件中替换reset</span></span><br></pre></td></tr></table></figure>\n<p> normalize核心模块本身包含八个部分：</p>\n<ul>\n<li>base: body和html标签的字体文字大小边距等</li>\n<li>html5: 统一html5中新增的元素样式，如article、section的展现形式</li>\n<li>links: 统一a标签的展示形式，去掉hover和active时的下划线</li>\n<li>typography: 统一b, strong, h1, sub, sup等段落文本的样式修饰</li>\n<li>embeds: img, svg等</li>\n<li>groups: figure, pre, code等</li>\n<li>forms: form相关的button, input, textarea等</li>\n<li>tables: table相关table, td, th等<br>这八个部分可以通过子路径单独引入，如<code>@import &quot;normalize/base&quot;;</code>，通过子类引入的方法需要在前置位置添加<code>@import &quot;normalize-version&quot;;</code>。</li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>layout模块</strong>（使用率低）<br><a href=\"http://compass-style.org/reference/compass/layout/\" target=\"_blank\" rel=\"noopener\">http://compass-style.org/reference/compass/layout/</a><br>内部分了三大模块grid-background，sticky-footer，stretching。都可以通过子目录的方式如<code>@import &quot;compass/layout/grid-background&quot;</code>的方式显示引入。   <ul>\n<li>stretch：拉伸填充。通过<code>@include stretch(top, right, bottom, left)</code>调用，将元素拉伸填充屏幕，参数可缺省。  </li>\n<li>sticky-footer: 使页脚始终处于最底部。需符合一定的html结构（详见官网）。</li>\n<li>grid-background: 使用css3中的grid定宽定高自适应宽高   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><strong>CSS3模块&amp;Browser Support 模块</strong>     <ul>\n<li><a href=\"http://compass-style.org/reference/compass/css3/\" target=\"_blank\" rel=\"noopener\">CSS3模块</a>：封装了CSS3新属性，通过调用对应的新属性即可，如<code>@include box-shadow(1px 1px 2px 2px #aaa);</code>，可以自动添加浏览器前缀（除此之外，提供部分CSS3属性在IE下的兼容处理，如inline-block, opacity等）。</li>\n<li>Browser Support模块：通过<code>@import &quot;compass/support&quot;</code>可直接引入，实际上CSS3已引入了该模块。<ul>\n<li><code>browser()</code>：通过<code>@debug browser()</code>可显示出当前支持的浏览器；</li>\n<li><code>browser-version(&#39;chrome&#39;)</code>：显示当前对应浏览器考虑的所有版本；</li>\n<li><code>$supported-browsers: chrome firefox</code>：限制当前支持的浏览器；</li>\n<li><code>$browser-minmum-versions: (&quot;ie&quot;: &quot;8&quot;)</code>：通过键值对的方法限制最低支持的版本；</li>\n<li><code>$graceful-usage-threshold=0.1</code>：如果对于某个属性（若不支持\b仅仅影响美观度）在支持的浏览器中该属性的使用率达到了0.1%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。   </li>\n<li><code>$critical-usage-threshold=0.01</code>：如果对于某个属性（若不支持会导致页面混乱无法阅读等等较大问题）在支持的浏览器中该属性的使用率达到了0.01%，则对其进行兼容。假如显式声明了兼容的浏览器版本，则不会根据该设置判断属性是否需要兼容。      </li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>Typography模块</strong>   </p>\n<ul>\n<li>Links<ul>\n<li><code>@include hover-link();</code>：正常态下去掉下划线，在hover或者focus时才显示</li>\n<li><code>@include  link-colors(normal, hover, active, visited, focus)</code>：设置不同状态下的颜色值，只有第一个参数是必须参数</li>\n<li><code>@include unstyle-link()</code>：抹平超链接样式</li>\n</ul>\n</li>\n<li><p>Lists</p>\n<ul>\n<li><code>@include no-bullets()</code>： 去掉列表前的list-style，包含ul和li下</li>\n<li><code>@include no-bullet()</code>： 去掉单个li元素前的list-style</li>\n<li><code>@include inline-list()</code>：使得list横向布局，通过设置为<code>inline</code>实现</li>\n<li><code>@include horizontal-list(padding, float)</code>：使得list横向布局，通过float实现，第一个参数为padding值，第二个参数为float的方向。</li>\n<li><code>@include inline-block-list(padding)</code>：目的同上，通过设置li的display值为inline-block实现。</li>\n</ul>\n</li>\n<li><p>Text</p>\n<ul>\n<li><code>@include force-wrap()</code>：连续长文本强制换行（如url等）</li>\n<li><code>@include nowrap()</code>：连续长文本强制不换行，其实等同于<code>white-space: nowrap;</code></li>\n<li><code>@include ellipsis()</code>：文本超出容器宽度，在其后添加省略号，为了兼容firefox低版本，可通过安装<code>compass install ellipsis</code>，通过<code>$use-mozilla-ellipsis-binding: true;</code>开启对firefox低版本的支持。   </li>\n<li><code>@include hide-text()</code>：隐藏文本，text-indent实现</li>\n<li><code>@include squish-text()</code>：隐藏文本，通过font-size/opacity实现</li>\n<li><code>@include replace-text(url, bg-pos-x, bg-pos-y)</code>：设置背景图片</li>\n<li><code>@include replace-text-with-dimensions(本地图片地址)</code>：设置本地图片为背景，自动检测宽高使得容器大小与背景图片一致</li>\n</ul>\n</li>\n<li><p>Vertical Rhythm<br>  行内容间的留白，让所有文本元素的高度是基准高的整数倍   </p>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"5\">\n<li><strong>Helpers模块</strong><br>  Helpers中为函数，而不是mixins，不需要include，可以直接调用，其中的许多函数都于config.rb中的配置项对应。<ul>\n<li>Data URI：可以在Web 页面中包含图片但无需任何额外的HTTP 请求的一类URI（通过base64编码实现）。然而比直接使用图片资源相比要多使用50%的CPU资源，多4倍的内存，且不支持IE6/7。<code>background-image: inline-image(&#39;image.png&#39;)</code> 图片参数是相对于在cofig文件中设定的image目录设置的目录的相对路径。</li>\n<li><code>image-url(&#39;image.png&#39;)</code>：对于某些分布在CDN上的图片，后面常常跟着一个时间戳（cache buster）来标示这个图片更新的版本或者时间，对于CSS背景图片设置不友好，而且经常更改。image-url可以很好地解决这个问题，同时引用路径也只需要关注图片相对于配置的图片目录image_dir的相对路径。<code>stylesheet-url</code>和<code>font-url</code>用于管理指向CSS目录和font目录的资源文件路径，用法类似。   </li>\n<li><code>compass-env()</code>：compass编译环境，只有两个返回值development和production。</li>\n<li><code>image-width()</code>和<code>image-height()</code>：用于计算图片的宽和高   </li>\n<li><code>append-selector($selector, $to-append)</code>：将第二个参数叠加组合到第一个参数中生成学则器。    </li>\n</ul>\n</li>\n</ol>\n<ol start=\"6\">\n<li><p><strong>Utilities模块</strong><br>Utilities模块主要是一些无法分类到其他模块中的功能，其中又分为5个类别：<code>Color</code>、<code>Print</code>、<code>Tables</code>、<code>General</code>、<code>Sprites</code>。</p>\n<ul>\n<li>Color<ul>\n<li><code>brightness($color)</code>：计算颜色的亮度</li>\n<li>contrasted($background-color, [$dark], [$light], [$threshold])：根据输入的bgColor自动生成background-color属性，并在输入的dark和light两个色值之间选取一个和背景颜色对比度更大的设为color属性。   </li>\n</ul>\n</li>\n<li>Print<br>  必须在两个文件中协同使用，<code>pirnt.scss</code>和<code>screen.scss</code>都需要引入print模块，主要是应用于适配打印设备。<ul>\n<li><code>print-utilities</code>：在<code>screen.scss</code>中调用需要传参<code>@include print-utilities(screen)</code>不传默认为<code>print.scss</code>中。</li>\n</ul>\n</li>\n<li>Tables<ul>\n<li><code>outer|inner-tables-borders($width, $color)</code>：分别用于设置table内外边框</li>\n<li><code>table-scaffolding()</code>：单元格文本对齐和padding初始化，<code>th</code>居中，<code>.numberic</code>右对齐。</li>\n<li><code>alternating-rows-and-columns($evenColor, $oddColor, $相邻两列颜色差值，$thColor, $tfootColor)</code>：对奇偶行|相隔列进行不同的颜色修饰。</li>\n</ul>\n</li>\n<li>General<br>  -<code>clearfix()</code>：通过在<code>.clearfix</code>中设置<code>overflow:hidden</code>清除浮动。<br>  -<code>legacy-pie-clearfix()</code>：通过伪类清除浮动。<br>  -<code>float($\bdirection)</code>：根据配置设置是否启用对IE6的hack解决double float-margin bug。<br>  -<code>min-height|width($length)</code>：设置min-height/min-width，兼容IE。<br>  -<code>tag-cloud($baseFontSize)</code>：生成大小不同的字体，类名为xs,xxs, s, l, xl, xxl。</li>\n<li><p>Sprites<br>  主要是通过<code>sprite helpers</code>实现。</p>\n  <figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">import</span> \"compass/utilities/sprites;</span></span><br><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">import</span> \"logo/*.png\";</span>  <span class=\"comment\">/* compass据此生成sass样式文件，默认不会存储在硬盘，可通过在控制台输入compass sprites \"images/logo/*.png\"生成文件查看，生成sprites */</span></span><br><span class=\"line\">@<span class=\"meta\"><span class=\"meta-keyword\">include</span> all-logo-sprites();</span>   <span class=\"comment\">/* 图片使用，中间的logo为目录名，只取路径的最后一个文件夹名 */</span></span><br></pre></td></tr></table></figure>\n<p>  图片引用的方法有两种，一个是直接在对应元素中添加对应类名<code>logo-imageName</code>；另一个则是通过<code>@include logo-sprite(&quot;imageName&quot;)</code>的方法。   </p>\n<ul>\n<li>对于button类型的图标，希望在hover, active等状态下使用不同的图片，可以通过在对图片命名为<code>imageName_hover.png</code>等，compass就会自动生成对应样式。可通过设置<code>$disable-magic-sprite-selectors:true</code>关闭该特性。</li>\n<li><code>$logo-layout: vertical|horizontal|diagonal|smart</code>：生成精灵图的布局方式设置。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"compass其他知识\"><a href=\"#compass其他知识\" class=\"headerlink\" title=\"compass其他知识\"></a>compass其他知识</h4><ol>\n<li>config.rb中<code>require &#39;compass/import-once/activate&#39;</code>：启用import-once，对于多次import同一文件只会引入一次，避免冗余。如果确实是需要多次引入，则可以通过 @import “compass/reset!”来引入后面的重复引用文件。  </li>\n<li>当使用<code>compressed</code>作为sass的输出格式时，默认会去掉所有注释文字。而对于一些必要的注释内容（如copy rights），可以通过如<code>/*! hahaha */</code>来避免被去除。</li>\n<li><code>@debug</code>可以在控制台显示出mixins函数等对应的输出，如<code>@debug browser()</code>显示出的当前compass支持的浏览器，类似于console.log()的功能；</li>\n<li>通过在控制台输入<code>compass interactive</code>可以进入console，直接调用mixins。   </li>\n<li>compass生成地址的时候，默认生成的都是绝对地址，认为<code>config.rb</code>所在的位置为根路径。假如有专门的服务器地址来存储相关的文件等，可以在config.rb中设置（http_path等），也可以通过relative_assets设置为true来生成相对路径。  </li>\n<li><code>compile compass -e production --force</code>：强制compass在production环境下编译，也可以在config.rb中配置<code>environment = :development</code>。   </li>\n<li>在选择器，字符串或SASS变量中如果需要引用函数，需要使用形如#{fn()}。</li>\n</ol>\n"},{"title":"threejs进阶下：交互","date":"2018-10-11T13:16:51.000Z","toc":true,"comments":1,"description":"threejs用户交互","_content":"\n### Raycaster\n\n`THREE.Raycaster`是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    \n\n#### new Raycaster(origin, direction, near, far)\n\n- origin：光线投射的起点向量\n- direction：光线投射的方向向量，归一化\n- near：投射近点，用于限制光线的起点，不能为负，缺省为0\n- far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大\n\n#### setFromCamera(coords, camera)\n\n用一个新的原点和方向向量来更新射线，参数说明如下。\n\n- coords：鼠标的归一化二维坐标，归一化方法如下：\n    ```JavaScript\n    mouse.x = (e.clientX / window.innerWidth) * 2 -1;\n    mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\n    ```\n- camera：射线起点处的相机，即把射线起点设置在该相机位置处\n\n#### intersectObject(object, recursive)\n检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。\n- object：用于检测和射线相交的物体\n- recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false\n\n#### 点击返回选中物体\n```JavaScript\nvar raycaster = new THREE.Raycaster(origin, direction, near, far);\nmouse.x = (e.clientX / window.innerWidth) * 2 -1;\nmouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\nraycaster.setFromCamera(mouse, camera);\nvar intersects = raycaster.intersectObjects(locationGroup.children, true);    \n```\n\n#### 碰撞检测\n原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。\n```JavaScript\n// 1. 获取物体中心点\nvar originP = obj.position.clone(); \nfor(var i=0; i<obj.geometry.vertices.length; i++) {\n    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值\n    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);\n    // 获取由中心指向顶点的向量\n    var directV = vertex.sub(obj.position);\n    // 方向向量归一化并发射射线\n    var ray = new Three.Raycaster(originP, directV.clone().normalize());\n    // 检测相交物体和距离\n    var collisionRes = ray.intersectObjects(collideMeshList, true);\n    if (collisionRes.length>0 && collisionRes[0].distance < directV.length() ) {\n        console.log('发生碰撞');\n    }\n}\n```\n\n***\n\nhttps://blog.csdn.net/birdflyto206/article/details/52414382\n### 相机操作\n\n模型移动常常通过相机的移动来实现，常用的相机控件如下：   \n\nFirstPersonControls：第一人称控件，键盘移动，鼠标转动 \nFlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动 \nRollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转 \nTrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景 \nOrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移\nPathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置\n","source":"_posts/threejs进阶下：交互.md","raw":"---\ntitle: threejs进阶下：交互\ndate: 2018-10-11 21:16:51\ntags: threejs\ncategory: lesson\ntoc: true\ncomments: true\ndescription: threejs用户交互\n---\n\n### Raycaster\n\n`THREE.Raycaster`是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    \n\n#### new Raycaster(origin, direction, near, far)\n\n- origin：光线投射的起点向量\n- direction：光线投射的方向向量，归一化\n- near：投射近点，用于限制光线的起点，不能为负，缺省为0\n- far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大\n\n#### setFromCamera(coords, camera)\n\n用一个新的原点和方向向量来更新射线，参数说明如下。\n\n- coords：鼠标的归一化二维坐标，归一化方法如下：\n    ```JavaScript\n    mouse.x = (e.clientX / window.innerWidth) * 2 -1;\n    mouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\n    ```\n- camera：射线起点处的相机，即把射线起点设置在该相机位置处\n\n#### intersectObject(object, recursive)\n检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。\n- object：用于检测和射线相交的物体\n- recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false\n\n#### 点击返回选中物体\n```JavaScript\nvar raycaster = new THREE.Raycaster(origin, direction, near, far);\nmouse.x = (e.clientX / window.innerWidth) * 2 -1;\nmouse.y = - (e.clientY / window.innerHeight) * 2 + 1;\nraycaster.setFromCamera(mouse, camera);\nvar intersects = raycaster.intersectObjects(locationGroup.children, true);    \n```\n\n#### 碰撞检测\n原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。\n```JavaScript\n// 1. 获取物体中心点\nvar originP = obj.position.clone(); \nfor(var i=0; i<obj.geometry.vertices.length; i++) {\n    // 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值\n    var vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);\n    // 获取由中心指向顶点的向量\n    var directV = vertex.sub(obj.position);\n    // 方向向量归一化并发射射线\n    var ray = new Three.Raycaster(originP, directV.clone().normalize());\n    // 检测相交物体和距离\n    var collisionRes = ray.intersectObjects(collideMeshList, true);\n    if (collisionRes.length>0 && collisionRes[0].distance < directV.length() ) {\n        console.log('发生碰撞');\n    }\n}\n```\n\n***\n\nhttps://blog.csdn.net/birdflyto206/article/details/52414382\n### 相机操作\n\n模型移动常常通过相机的移动来实现，常用的相机控件如下：   \n\nFirstPersonControls：第一人称控件，键盘移动，鼠标转动 \nFlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动 \nRollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转 \nTrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景 \nOrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移\nPathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置\n","slug":"threejs进阶下：交互","published":1,"updated":"2019-02-25T06:41:56.873Z","layout":"post","photos":[],"link":"","_id":"cjt8ew0500007yn7oz1trfwkj","content":"<h3 id=\"Raycaster\"><a href=\"#Raycaster\" class=\"headerlink\" title=\"Raycaster\"></a>Raycaster</h3><p><code>THREE.Raycaster</code>是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    </p>\n<h4 id=\"new-Raycaster-origin-direction-near-far\"><a href=\"#new-Raycaster-origin-direction-near-far\" class=\"headerlink\" title=\"new Raycaster(origin, direction, near, far)\"></a>new Raycaster(origin, direction, near, far)</h4><ul>\n<li>origin：光线投射的起点向量</li>\n<li>direction：光线投射的方向向量，归一化</li>\n<li>near：投射近点，用于限制光线的起点，不能为负，缺省为0</li>\n<li>far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大</li>\n</ul>\n<h4 id=\"setFromCamera-coords-camera\"><a href=\"#setFromCamera-coords-camera\" class=\"headerlink\" title=\"setFromCamera(coords, camera)\"></a>setFromCamera(coords, camera)</h4><p>用一个新的原点和方向向量来更新射线，参数说明如下。</p>\n<ul>\n<li><p>coords：鼠标的归一化二维坐标，归一化方法如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouse.x = (e.clientX / <span class=\"built_in\">window</span>.innerWidth) * <span class=\"number\">2</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">mouse.y = - (e.clientY / <span class=\"built_in\">window</span>.innerHeight) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>camera：射线起点处的相机，即把射线起点设置在该相机位置处</p>\n</li>\n</ul>\n<h4 id=\"intersectObject-object-recursive\"><a href=\"#intersectObject-object-recursive\" class=\"headerlink\" title=\"intersectObject(object, recursive)\"></a>intersectObject(object, recursive)</h4><p>检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。</p>\n<ul>\n<li>object：用于检测和射线相交的物体</li>\n<li>recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false</li>\n</ul>\n<h4 id=\"点击返回选中物体\"><a href=\"#点击返回选中物体\" class=\"headerlink\" title=\"点击返回选中物体\"></a>点击返回选中物体</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> raycaster = <span class=\"keyword\">new</span> THREE.Raycaster(origin, direction, near, far);</span><br><span class=\"line\">mouse.x = (e.clientX / <span class=\"built_in\">window</span>.innerWidth) * <span class=\"number\">2</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">mouse.y = - (e.clientY / <span class=\"built_in\">window</span>.innerHeight) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">raycaster.setFromCamera(mouse, camera);</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersects = raycaster.intersectObjects(locationGroup.children, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取物体中心点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originP = obj.position.clone(); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;obj.geometry.vertices.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);</span><br><span class=\"line\">    <span class=\"comment\">// 获取由中心指向顶点的向量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> directV = vertex.sub(obj.position);</span><br><span class=\"line\">    <span class=\"comment\">// 方向向量归一化并发射射线</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ray = <span class=\"keyword\">new</span> Three.Raycaster(originP, directV.clone().normalize());</span><br><span class=\"line\">    <span class=\"comment\">// 检测相交物体和距离</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> collisionRes = ray.intersectObjects(collideMeshList, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (collisionRes.length&gt;<span class=\"number\">0</span> &amp;&amp; collisionRes[<span class=\"number\">0</span>].distance &lt; directV.length() ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发生碰撞'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><a href=\"https://blog.csdn.net/birdflyto206/article/details/52414382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/birdflyto206/article/details/52414382</a></p>\n<h3 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h3><p>模型移动常常通过相机的移动来实现，常用的相机控件如下：   </p>\n<p>FirstPersonControls：第一人称控件，键盘移动，鼠标转动<br>FlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动<br>RollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转<br>TrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景<br>OrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移<br>PathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Raycaster\"><a href=\"#Raycaster\" class=\"headerlink\" title=\"Raycaster\"></a>Raycaster</h3><p><code>THREE.Raycaster</code>是threejs中比较重要的一个类，可以用于物体选择和碰撞检测。实现原理是生成一条从显示的起点到重点的一条射线，检测与射线相交的物体集合。    </p>\n<h4 id=\"new-Raycaster-origin-direction-near-far\"><a href=\"#new-Raycaster-origin-direction-near-far\" class=\"headerlink\" title=\"new Raycaster(origin, direction, near, far)\"></a>new Raycaster(origin, direction, near, far)</h4><ul>\n<li>origin：光线投射的起点向量</li>\n<li>direction：光线投射的方向向量，归一化</li>\n<li>near：投射近点，用于限制光线的起点，不能为负，缺省为0</li>\n<li>far：投射远点，用于限制光线的终点，不能小于near，缺省为无穷大</li>\n</ul>\n<h4 id=\"setFromCamera-coords-camera\"><a href=\"#setFromCamera-coords-camera\" class=\"headerlink\" title=\"setFromCamera(coords, camera)\"></a>setFromCamera(coords, camera)</h4><p>用一个新的原点和方向向量来更新射线，参数说明如下。</p>\n<ul>\n<li><p>coords：鼠标的归一化二维坐标，归一化方法如下：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mouse.x = (e.clientX / <span class=\"built_in\">window</span>.innerWidth) * <span class=\"number\">2</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">mouse.y = - (e.clientY / <span class=\"built_in\">window</span>.innerHeight) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>camera：射线起点处的相机，即把射线起点设置在该相机位置处</p>\n</li>\n</ul>\n<h4 id=\"intersectObject-object-recursive\"><a href=\"#intersectObject-object-recursive\" class=\"headerlink\" title=\"intersectObject(object, recursive)\"></a>intersectObject(object, recursive)</h4><p>检查射线和物体之间的交叉点，交叉点按距离排序返回，最接近为第一个，返回值为一个对象数组。</p>\n<ul>\n<li>object：用于检测和射线相交的物体</li>\n<li>recursive：若为true，则检查所有后代，否则只检查本身，缺省值为false</li>\n</ul>\n<h4 id=\"点击返回选中物体\"><a href=\"#点击返回选中物体\" class=\"headerlink\" title=\"点击返回选中物体\"></a>点击返回选中物体</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> raycaster = <span class=\"keyword\">new</span> THREE.Raycaster(origin, direction, near, far);</span><br><span class=\"line\">mouse.x = (e.clientX / <span class=\"built_in\">window</span>.innerWidth) * <span class=\"number\">2</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">mouse.y = - (e.clientY / <span class=\"built_in\">window</span>.innerHeight) * <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">raycaster.setFromCamera(mouse, camera);</span><br><span class=\"line\"><span class=\"keyword\">var</span> intersects = raycaster.intersectObjects(locationGroup.children, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"碰撞检测\"><a href=\"#碰撞检测\" class=\"headerlink\" title=\"碰撞检测\"></a>碰撞检测</h4><p>原理是通过以物体中心为起点，向各个顶点发出射线，检测射线是否与其他物体相交，若相交则检查最近的一个交点与射线起点的距离，如果这个距离比物体中心到物体顶点的距离要小，则说明发生了碰撞。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 获取物体中心点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> originP = obj.position.clone(); </span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;obj.geometry.vertices.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取顶点坐标，将本地坐标乘以变换矩阵，得到了物体在世界坐标系中的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vertex = obj.geometry.vertices[i].clone().applyMatrix4(obj.matrix);</span><br><span class=\"line\">    <span class=\"comment\">// 获取由中心指向顶点的向量</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> directV = vertex.sub(obj.position);</span><br><span class=\"line\">    <span class=\"comment\">// 方向向量归一化并发射射线</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> ray = <span class=\"keyword\">new</span> Three.Raycaster(originP, directV.clone().normalize());</span><br><span class=\"line\">    <span class=\"comment\">// 检测相交物体和距离</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> collisionRes = ray.intersectObjects(collideMeshList, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (collisionRes.length&gt;<span class=\"number\">0</span> &amp;&amp; collisionRes[<span class=\"number\">0</span>].distance &lt; directV.length() ) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'发生碰撞'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><a href=\"https://blog.csdn.net/birdflyto206/article/details/52414382\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/birdflyto206/article/details/52414382</a></p>\n<h3 id=\"相机操作\"><a href=\"#相机操作\" class=\"headerlink\" title=\"相机操作\"></a>相机操作</h3><p>模型移动常常通过相机的移动来实现，常用的相机控件如下：   </p>\n<p>FirstPersonControls：第一人称控件，键盘移动，鼠标转动<br>FlyControls：飞行器模拟控件，键盘和鼠标来控制相机的移动和转动<br>RollControls：翻滚控件，FlyControls的简化版，可以绕z轴旋转<br>TrackballControls：轨迹球控件，用鼠标来轻松移动、平移和缩放场景<br>OrbitControls：轨道控件，\b在场景中绕某个对象旋转、平移<br>PathControls：路径控件，相机可以沿着预定义的路径移动。可以四处观看，但不能改变自身的位置</p>\n"},{"title":"threejs问题集锦","date":"2018-10-11T13:45:32.000Z","toc":true,"comments":1,"description":"threejs问题集锦","_content":"\n- [贴图](#map)\n- [官方插件](#official-plugin)\n\n### <div id=\"map\">贴图</div>\n1. 贴图大小限制\nWebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。\n\n#### <div id=\"official-plugin\">官方插件</div>\n1. 使用最新版`OrbitControls.js`(2018/10/11)后，点击事件无法生效\n最新版的代码在所有涉及到的事件中都添加了`event.preventDefault()`，注释掉对应的就可以了。","source":"_posts/threejs问题集锦.md","raw":"---\ntitle: threejs问题集锦\ndate: 2018-10-11 21:45:32\ntags: threejs\ncategory: lesson\ntoc: true\ncomments: true\ndescription: threejs问题集锦\n---\n\n- [贴图](#map)\n- [官方插件](#official-plugin)\n\n### <div id=\"map\">贴图</div>\n1. 贴图大小限制\nWebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。\n\n#### <div id=\"official-plugin\">官方插件</div>\n1. 使用最新版`OrbitControls.js`(2018/10/11)后，点击事件无法生效\n最新版的代码在所有涉及到的事件中都添加了`event.preventDefault()`，注释掉对应的就可以了。","slug":"threejs问题集锦","published":1,"updated":"2019-02-25T06:41:34.213Z","layout":"post","photos":[],"link":"","_id":"cjt8ew057000byn7oo1okigop","content":"<ul>\n<li><a href=\"#map\">贴图</a></li>\n<li><a href=\"#official-plugin\">官方插件</a></li>\n</ul>\n<h3 id=\"贴图\"><a href=\"#贴图\" class=\"headerlink\" title=\"贴图\"></a><div id=\"map\">贴图</div></h3><ol>\n<li>贴图大小限制<br>WebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。</li>\n</ol>\n<h4 id=\"官方插件\"><a href=\"#官方插件\" class=\"headerlink\" title=\"官方插件\"></a><div id=\"official-plugin\">官方插件</div></h4><ol>\n<li>使用最新版<code>OrbitControls.js</code>(2018/10/11)后，点击事件无法生效<br>最新版的代码在所有涉及到的事件中都添加了<code>event.preventDefault()</code>，注释掉对应的就可以了。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><a href=\"#map\">贴图</a></li>\n<li><a href=\"#official-plugin\">官方插件</a></li>\n</ul>\n<h3 id=\"贴图\"><a href=\"#贴图\" class=\"headerlink\" title=\"贴图\"></a><div id=\"map\">贴图</div></h3><ol>\n<li>贴图大小限制<br>WebGL对于texture的支持是有大小限制的，使用CanvasRenderer也会有同样的限制，只要手机支持WebGL，可以保证允许2048*2048的贴图，因此贴图最好不超过该限制。</li>\n</ol>\n<h4 id=\"官方插件\"><a href=\"#官方插件\" class=\"headerlink\" title=\"官方插件\"></a><div id=\"official-plugin\">官方插件</div></h4><ol>\n<li>使用最新版<code>OrbitControls.js</code>(2018/10/11)后，点击事件无法生效<br>最新版的代码在所有涉及到的事件中都添加了<code>event.preventDefault()</code>，注释掉对应的就可以了。</li>\n</ol>\n"},{"title":"vuepress搭建","date":"2018-08-10T11:13:12.000Z","toc":true,"comments":1,"description":"vuepress搭建过程记录","_content":"\n## 介绍\n1. `vuepress`支持html、md、vue。这些格式最终都会被转换成vue组件：`markdown -> html -> vue`。\n \n## 搭建\n1. 初始化：`npm init`\n2. 安装vuepress  \n*全局安装`-g`，在已有的项目中安装`-d`。*  \n    ```bash\n    # 全局安装\n    npm install -g vuepress\n \n    # 创建一个专门的docs目录存放md文件\n    # mkdir docs\n \n    # 创建一个 markdown 文件\n    # echo '# Hello Vuepress' > docs/README.md\n    echo '# Hello Vuepress' > README.md\n \n    # 编写文档\n    # npx vuepress dev docs\n    npx vuepress dev\n \n    # 构建\n    # npx vuepress build docs\n    npx vuepress build\n    ```\n    为了防止以后忘记命令，建议在`package.json`中添加`scripts`脚本。\n    ```JavaScript\n    {\n        \"scripts\": {\n            \"dev\": \"vuepress dev docs\",\n            \"build\": \"vuepress build docs\"\n        }\n    }\n    ```\n3. 在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在`.vuepress`文件下添加配置文件`config.js`。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照[官方文档](https://vuepress.docschina.org/config/)。  \n    ```JavaScript\n    module.exports = {\n        base: '/gh-pages/', // github仓库名\n        title: 'Hello VuePress', // 标题\n        description: 'Justing do it!',\n \n        // 顶部导航栏nav\n        themeConfig: {\n            nav: [\n                {text: '指南', link: '/guide/'},\n                {text: '配置参考', link: '/config/'},\n                {text: '默认主题配置', link: '/default-theme-config/'},\n                {text: 'Github', link: 'https://github.com/docschina/vuepress/'},\n            ],\n \n            // 左侧sidebar\n            sidebar: [\n                '/',\n                'pageA.html',\n                'pageB.html'\n            ]\n        },\n    }\n    ```\n4. 为了让这个系统能够在外部访问，可以借助github。\n    - 建立好一个github仓库，如：https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base: [仓库名]`  \n    - 同步远程仓库到本地输出目录下`.vuepress/dist`  \n        ```bash\n        cd .vuepress/dist\n        git init\n        git pull -f\n        ```\n    - 将`dist`目录下的文件上传到github的gh-pages分支下`.vuepress/`  \n        ```bash\n        git add -A\n        git commit -m 'deploy'\n        git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages\n        ```\n    - 在远程仓库`Settings -> Github Pages -> Source`设置为`gh-pages branch`，点击save。\n    - 这样就大功告成啦，效果：[DEMO](https://jinglecjy.github.io/technical-docs/)。\n## 问题记录\n1. 不使用`README.md`作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？ \nREADME.md 默认生成index.html为默认首页，不可更改。 \n2. 注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。`vuepress`比较适合不需要经常修改的静态文档。","source":"_posts/vuepress搭建.md","raw":"---\ntitle: vuepress搭建\ndate: 2018-08-10 19:13:12\ntags: 小项目\ncategory: tools\ntoc: true\ncomments: true\ndescription: vuepress搭建过程记录\n---\n\n## 介绍\n1. `vuepress`支持html、md、vue。这些格式最终都会被转换成vue组件：`markdown -> html -> vue`。\n \n## 搭建\n1. 初始化：`npm init`\n2. 安装vuepress  \n*全局安装`-g`，在已有的项目中安装`-d`。*  \n    ```bash\n    # 全局安装\n    npm install -g vuepress\n \n    # 创建一个专门的docs目录存放md文件\n    # mkdir docs\n \n    # 创建一个 markdown 文件\n    # echo '# Hello Vuepress' > docs/README.md\n    echo '# Hello Vuepress' > README.md\n \n    # 编写文档\n    # npx vuepress dev docs\n    npx vuepress dev\n \n    # 构建\n    # npx vuepress build docs\n    npx vuepress build\n    ```\n    为了防止以后忘记命令，建议在`package.json`中添加`scripts`脚本。\n    ```JavaScript\n    {\n        \"scripts\": {\n            \"dev\": \"vuepress dev docs\",\n            \"build\": \"vuepress build docs\"\n        }\n    }\n    ```\n3. 在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在`.vuepress`文件下添加配置文件`config.js`。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照[官方文档](https://vuepress.docschina.org/config/)。  \n    ```JavaScript\n    module.exports = {\n        base: '/gh-pages/', // github仓库名\n        title: 'Hello VuePress', // 标题\n        description: 'Justing do it!',\n \n        // 顶部导航栏nav\n        themeConfig: {\n            nav: [\n                {text: '指南', link: '/guide/'},\n                {text: '配置参考', link: '/config/'},\n                {text: '默认主题配置', link: '/default-theme-config/'},\n                {text: 'Github', link: 'https://github.com/docschina/vuepress/'},\n            ],\n \n            // 左侧sidebar\n            sidebar: [\n                '/',\n                'pageA.html',\n                'pageB.html'\n            ]\n        },\n    }\n    ```\n4. 为了让这个系统能够在外部访问，可以借助github。\n    - 建立好一个github仓库，如：https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base: [仓库名]`  \n    - 同步远程仓库到本地输出目录下`.vuepress/dist`  \n        ```bash\n        cd .vuepress/dist\n        git init\n        git pull -f\n        ```\n    - 将`dist`目录下的文件上传到github的gh-pages分支下`.vuepress/`  \n        ```bash\n        git add -A\n        git commit -m 'deploy'\n        git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages\n        ```\n    - 在远程仓库`Settings -> Github Pages -> Source`设置为`gh-pages branch`，点击save。\n    - 这样就大功告成啦，效果：[DEMO](https://jinglecjy.github.io/technical-docs/)。\n## 问题记录\n1. 不使用`README.md`作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？ \nREADME.md 默认生成index.html为默认首页，不可更改。 \n2. 注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。`vuepress`比较适合不需要经常修改的静态文档。","slug":"vuepress搭建","published":1,"updated":"2019-02-25T06:40:49.764Z","layout":"post","photos":[],"link":"","_id":"cjt8ew059000dyn7ohna0063z","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><code>vuepress</code>支持html、md、vue。这些格式最终都会被转换成vue组件：<code>markdown -&gt; html -&gt; vue</code>。</li>\n</ol>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><ol>\n<li>初始化：<code>npm init</code></li>\n<li><p>安装vuepress<br><em>全局安装<code>-g</code>，在已有的项目中安装<code>-d</code>。</em>  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install -g vuepress</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个专门的docs目录存放md文件</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"comment\"># echo '# Hello Vuepress' &gt; docs/README.md</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'# Hello Vuepress'</span> &gt; README.md</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编写文档</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress dev docs</span></span><br><span class=\"line\">npx vuepress dev</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress build docs</span></span><br><span class=\"line\">npx vuepress build</span><br></pre></td></tr></table></figure>\n<p> 为了防止以后忘记命令，建议在<code>package.json</code>中添加<code>scripts</code>脚本。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"vuepress dev docs\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: <span class=\"string\">\"vuepress build docs\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在<code>.vuepress</code>文件下添加配置文件<code>config.js</code>。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照<a href=\"https://vuepress.docschina.org/config/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。  </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    base: <span class=\"string\">'/gh-pages/'</span>, <span class=\"comment\">// github仓库名</span></span><br><span class=\"line\">    title: <span class=\"string\">'Hello VuePress'</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">    description: <span class=\"string\">'Justing do it!'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 顶部导航栏nav</span></span><br><span class=\"line\">    themeConfig: &#123;</span><br><span class=\"line\">        nav: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'指南'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/guide/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'配置参考'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/config/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'默认主题配置'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/default-theme-config/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'Github'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'https://github.com/docschina/vuepress/'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 左侧sidebar</span></span><br><span class=\"line\">        sidebar: [</span><br><span class=\"line\">            <span class=\"string\">'/'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pageA.html'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pageB.html'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了让这个系统能够在外部访问，可以借助github。</p>\n<ul>\n<li>建立好一个github仓库，如：<a href=\"https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base</a>: [仓库名]`  </li>\n<li><p>同步远程仓库到本地输出目录下<code>.vuepress/dist</code>  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> .vuepress/dist</span><br><span class=\"line\">git init</span><br><span class=\"line\">git pull -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>dist</code>目录下的文件上传到github的gh-pages分支下<code>.vuepress/</code>  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">'deploy'</span></span><br><span class=\"line\">git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在远程仓库<code>Settings -&gt; Github Pages -&gt; Source</code>设置为<code>gh-pages branch</code>，点击save。</p>\n</li>\n<li>这样就大功告成啦，效果：<a href=\"https://jinglecjy.github.io/technical-docs/\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2></li>\n</ul>\n</li>\n<li>不使用<code>README.md</code>作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？<br>README.md 默认生成index.html为默认首页，不可更改。 </li>\n<li>注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。<code>vuepress</code>比较适合不需要经常修改的静态文档。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ol>\n<li><code>vuepress</code>支持html、md、vue。这些格式最终都会被转换成vue组件：<code>markdown -&gt; html -&gt; vue</code>。</li>\n</ol>\n<h2 id=\"搭建\"><a href=\"#搭建\" class=\"headerlink\" title=\"搭建\"></a>搭建</h2><ol>\n<li>初始化：<code>npm init</code></li>\n<li><p>安装vuepress<br><em>全局安装<code>-g</code>，在已有的项目中安装<code>-d</code>。</em>  </p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 全局安装</span></span><br><span class=\"line\">npm install -g vuepress</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个专门的docs目录存放md文件</span></span><br><span class=\"line\"><span class=\"comment\"># mkdir docs</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 创建一个 markdown 文件</span></span><br><span class=\"line\"><span class=\"comment\"># echo '# Hello Vuepress' &gt; docs/README.md</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'# Hello Vuepress'</span> &gt; README.md</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 编写文档</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress dev docs</span></span><br><span class=\"line\">npx vuepress dev</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 构建</span></span><br><span class=\"line\"><span class=\"comment\"># npx vuepress build docs</span></span><br><span class=\"line\">npx vuepress build</span><br></pre></td></tr></table></figure>\n<p> 为了防止以后忘记命令，建议在<code>package.json</code>中添加<code>scripts</code>脚本。</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"vuepress dev docs\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"build\"</span>: <span class=\"string\">\"vuepress build docs\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在上面两步之后就可以在本地查看部署效果了。现在还只是一个简单的markdown界面显示。做到像vuepress官网一样的界面还需要在<code>.vuepress</code>文件下添加配置文件<code>config.js</code>。以下代码简单的添加了标题、头部导航和侧边导航，具体可参照<a href=\"https://vuepress.docschina.org/config/\" target=\"_blank\" rel=\"noopener\">官方文档</a>。  </p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    base: <span class=\"string\">'/gh-pages/'</span>, <span class=\"comment\">// github仓库名</span></span><br><span class=\"line\">    title: <span class=\"string\">'Hello VuePress'</span>, <span class=\"comment\">// 标题</span></span><br><span class=\"line\">    description: <span class=\"string\">'Justing do it!'</span>,</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 顶部导航栏nav</span></span><br><span class=\"line\">    themeConfig: &#123;</span><br><span class=\"line\">        nav: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'指南'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/guide/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'配置参考'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/config/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'默认主题配置'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'/default-theme-config/'</span>&#125;,</span><br><span class=\"line\">            &#123;<span class=\"attr\">text</span>: <span class=\"string\">'Github'</span>, <span class=\"attr\">link</span>: <span class=\"string\">'https://github.com/docschina/vuepress/'</span>&#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 左侧sidebar</span></span><br><span class=\"line\">        sidebar: [</span><br><span class=\"line\">            <span class=\"string\">'/'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pageA.html'</span>,</span><br><span class=\"line\">            <span class=\"string\">'pageB.html'</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为了让这个系统能够在外部访问，可以借助github。</p>\n<ul>\n<li>建立好一个github仓库，如：<a href=\"https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base\" target=\"_blank\" rel=\"noopener\">https://github.com/jinglecjy/technical-docs，在`config.js`文件中添加`base</a>: [仓库名]`  </li>\n<li><p>同步远程仓库到本地输出目录下<code>.vuepress/dist</code>  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> .vuepress/dist</span><br><span class=\"line\">git init</span><br><span class=\"line\">git pull -f</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将<code>dist</code>目录下的文件上传到github的gh-pages分支下<code>.vuepress/</code>  </p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add -A</span><br><span class=\"line\">git commit -m <span class=\"string\">'deploy'</span></span><br><span class=\"line\">git push -f git@github.com:jinglecjy/technical-docs.git master:gh-pages</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在远程仓库<code>Settings -&gt; Github Pages -&gt; Source</code>设置为<code>gh-pages branch</code>，点击save。</p>\n</li>\n<li>这样就大功告成啦，效果：<a href=\"https://jinglecjy.github.io/technical-docs/\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2></li>\n</ul>\n</li>\n<li>不使用<code>README.md</code>作为名字时，按照官方文档部署网站之后总是跳转到默认的404页面？<br>README.md 默认生成index.html为默认首页，不可更改。 </li>\n<li>注意文件重新生成之后需要重新部署个git仓库，并上传才能更新文档，因为dist文件夹都是删除重新生成的。<code>vuepress</code>比较适合不需要经常修改的静态文档。</li>\n</ol>\n"},{"title":"两周一报04（20181005）","date":"2018-10-05T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，iscroll","_content":"### 一、本周项目：岁月神偷H5（9.20 - 10.3）\n1. 问题与解决   \n- 在微信和浏览器中有上拉/下拉回弹效果，在此次H5中需要禁用   \n考虑到H5中会有两种状态，一种是手指滑动，屏幕滚动；另一种是手指滑动，屏幕不滚动，展示一些动画效果。所以此次采用iscroll控制滚动，禁用掉原生，可以避免微信和浏览器下拉/上拉回弹效果，同时也能更好的控制滚动。   \n- 之前一直使用ssh上传git代码，此次不知道是什么原因突然无法push/clone？   \n由于急着保存代码所以改用了http协议连接git.jd.com，后期再详细找原因。     \n- ios10以下 safari不支持muted/volume属性，也就是无法静音？   \n采用了一种暴力方法，当需要静音音频的时候直接移除audio元素后再重新添加。（可以用pause来代替muted）  \n\n2. 进度：90%，运营方希望修改一些设计，需要追加排期   \n\n### 二、\biscroll.js\n1. **适用**：基本的内容滚动控制，模拟原生IOS应用里的滚动列表操作，还可以实现缩放、拉动刷新、精确捕捉元素、自定义滚动条等功能。\n2. **问题**：使用的本意是为了避免自己写的兼容性问题，版本不够稳定，部分版本会有闪屏或滑动不流畅的情况，更换版本以后问题解决。\n3. **反思**：这次找这类型的插件有很多，但是没有找到特别官方稳定的插件，在项目中使用还是比较有风险，以后应当尽量避免，万不得已的时候，选择应该更加偏向于轻量级的插件，有问题看源码也不至于毫无头绪。\n\n","source":"_posts/两周一报04（20181005）.md","raw":"---\ntitle: 两周一报04（20181005）\ndate: 2018-10-05 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，iscroll\n---\n### 一、本周项目：岁月神偷H5（9.20 - 10.3）\n1. 问题与解决   \n- 在微信和浏览器中有上拉/下拉回弹效果，在此次H5中需要禁用   \n考虑到H5中会有两种状态，一种是手指滑动，屏幕滚动；另一种是手指滑动，屏幕不滚动，展示一些动画效果。所以此次采用iscroll控制滚动，禁用掉原生，可以避免微信和浏览器下拉/上拉回弹效果，同时也能更好的控制滚动。   \n- 之前一直使用ssh上传git代码，此次不知道是什么原因突然无法push/clone？   \n由于急着保存代码所以改用了http协议连接git.jd.com，后期再详细找原因。     \n- ios10以下 safari不支持muted/volume属性，也就是无法静音？   \n采用了一种暴力方法，当需要静音音频的时候直接移除audio元素后再重新添加。（可以用pause来代替muted）  \n\n2. 进度：90%，运营方希望修改一些设计，需要追加排期   \n\n### 二、\biscroll.js\n1. **适用**：基本的内容滚动控制，模拟原生IOS应用里的滚动列表操作，还可以实现缩放、拉动刷新、精确捕捉元素、自定义滚动条等功能。\n2. **问题**：使用的本意是为了避免自己写的兼容性问题，版本不够稳定，部分版本会有闪屏或滑动不流畅的情况，更换版本以后问题解决。\n3. **反思**：这次找这类型的插件有很多，但是没有找到特别官方稳定的插件，在项目中使用还是比较有风险，以后应当尽量避免，万不得已的时候，选择应该更加偏向于轻量级的插件，有问题看源码也不至于毫无头绪。\n\n","slug":"两周一报04（20181005）","published":1,"updated":"2019-02-25T06:38:50.959Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05b000iyn7ok7413blc","content":"<h3 id=\"一、本周项目：岁月神偷H5（9-20-10-3）\"><a href=\"#一、本周项目：岁月神偷H5（9-20-10-3）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5（9.20 - 10.3）\"></a>一、本周项目：岁月神偷H5（9.20 - 10.3）</h3><ol>\n<li>问题与解决   </li>\n</ol>\n<ul>\n<li>在微信和浏览器中有上拉/下拉回弹效果，在此次H5中需要禁用<br>考虑到H5中会有两种状态，一种是手指滑动，屏幕滚动；另一种是手指滑动，屏幕不滚动，展示一些动画效果。所以此次采用iscroll控制滚动，禁用掉原生，可以避免微信和浏览器下拉/上拉回弹效果，同时也能更好的控制滚动。   </li>\n<li>之前一直使用ssh上传git代码，此次不知道是什么原因突然无法push/clone？<br>由于急着保存代码所以改用了http协议连接git.jd.com，后期再详细找原因。     </li>\n<li>ios10以下 safari不支持muted/volume属性，也就是无法静音？<br>采用了一种暴力方法，当需要静音音频的时候直接移除audio元素后再重新添加。（可以用pause来代替muted）  </li>\n</ul>\n<ol start=\"2\">\n<li>进度：90%，运营方希望修改一些设计，需要追加排期   </li>\n</ol>\n<h3 id=\"二、iscroll-js\"><a href=\"#二、iscroll-js\" class=\"headerlink\" title=\"二、\biscroll.js\"></a>二、\biscroll.js</h3><ol>\n<li><strong>适用</strong>：基本的内容滚动控制，模拟原生IOS应用里的滚动列表操作，还可以实现缩放、拉动刷新、精确捕捉元素、自定义滚动条等功能。</li>\n<li><strong>问题</strong>：使用的本意是为了避免自己写的兼容性问题，版本不够稳定，部分版本会有闪屏或滑动不流畅的情况，更换版本以后问题解决。</li>\n<li><strong>反思</strong>：这次找这类型的插件有很多，但是没有找到特别官方稳定的插件，在项目中使用还是比较有风险，以后应当尽量避免，万不得已的时候，选择应该更加偏向于轻量级的插件，有问题看源码也不至于毫无头绪。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目：岁月神偷H5（9-20-10-3）\"><a href=\"#一、本周项目：岁月神偷H5（9-20-10-3）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5（9.20 - 10.3）\"></a>一、本周项目：岁月神偷H5（9.20 - 10.3）</h3><ol>\n<li>问题与解决   </li>\n</ol>\n<ul>\n<li>在微信和浏览器中有上拉/下拉回弹效果，在此次H5中需要禁用<br>考虑到H5中会有两种状态，一种是手指滑动，屏幕滚动；另一种是手指滑动，屏幕不滚动，展示一些动画效果。所以此次采用iscroll控制滚动，禁用掉原生，可以避免微信和浏览器下拉/上拉回弹效果，同时也能更好的控制滚动。   </li>\n<li>之前一直使用ssh上传git代码，此次不知道是什么原因突然无法push/clone？<br>由于急着保存代码所以改用了http协议连接git.jd.com，后期再详细找原因。     </li>\n<li>ios10以下 safari不支持muted/volume属性，也就是无法静音？<br>采用了一种暴力方法，当需要静音音频的时候直接移除audio元素后再重新添加。（可以用pause来代替muted）  </li>\n</ul>\n<ol start=\"2\">\n<li>进度：90%，运营方希望修改一些设计，需要追加排期   </li>\n</ol>\n<h3 id=\"二、iscroll-js\"><a href=\"#二、iscroll-js\" class=\"headerlink\" title=\"二、\biscroll.js\"></a>二、\biscroll.js</h3><ol>\n<li><strong>适用</strong>：基本的内容滚动控制，模拟原生IOS应用里的滚动列表操作，还可以实现缩放、拉动刷新、精确捕捉元素、自定义滚动条等功能。</li>\n<li><strong>问题</strong>：使用的本意是为了避免自己写的兼容性问题，版本不够稳定，部分版本会有闪屏或滑动不流畅的情况，更换版本以后问题解决。</li>\n<li><strong>反思</strong>：这次找这类型的插件有很多，但是没有找到特别官方稳定的插件，在项目中使用还是比较有风险，以后应当尽量避免，万不得已的时候，选择应该更加偏向于轻量级的插件，有问题看源码也不至于毫无头绪。</li>\n</ol>\n"},{"title":"两周一报01（20180826）","date":"2018-08-26T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，近期问题总结","_content":"\n### 一、本周项目：居家大赏主会场   \n#### 问题与解决   \n1. 安装过程中，经常出现类似`permission denied, scandir '路径名称'`的错误信息？   \n通过`sudo chown -R \busername \"\b路径名\"`将指定文件的拥有者改为指定的用户或组，从而获得权限。   \n2. dispatch的函数参数名称与定义的参数列表必须名称一致，否则会接受不到数据   \n3. `setState(...): Cannot update during an existing state transition (such as within render or another component's constructor) ...`   \n在reducer中不能有改变状态的举动。\n4. browser-sync在命令行运行，只能从index.html文件开始，如果配置到gulp中（webpack类似），可以通过如下配置\b实现从不同文件开始运行服务器：     \n```JavaScript\n// gulp\nbrowserSync.init({\n    server:{\n        baseDir:'./app',\n        index:'name.html'\n    }\n});\n```\n\n5. 加入时间戳防止缓存     \n```JavaScript\ndocument.write(\"&lt;script type='text/javascript' src='//site.com?t=\" + Date.now() + \"'&gt;&lt;\\/script&gt;\");\n```\n\n6. 查看埋点数据包（包括点击跳转）     \n  Network面板选择`Perserve log`，搜索`m?`   \n7. 沉浸式标题设置: `@jmfe/jm-webview：enableTransparent`      \n8. 直接打出人民币单位无法确保所有字体下都是双横线，可以使用`&yen;`       \n\n#### React\b模板总结   \n1. React: 用于构建界面的javascript库      \n2. Redux：用于协助React状态管理的工具      \n3. Redux-Saga：用于管理redux应用异步操作的中间件    \n对应到React会场模板中，需要修改的文件及对应功能如下：     \n    - components：一个文件夹为一个组件，主要涉及UI的展示和事件绑定   \n    - reducers: 状态声明，通常返回的是一系列数据   \n    - sagas：负责异步交互事件的响应函数（包括埋点，领券等等）的具体实现，其中index.js负责主线程的数据加载等事务   \n    - services/fetch-data.js: 拉取数据   \n    - constants/index.js: 一些\b固定参数，如pageId, UUID等等   \n   \n\n### 二、有趣的实现   \n1. \b纯代码实现的动态图案\n![01](/images/weekly/01/cssdoodle0.gif)   \n![02](/images/weekly/01/cssdoodle1.gif) \n`<css-doodle />` : 一个比较新的项目，内设一些常用的图案/函数/属性。目前兼容性很差，只在最新版的chrome和safari下支持，\b尚未考虑fallback。    \n2. 两个火焰效果   \n![01](/images/weekly/01/fire0.gif)   \n![02](/images/weekly/01/fire1.gif)   ","source":"_posts/两周一报01（20180826）.md","raw":"---\ntitle: 两周一报01（20180826）\ndate: 2018-08-26 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，近期问题总结\n---\n\n### 一、本周项目：居家大赏主会场   \n#### 问题与解决   \n1. 安装过程中，经常出现类似`permission denied, scandir '路径名称'`的错误信息？   \n通过`sudo chown -R \busername \"\b路径名\"`将指定文件的拥有者改为指定的用户或组，从而获得权限。   \n2. dispatch的函数参数名称与定义的参数列表必须名称一致，否则会接受不到数据   \n3. `setState(...): Cannot update during an existing state transition (such as within render or another component's constructor) ...`   \n在reducer中不能有改变状态的举动。\n4. browser-sync在命令行运行，只能从index.html文件开始，如果配置到gulp中（webpack类似），可以通过如下配置\b实现从不同文件开始运行服务器：     \n```JavaScript\n// gulp\nbrowserSync.init({\n    server:{\n        baseDir:'./app',\n        index:'name.html'\n    }\n});\n```\n\n5. 加入时间戳防止缓存     \n```JavaScript\ndocument.write(\"&lt;script type='text/javascript' src='//site.com?t=\" + Date.now() + \"'&gt;&lt;\\/script&gt;\");\n```\n\n6. 查看埋点数据包（包括点击跳转）     \n  Network面板选择`Perserve log`，搜索`m?`   \n7. 沉浸式标题设置: `@jmfe/jm-webview：enableTransparent`      \n8. 直接打出人民币单位无法确保所有字体下都是双横线，可以使用`&yen;`       \n\n#### React\b模板总结   \n1. React: 用于构建界面的javascript库      \n2. Redux：用于协助React状态管理的工具      \n3. Redux-Saga：用于管理redux应用异步操作的中间件    \n对应到React会场模板中，需要修改的文件及对应功能如下：     \n    - components：一个文件夹为一个组件，主要涉及UI的展示和事件绑定   \n    - reducers: 状态声明，通常返回的是一系列数据   \n    - sagas：负责异步交互事件的响应函数（包括埋点，领券等等）的具体实现，其中index.js负责主线程的数据加载等事务   \n    - services/fetch-data.js: 拉取数据   \n    - constants/index.js: 一些\b固定参数，如pageId, UUID等等   \n   \n\n### 二、有趣的实现   \n1. \b纯代码实现的动态图案\n![01](/images/weekly/01/cssdoodle0.gif)   \n![02](/images/weekly/01/cssdoodle1.gif) \n`<css-doodle />` : 一个比较新的项目，内设一些常用的图案/函数/属性。目前兼容性很差，只在最新版的chrome和safari下支持，\b尚未考虑fallback。    \n2. 两个火焰效果   \n![01](/images/weekly/01/fire0.gif)   \n![02](/images/weekly/01/fire1.gif)   ","slug":"两周一报01（20180826）","published":1,"updated":"2019-02-25T06:39:55.097Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05d000lyn7oahfuofwb","content":"<h3 id=\"一、本周项目：居家大赏主会场\"><a href=\"#一、本周项目：居家大赏主会场\" class=\"headerlink\" title=\"一、本周项目：居家大赏主会场\"></a>一、本周项目：居家大赏主会场</h3><h4 id=\"问题与解决\"><a href=\"#问题与解决\" class=\"headerlink\" title=\"问题与解决\"></a>问题与解决</h4><ol>\n<li>安装过程中，经常出现类似<code>permission denied, scandir &#39;路径名称&#39;</code>的错误信息？<br>通过<code>sudo chown -R \busername &quot;\b路径名&quot;</code>将指定文件的拥有者改为指定的用户或组，从而获得权限。   </li>\n<li>dispatch的函数参数名称与定义的参数列表必须名称一致，否则会接受不到数据   </li>\n<li><code>setState(...): Cannot update during an existing state transition (such as within render or another component&#39;s constructor) ...</code><br>在reducer中不能有改变状态的举动。</li>\n<li><p>browser-sync在命令行运行，只能从index.html文件开始，如果配置到gulp中（webpack类似），可以通过如下配置\b实现从不同文件开始运行服务器：     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulp</span></span><br><span class=\"line\">browserSync.init(&#123;</span><br><span class=\"line\">    server:&#123;</span><br><span class=\"line\">        baseDir:<span class=\"string\">'./app'</span>,</span><br><span class=\"line\">        index:<span class=\"string\">'name.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入时间戳防止缓存     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;lt;script type='text/javascript' src='//site.com?t=\"</span> + <span class=\"built_in\">Date</span>.now() + <span class=\"string\">\"'&amp;gt;&amp;lt;\\/script&amp;gt;\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看埋点数据包（包括点击跳转）<br>Network面板选择<code>Perserve log</code>，搜索<code>m?</code>   </p>\n</li>\n<li>沉浸式标题设置: <code>@jmfe/jm-webview：enableTransparent</code>      </li>\n<li>直接打出人民币单位无法确保所有字体下都是双横线，可以使用<code>&amp;yen;</code>       </li>\n</ol>\n<h4 id=\"React模板总结\"><a href=\"#React模板总结\" class=\"headerlink\" title=\"React\b模板总结\"></a>React\b模板总结</h4><ol>\n<li>React: 用于构建界面的javascript库      </li>\n<li>Redux：用于协助React状态管理的工具      </li>\n<li>Redux-Saga：用于管理redux应用异步操作的中间件<br>对应到React会场模板中，需要修改的文件及对应功能如下：     <ul>\n<li>components：一个文件夹为一个组件，主要涉及UI的展示和事件绑定   </li>\n<li>reducers: 状态声明，通常返回的是一系列数据   </li>\n<li>sagas：负责异步交互事件的响应函数（包括埋点，领券等等）的具体实现，其中index.js负责主线程的数据加载等事务   </li>\n<li>services/fetch-data.js: 拉取数据   </li>\n<li>constants/index.js: 一些\b固定参数，如pageId, UUID等等   </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、有趣的实现\"><a href=\"#二、有趣的实现\" class=\"headerlink\" title=\"二、有趣的实现\"></a>二、有趣的实现</h3><ol>\n<li>\b纯代码实现的动态图案<br><img src=\"/images/weekly/01/cssdoodle0.gif\" alt=\"01\"><br><img src=\"/images/weekly/01/cssdoodle1.gif\" alt=\"02\"><br><code>&lt;css-doodle /&gt;</code> : 一个比较新的项目，内设一些常用的图案/函数/属性。目前兼容性很差，只在最新版的chrome和safari下支持，\b尚未考虑fallback。    </li>\n<li>两个火焰效果<br><img src=\"/images/weekly/01/fire0.gif\" alt=\"01\"><br><img src=\"/images/weekly/01/fire1.gif\" alt=\"02\">   </li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目：居家大赏主会场\"><a href=\"#一、本周项目：居家大赏主会场\" class=\"headerlink\" title=\"一、本周项目：居家大赏主会场\"></a>一、本周项目：居家大赏主会场</h3><h4 id=\"问题与解决\"><a href=\"#问题与解决\" class=\"headerlink\" title=\"问题与解决\"></a>问题与解决</h4><ol>\n<li>安装过程中，经常出现类似<code>permission denied, scandir &#39;路径名称&#39;</code>的错误信息？<br>通过<code>sudo chown -R \busername &quot;\b路径名&quot;</code>将指定文件的拥有者改为指定的用户或组，从而获得权限。   </li>\n<li>dispatch的函数参数名称与定义的参数列表必须名称一致，否则会接受不到数据   </li>\n<li><code>setState(...): Cannot update during an existing state transition (such as within render or another component&#39;s constructor) ...</code><br>在reducer中不能有改变状态的举动。</li>\n<li><p>browser-sync在命令行运行，只能从index.html文件开始，如果配置到gulp中（webpack类似），可以通过如下配置\b实现从不同文件开始运行服务器：     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// gulp</span></span><br><span class=\"line\">browserSync.init(&#123;</span><br><span class=\"line\">    server:&#123;</span><br><span class=\"line\">        baseDir:<span class=\"string\">'./app'</span>,</span><br><span class=\"line\">        index:<span class=\"string\">'name.html'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加入时间戳防止缓存     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&amp;lt;script type='text/javascript' src='//site.com?t=\"</span> + <span class=\"built_in\">Date</span>.now() + <span class=\"string\">\"'&amp;gt;&amp;lt;\\/script&amp;gt;\"</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看埋点数据包（包括点击跳转）<br>Network面板选择<code>Perserve log</code>，搜索<code>m?</code>   </p>\n</li>\n<li>沉浸式标题设置: <code>@jmfe/jm-webview：enableTransparent</code>      </li>\n<li>直接打出人民币单位无法确保所有字体下都是双横线，可以使用<code>&amp;yen;</code>       </li>\n</ol>\n<h4 id=\"React模板总结\"><a href=\"#React模板总结\" class=\"headerlink\" title=\"React\b模板总结\"></a>React\b模板总结</h4><ol>\n<li>React: 用于构建界面的javascript库      </li>\n<li>Redux：用于协助React状态管理的工具      </li>\n<li>Redux-Saga：用于管理redux应用异步操作的中间件<br>对应到React会场模板中，需要修改的文件及对应功能如下：     <ul>\n<li>components：一个文件夹为一个组件，主要涉及UI的展示和事件绑定   </li>\n<li>reducers: 状态声明，通常返回的是一系列数据   </li>\n<li>sagas：负责异步交互事件的响应函数（包括埋点，领券等等）的具体实现，其中index.js负责主线程的数据加载等事务   </li>\n<li>services/fetch-data.js: 拉取数据   </li>\n<li>constants/index.js: 一些\b固定参数，如pageId, UUID等等   </li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、有趣的实现\"><a href=\"#二、有趣的实现\" class=\"headerlink\" title=\"二、有趣的实现\"></a>二、有趣的实现</h3><ol>\n<li>\b纯代码实现的动态图案<br><img src=\"/images/weekly/01/cssdoodle0.gif\" alt=\"01\"><br><img src=\"/images/weekly/01/cssdoodle1.gif\" alt=\"02\"><br><code>&lt;css-doodle /&gt;</code> : 一个比较新的项目，内设一些常用的图案/函数/属性。目前兼容性很差，只在最新版的chrome和safari下支持，\b尚未考虑fallback。    </li>\n<li>两个火焰效果<br><img src=\"/images/weekly/01/fire0.gif\" alt=\"01\"><br><img src=\"/images/weekly/01/fire1.gif\" alt=\"02\">   </li>\n</ol>\n"},{"title":"两周一报02（20180909）","date":"2018-09-09T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，snap.svg","_content":"\n### 一、项目汇报   \n#### 1. 居家大赏主会场总结    \n- 对于点击跳转到其他页面的埋点，需要设置延时让埋点成功上报，避免埋点尚未上报成功页面就已经跳转。\n- IOS下滚动卡顿（手指移动开页面就马上停止滚动），通过添加属性：-webkit-overflow-scrolling: touch ，问题解决。\n- img不设置display:block时，设置宽高100%会有一点偏移\n- 此次页面需要内嵌到京东APP的排行榜，由于之前沟通没有注意到投放途径，加上运营的疏忽，没有安排联调时间。在排期结束后才发现投放页面冲突，\b出现BUG。    \n    - **反思**：下次在需求评审时要注意页面投放途径，如果需要内嵌到京东APP需要安排联调时间，避免再次出现这种情况。\n    - **内嵌\b排行榜（RN WebView）的BUG总结**\n        - 第二次拉取数据不成功：在onload事件完成之后，再次调用接口获取数据代码失效，修改逻辑为在onload事件之前取出所有数据。这种解决方法的缺点是首屏加载时间略长，用户体验不够好。\n        - 进入页面后自动弹出分享弹框：需要加入环境判定，该属性为异步注入，需要延时判定，如下：\n            ```JavaScript\n            window.onload = function() {\n                setTimeout(function(){\n                    if(window.inRankingListRN) { \n                        // 排行榜环境下 \n                    }\n                    else { ... }\n                }, 200)\n            }\n            ```\n#### 2. 相机节头图（PC&APP）\njshop的视频链接假如需要为可配置的，则必须为jshop生成的视频链接，目前jshop生成的视频链接有问题，无法自动播放，可能是jshop视频存储刚迁移了云服务器的原因。\n\n### 二、\b近期试玩\n#### 1. snap.svg —— 一个操作svg的js库\n- 相关链接   \n    - 官网：http://snapsvg.io/   \n    - 中文API：https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php   \n- 优点\n    - 兼容IE9+、Safari、Chrome、Firefox、Opera；   \n    - 使用起来与jquery很相似，上手快，官方API也比较齐全；   \n    - 大小为82KB\n- 应用：可用于实现一些简单的动画，尤其是一些过渡效果无法通过CSS很好的实现，svg可以替代帧动画和GIF，减少加载资源，快速开发，附上2个假假的demo如下，代码量都没有超过50行：          \n    ![01](/images/weekly/02/snapsvg0.gif)   \n    ![02](/images/weekly/02/snapsvg1.gif)      \n    目前在PC端使用比较良好，snap.svg移动端 iOS、安卓 X5 内核、安卓原生浏览器兼容性都不错，只有部分属性不兼容，以上两个栗子在组内的测试机上显示正常。   \n\n- 兼容性数据来源：   \n    - https://aotu.io/notes/2017/01/22/snapsvg/index.html  \n    - https://developer.mozilla.org/en-US/docs/Web/SVG/Element   ","source":"_posts/两周一报02（20180909）.md","raw":"---\ntitle: 两周一报02（20180909）\ndate: 2018-09-09 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，snap.svg\n---\n\n### 一、项目汇报   \n#### 1. 居家大赏主会场总结    \n- 对于点击跳转到其他页面的埋点，需要设置延时让埋点成功上报，避免埋点尚未上报成功页面就已经跳转。\n- IOS下滚动卡顿（手指移动开页面就马上停止滚动），通过添加属性：-webkit-overflow-scrolling: touch ，问题解决。\n- img不设置display:block时，设置宽高100%会有一点偏移\n- 此次页面需要内嵌到京东APP的排行榜，由于之前沟通没有注意到投放途径，加上运营的疏忽，没有安排联调时间。在排期结束后才发现投放页面冲突，\b出现BUG。    \n    - **反思**：下次在需求评审时要注意页面投放途径，如果需要内嵌到京东APP需要安排联调时间，避免再次出现这种情况。\n    - **内嵌\b排行榜（RN WebView）的BUG总结**\n        - 第二次拉取数据不成功：在onload事件完成之后，再次调用接口获取数据代码失效，修改逻辑为在onload事件之前取出所有数据。这种解决方法的缺点是首屏加载时间略长，用户体验不够好。\n        - 进入页面后自动弹出分享弹框：需要加入环境判定，该属性为异步注入，需要延时判定，如下：\n            ```JavaScript\n            window.onload = function() {\n                setTimeout(function(){\n                    if(window.inRankingListRN) { \n                        // 排行榜环境下 \n                    }\n                    else { ... }\n                }, 200)\n            }\n            ```\n#### 2. 相机节头图（PC&APP）\njshop的视频链接假如需要为可配置的，则必须为jshop生成的视频链接，目前jshop生成的视频链接有问题，无法自动播放，可能是jshop视频存储刚迁移了云服务器的原因。\n\n### 二、\b近期试玩\n#### 1. snap.svg —— 一个操作svg的js库\n- 相关链接   \n    - 官网：http://snapsvg.io/   \n    - 中文API：https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php   \n- 优点\n    - 兼容IE9+、Safari、Chrome、Firefox、Opera；   \n    - 使用起来与jquery很相似，上手快，官方API也比较齐全；   \n    - 大小为82KB\n- 应用：可用于实现一些简单的动画，尤其是一些过渡效果无法通过CSS很好的实现，svg可以替代帧动画和GIF，减少加载资源，快速开发，附上2个假假的demo如下，代码量都没有超过50行：          \n    ![01](/images/weekly/02/snapsvg0.gif)   \n    ![02](/images/weekly/02/snapsvg1.gif)      \n    目前在PC端使用比较良好，snap.svg移动端 iOS、安卓 X5 内核、安卓原生浏览器兼容性都不错，只有部分属性不兼容，以上两个栗子在组内的测试机上显示正常。   \n\n- 兼容性数据来源：   \n    - https://aotu.io/notes/2017/01/22/snapsvg/index.html  \n    - https://developer.mozilla.org/en-US/docs/Web/SVG/Element   ","slug":"两周一报02（20180909）","published":1,"updated":"2019-02-25T06:39:27.337Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05f000qyn7o87goc0f4","content":"<h3 id=\"一、项目汇报\"><a href=\"#一、项目汇报\" class=\"headerlink\" title=\"一、项目汇报\"></a>一、项目汇报</h3><h4 id=\"1-居家大赏主会场总结\"><a href=\"#1-居家大赏主会场总结\" class=\"headerlink\" title=\"1. 居家大赏主会场总结\"></a>1. 居家大赏主会场总结</h4><ul>\n<li>对于点击跳转到其他页面的埋点，需要设置延时让埋点成功上报，避免埋点尚未上报成功页面就已经跳转。</li>\n<li>IOS下滚动卡顿（手指移动开页面就马上停止滚动），通过添加属性：-webkit-overflow-scrolling: touch ，问题解决。</li>\n<li>img不设置display:block时，设置宽高100%会有一点偏移</li>\n<li>此次页面需要内嵌到京东APP的排行榜，由于之前沟通没有注意到投放途径，加上运营的疏忽，没有安排联调时间。在排期结束后才发现投放页面冲突，\b出现BUG。    <ul>\n<li><strong>反思</strong>：下次在需求评审时要注意页面投放途径，如果需要内嵌到京东APP需要安排联调时间，避免再次出现这种情况。</li>\n<li><strong>内嵌\b排行榜（RN WebView）的BUG总结</strong><ul>\n<li>第二次拉取数据不成功：在onload事件完成之后，再次调用接口获取数据代码失效，修改逻辑为在onload事件之前取出所有数据。这种解决方法的缺点是首屏加载时间略长，用户体验不够好。</li>\n<li>进入页面后自动弹出分享弹框：需要加入环境判定，该属性为异步注入，需要延时判定，如下：  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.inRankingListRN) &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 排行榜环境下 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; ... &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-相机节头图（PC-amp-APP）\"><a href=\"#2-相机节头图（PC-amp-APP）\" class=\"headerlink\" title=\"2. 相机节头图（PC&amp;APP）\"></a>2. 相机节头图（PC&amp;APP）</h4><p>jshop的视频链接假如需要为可配置的，则必须为jshop生成的视频链接，目前jshop生成的视频链接有问题，无法自动播放，可能是jshop视频存储刚迁移了云服务器的原因。</p>\n<h3 id=\"二、近期试玩\"><a href=\"#二、近期试玩\" class=\"headerlink\" title=\"二、\b近期试玩\"></a>二、\b近期试玩</h3><h4 id=\"1-snap-svg-——-一个操作svg的js库\"><a href=\"#1-snap-svg-——-一个操作svg的js库\" class=\"headerlink\" title=\"1. snap.svg —— 一个操作svg的js库\"></a>1. snap.svg —— 一个操作svg的js库</h4><ul>\n<li>相关链接   <ul>\n<li>官网：<a href=\"http://snapsvg.io/\" target=\"_blank\" rel=\"noopener\">http://snapsvg.io/</a>   </li>\n<li>中文API：<a href=\"https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php</a>   </li>\n</ul>\n</li>\n<li>优点<ul>\n<li>兼容IE9+、Safari、Chrome、Firefox、Opera；   </li>\n<li>使用起来与jquery很相似，上手快，官方API也比较齐全；   </li>\n<li>大小为82KB</li>\n</ul>\n</li>\n<li><p>应用：可用于实现一些简单的动画，尤其是一些过渡效果无法通过CSS很好的实现，svg可以替代帧动画和GIF，减少加载资源，快速开发，附上2个假假的demo如下，代码量都没有超过50行：<br>  <img src=\"/images/weekly/02/snapsvg0.gif\" alt=\"01\"><br>  <img src=\"/images/weekly/02/snapsvg1.gif\" alt=\"02\"><br>  目前在PC端使用比较良好，snap.svg移动端 iOS、安卓 X5 内核、安卓原生浏览器兼容性都不错，只有部分属性不兼容，以上两个栗子在组内的测试机上显示正常。   </p>\n</li>\n<li><p>兼容性数据来源：   </p>\n<ul>\n<li><a href=\"https://aotu.io/notes/2017/01/22/snapsvg/index.html\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/01/22/snapsvg/index.html</a>  </li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/SVG/Element</a>   </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、项目汇报\"><a href=\"#一、项目汇报\" class=\"headerlink\" title=\"一、项目汇报\"></a>一、项目汇报</h3><h4 id=\"1-居家大赏主会场总结\"><a href=\"#1-居家大赏主会场总结\" class=\"headerlink\" title=\"1. 居家大赏主会场总结\"></a>1. 居家大赏主会场总结</h4><ul>\n<li>对于点击跳转到其他页面的埋点，需要设置延时让埋点成功上报，避免埋点尚未上报成功页面就已经跳转。</li>\n<li>IOS下滚动卡顿（手指移动开页面就马上停止滚动），通过添加属性：-webkit-overflow-scrolling: touch ，问题解决。</li>\n<li>img不设置display:block时，设置宽高100%会有一点偏移</li>\n<li>此次页面需要内嵌到京东APP的排行榜，由于之前沟通没有注意到投放途径，加上运营的疏忽，没有安排联调时间。在排期结束后才发现投放页面冲突，\b出现BUG。    <ul>\n<li><strong>反思</strong>：下次在需求评审时要注意页面投放途径，如果需要内嵌到京东APP需要安排联调时间，避免再次出现这种情况。</li>\n<li><strong>内嵌\b排行榜（RN WebView）的BUG总结</strong><ul>\n<li>第二次拉取数据不成功：在onload事件完成之后，再次调用接口获取数据代码失效，修改逻辑为在onload事件之前取出所有数据。这种解决方法的缺点是首屏加载时间略长，用户体验不够好。</li>\n<li>进入页面后自动弹出分享弹框：需要加入环境判定，该属性为异步注入，需要延时判定，如下：  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.inRankingListRN) &#123; </span><br><span class=\"line\">            <span class=\"comment\">// 排行榜环境下 </span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123; ... &#125;</span><br><span class=\"line\">    &#125;, <span class=\"number\">200</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-相机节头图（PC-amp-APP）\"><a href=\"#2-相机节头图（PC-amp-APP）\" class=\"headerlink\" title=\"2. 相机节头图（PC&amp;APP）\"></a>2. 相机节头图（PC&amp;APP）</h4><p>jshop的视频链接假如需要为可配置的，则必须为jshop生成的视频链接，目前jshop生成的视频链接有问题，无法自动播放，可能是jshop视频存储刚迁移了云服务器的原因。</p>\n<h3 id=\"二、近期试玩\"><a href=\"#二、近期试玩\" class=\"headerlink\" title=\"二、\b近期试玩\"></a>二、\b近期试玩</h3><h4 id=\"1-snap-svg-——-一个操作svg的js库\"><a href=\"#1-snap-svg-——-一个操作svg的js库\" class=\"headerlink\" title=\"1. snap.svg —— 一个操作svg的js库\"></a>1. snap.svg —— 一个操作svg的js库</h4><ul>\n<li>相关链接   <ul>\n<li>官网：<a href=\"http://snapsvg.io/\" target=\"_blank\" rel=\"noopener\">http://snapsvg.io/</a>   </li>\n<li>中文API：<a href=\"https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/Element.add.php</a>   </li>\n</ul>\n</li>\n<li>优点<ul>\n<li>兼容IE9+、Safari、Chrome、Firefox、Opera；   </li>\n<li>使用起来与jquery很相似，上手快，官方API也比较齐全；   </li>\n<li>大小为82KB</li>\n</ul>\n</li>\n<li><p>应用：可用于实现一些简单的动画，尤其是一些过渡效果无法通过CSS很好的实现，svg可以替代帧动画和GIF，减少加载资源，快速开发，附上2个假假的demo如下，代码量都没有超过50行：<br>  <img src=\"/images/weekly/02/snapsvg0.gif\" alt=\"01\"><br>  <img src=\"/images/weekly/02/snapsvg1.gif\" alt=\"02\"><br>  目前在PC端使用比较良好，snap.svg移动端 iOS、安卓 X5 内核、安卓原生浏览器兼容性都不错，只有部分属性不兼容，以上两个栗子在组内的测试机上显示正常。   </p>\n</li>\n<li><p>兼容性数据来源：   </p>\n<ul>\n<li><a href=\"https://aotu.io/notes/2017/01/22/snapsvg/index.html\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/01/22/snapsvg/index.html</a>  </li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG/Element\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/en-US/docs/Web/SVG/Element</a>   </li>\n</ul>\n</li>\n</ul>\n"},{"title":"两周一报03（20180923）","date":"2018-09-23T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，threejs","_content":"\n### 一、本周项目：岁月神偷H5（9.20 - 10.3）\n1. **进度**：20%   \n2. **风险**：H5比较长，涉及的动画比较多，容易有兼容性问题   \n    **预防**：尽量在10月2号左右完成项目，\b多预留测试时间\n\n### 二、近期学习\n1. three.js：WebGL第三方库\n- **描述**：目前使用比较广泛的3D动画库\n- **进度**：50%\n- **输出**：目前正在整理学习文章，已经完成前半部分基础篇，详细文章如下，一些复杂的交互等大促过后再继续学习~   \n    - [threejs基础上：初始化与资源加载](https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/)   \n    - [threejs基础下：光照与贴图](https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E5%85%89%E7%85%A7%E4%B8%8E%E8%B4%B4%E5%9B%BE/)   \n    - DEMO：地球，点击坐标显示城市名称，并旋转地球，使坐标旋转到屏幕正中（demo目前定位计算方法还有问题）  \n    ![earth](/images/weekly/03/earth.gif)     ","source":"_posts/两周一报03（20180923）.md","raw":"---\ntitle: 两周一报03（20180923）\ndate: 2018-09-23 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，threejs\n---\n\n### 一、本周项目：岁月神偷H5（9.20 - 10.3）\n1. **进度**：20%   \n2. **风险**：H5比较长，涉及的动画比较多，容易有兼容性问题   \n    **预防**：尽量在10月2号左右完成项目，\b多预留测试时间\n\n### 二、近期学习\n1. three.js：WebGL第三方库\n- **描述**：目前使用比较广泛的3D动画库\n- **进度**：50%\n- **输出**：目前正在整理学习文章，已经完成前半部分基础篇，详细文章如下，一些复杂的交互等大促过后再继续学习~   \n    - [threejs基础上：初始化与资源加载](https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/)   \n    - [threejs基础下：光照与贴图](https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E5%85%89%E7%85%A7%E4%B8%8E%E8%B4%B4%E5%9B%BE/)   \n    - DEMO：地球，点击坐标显示城市名称，并旋转地球，使坐标旋转到屏幕正中（demo目前定位计算方法还有问题）  \n    ![earth](/images/weekly/03/earth.gif)     ","slug":"两周一报03（20180923）","published":1,"updated":"2019-02-25T06:39:07.550Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05g000syn7o2svn7cjm","content":"<h3 id=\"一、本周项目：岁月神偷H5（9-20-10-3）\"><a href=\"#一、本周项目：岁月神偷H5（9-20-10-3）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5（9.20 - 10.3）\"></a>一、本周项目：岁月神偷H5（9.20 - 10.3）</h3><ol>\n<li><strong>进度</strong>：20%   </li>\n<li><strong>风险</strong>：H5比较长，涉及的动画比较多，容易有兼容性问题<br> <strong>预防</strong>：尽量在10月2号左右完成项目，\b多预留测试时间</li>\n</ol>\n<h3 id=\"二、近期学习\"><a href=\"#二、近期学习\" class=\"headerlink\" title=\"二、近期学习\"></a>二、近期学习</h3><ol>\n<li>three.js：WebGL第三方库</li>\n</ol>\n<ul>\n<li><strong>描述</strong>：目前使用比较广泛的3D动画库</li>\n<li><strong>进度</strong>：50%</li>\n<li><strong>输出</strong>：目前正在整理学习文章，已经完成前半部分基础篇，详细文章如下，一些复杂的交互等大促过后再继续学习~   <ul>\n<li><a href=\"https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/\" target=\"_blank\" rel=\"noopener\">threejs基础上：初始化与资源加载</a>   </li>\n<li><a href=\"https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E5%85%89%E7%85%A7%E4%B8%8E%E8%B4%B4%E5%9B%BE/\" target=\"_blank\" rel=\"noopener\">threejs基础下：光照与贴图</a>   </li>\n<li>DEMO：地球，点击坐标显示城市名称，并旋转地球，使坐标旋转到屏幕正中（demo目前定位计算方法还有问题）<br><img src=\"/images/weekly/03/earth.gif\" alt=\"earth\">     </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目：岁月神偷H5（9-20-10-3）\"><a href=\"#一、本周项目：岁月神偷H5（9-20-10-3）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5（9.20 - 10.3）\"></a>一、本周项目：岁月神偷H5（9.20 - 10.3）</h3><ol>\n<li><strong>进度</strong>：20%   </li>\n<li><strong>风险</strong>：H5比较长，涉及的动画比较多，容易有兼容性问题<br> <strong>预防</strong>：尽量在10月2号左右完成项目，\b多预留测试时间</li>\n</ol>\n<h3 id=\"二、近期学习\"><a href=\"#二、近期学习\" class=\"headerlink\" title=\"二、近期学习\"></a>二、近期学习</h3><ol>\n<li>three.js：WebGL第三方库</li>\n</ol>\n<ul>\n<li><strong>描述</strong>：目前使用比较广泛的3D动画库</li>\n<li><strong>进度</strong>：50%</li>\n<li><strong>输出</strong>：目前正在整理学习文章，已经完成前半部分基础篇，详细文章如下，一些复杂的交互等大促过后再继续学习~   <ul>\n<li><a href=\"https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD/\" target=\"_blank\" rel=\"noopener\">threejs基础上：初始化与资源加载</a>   </li>\n<li><a href=\"https://jinglecjy.github.io/2018/09/24/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E5%85%89%E7%85%A7%E4%B8%8E%E8%B4%B4%E5%9B%BE/\" target=\"_blank\" rel=\"noopener\">threejs基础下：光照与贴图</a>   </li>\n<li>DEMO：地球，点击坐标显示城市名称，并旋转地球，使坐标旋转到屏幕正中（demo目前定位计算方法还有问题）<br><img src=\"/images/weekly/03/earth.gif\" alt=\"earth\">     </li>\n</ul>\n</li>\n</ul>\n"},{"title":"两周一报07（20181116）","date":"2018-11-16T10:00:00.000Z","toc":true,"comments":1,"description":"项目总结，本周学习","_content":"### 一、项目总结\n1. **[已完成] 站内攻略高潮期问题总结**\n  - 此次数据查询请求数据量过大，测试提出在弱网络环境下有可能请求超时。 解决：提供一个网络超时toast，提升用户体验。   \n  - 红包雨预约需要每个整点都可预约，每个整点的预约事件id必须不同，用户每次预约都只是预约了某一整点的红包雨。日历组件无法实现规律性的每隔多少时间就提醒一次的预约。\n2. **[进行中] 测试机管理小程序**\n  - 描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。\n  - 进度： 50%，预计下周内完成\n  - 问题：小程序提供的云数据库限制，设计的数据库结构效率较低\n\n### 二、本周学习\n1. 小程序原生开发\n  - 目录结构说明\n  ![小程序原生开发目录结构](/images/weekly/07/miniprogram.png) \n  - vscode插件辅助开发\n  **live sass compile**：修改配置文件\"extensionName\": \".wxss\"，将sass实时打包为wxss。同理如果是习惯用less的，可以用Easy WXLESS。   \n  **vscode weapp api**：提供小程序API提示。   \n  **vscode-wechat**：wxml和wxss语法高亮支持，本来支持本地预览，但是这个插件目前没有维护，预览功能有bug。   \n  sublime可参考https://www.jianshu.com/p/ec0f7c936f23   \n  - 注意点记录  \n    - 小程序是数据驱动开发，无法操作DOM   \n    - 小程序是微信的内部应用，无法获取到window/document   \n    - 云函数上传部署速度很慢，如果在云函数内调用了云数据库，需要上传部署并安装依赖，速度就更慢了，建议本地测试好函数再部署上去。   \n    - 一次只能对一个数据表进行增删改查，如果需要多表关联查询，需要分多次操作。   \n    - 数据表读写操作权限只有四种，注意无法实现所有人均可写数据。   \n\n2. 闯关模式游戏，画画为最主要的互动元素，由玩家画出主角/武器，游戏的开发比较简单，互动方式比较新颖。\n  参考案例： http://zj.qq.com/money/ywl_game_halloween.htm   \n  做了一个简单的demo，实现主体功能，画画并显示到界面上： \n  ![扫一扫体验demo](/images/weekly/07/draw2playQR.png)     \n  ![demo效果](/images/weekly/07/draw2play.gif)","source":"_posts/两周一报07（20181116）.md","raw":"---\ntitle: 两周一报07（20181116）\ndate: 2018-11-16 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目总结，本周学习\n---\n### 一、项目总结\n1. **[已完成] 站内攻略高潮期问题总结**\n  - 此次数据查询请求数据量过大，测试提出在弱网络环境下有可能请求超时。 解决：提供一个网络超时toast，提升用户体验。   \n  - 红包雨预约需要每个整点都可预约，每个整点的预约事件id必须不同，用户每次预约都只是预约了某一整点的红包雨。日历组件无法实现规律性的每隔多少时间就提醒一次的预约。\n2. **[进行中] 测试机管理小程序**\n  - 描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。\n  - 进度： 50%，预计下周内完成\n  - 问题：小程序提供的云数据库限制，设计的数据库结构效率较低\n\n### 二、本周学习\n1. 小程序原生开发\n  - 目录结构说明\n  ![小程序原生开发目录结构](/images/weekly/07/miniprogram.png) \n  - vscode插件辅助开发\n  **live sass compile**：修改配置文件\"extensionName\": \".wxss\"，将sass实时打包为wxss。同理如果是习惯用less的，可以用Easy WXLESS。   \n  **vscode weapp api**：提供小程序API提示。   \n  **vscode-wechat**：wxml和wxss语法高亮支持，本来支持本地预览，但是这个插件目前没有维护，预览功能有bug。   \n  sublime可参考https://www.jianshu.com/p/ec0f7c936f23   \n  - 注意点记录  \n    - 小程序是数据驱动开发，无法操作DOM   \n    - 小程序是微信的内部应用，无法获取到window/document   \n    - 云函数上传部署速度很慢，如果在云函数内调用了云数据库，需要上传部署并安装依赖，速度就更慢了，建议本地测试好函数再部署上去。   \n    - 一次只能对一个数据表进行增删改查，如果需要多表关联查询，需要分多次操作。   \n    - 数据表读写操作权限只有四种，注意无法实现所有人均可写数据。   \n\n2. 闯关模式游戏，画画为最主要的互动元素，由玩家画出主角/武器，游戏的开发比较简单，互动方式比较新颖。\n  参考案例： http://zj.qq.com/money/ywl_game_halloween.htm   \n  做了一个简单的demo，实现主体功能，画画并显示到界面上： \n  ![扫一扫体验demo](/images/weekly/07/draw2playQR.png)     \n  ![demo效果](/images/weekly/07/draw2play.gif)","slug":"两周一报07（20181116）","published":1,"updated":"2019-02-25T06:35:31.930Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05h000wyn7oyomdt3t6","content":"<h3 id=\"一、项目总结\"><a href=\"#一、项目总结\" class=\"headerlink\" title=\"一、项目总结\"></a>一、项目总结</h3><ol>\n<li><strong>[已完成] 站内攻略高潮期问题总结</strong><ul>\n<li>此次数据查询请求数据量过大，测试提出在弱网络环境下有可能请求超时。 解决：提供一个网络超时toast，提升用户体验。   </li>\n<li>红包雨预约需要每个整点都可预约，每个整点的预约事件id必须不同，用户每次预约都只是预约了某一整点的红包雨。日历组件无法实现规律性的每隔多少时间就提醒一次的预约。</li>\n</ul>\n</li>\n<li><strong>[进行中] 测试机管理小程序</strong><ul>\n<li>描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。</li>\n<li>进度： 50%，预计下周内完成</li>\n<li>问题：小程序提供的云数据库限制，设计的数据库结构效率较低</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周学习\"><a href=\"#二、本周学习\" class=\"headerlink\" title=\"二、本周学习\"></a>二、本周学习</h3><ol>\n<li><p>小程序原生开发</p>\n<ul>\n<li>目录结构说明<br><img src=\"/images/weekly/07/miniprogram.png\" alt=\"小程序原生开发目录结构\"> </li>\n<li>vscode插件辅助开发<br><strong>live sass compile</strong>：修改配置文件”extensionName”: “.wxss”，将sass实时打包为wxss。同理如果是习惯用less的，可以用Easy WXLESS。<br><strong>vscode weapp api</strong>：提供小程序API提示。<br><strong>vscode-wechat</strong>：wxml和wxss语法高亮支持，本来支持本地预览，但是这个插件目前没有维护，预览功能有bug。<br>sublime可参考<a href=\"https://www.jianshu.com/p/ec0f7c936f23\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ec0f7c936f23</a>   </li>\n<li>注意点记录  <ul>\n<li>小程序是数据驱动开发，无法操作DOM   </li>\n<li>小程序是微信的内部应用，无法获取到window/document   </li>\n<li>云函数上传部署速度很慢，如果在云函数内调用了云数据库，需要上传部署并安装依赖，速度就更慢了，建议本地测试好函数再部署上去。   </li>\n<li>一次只能对一个数据表进行增删改查，如果需要多表关联查询，需要分多次操作。   </li>\n<li>数据表读写操作权限只有四种，注意无法实现所有人均可写数据。   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>闯关模式游戏，画画为最主要的互动元素，由玩家画出主角/武器，游戏的开发比较简单，互动方式比较新颖。<br>参考案例： <a href=\"http://zj.qq.com/money/ywl_game_halloween.htm\" target=\"_blank\" rel=\"noopener\">http://zj.qq.com/money/ywl_game_halloween.htm</a><br>做了一个简单的demo，实现主体功能，画画并显示到界面上：<br><img src=\"/images/weekly/07/draw2playQR.png\" alt=\"扫一扫体验demo\"><br><img src=\"/images/weekly/07/draw2play.gif\" alt=\"demo效果\"></p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、项目总结\"><a href=\"#一、项目总结\" class=\"headerlink\" title=\"一、项目总结\"></a>一、项目总结</h3><ol>\n<li><strong>[已完成] 站内攻略高潮期问题总结</strong><ul>\n<li>此次数据查询请求数据量过大，测试提出在弱网络环境下有可能请求超时。 解决：提供一个网络超时toast，提升用户体验。   </li>\n<li>红包雨预约需要每个整点都可预约，每个整点的预约事件id必须不同，用户每次预约都只是预约了某一整点的红包雨。日历组件无法实现规律性的每隔多少时间就提醒一次的预约。</li>\n</ul>\n</li>\n<li><strong>[进行中] 测试机管理小程序</strong><ul>\n<li>描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。</li>\n<li>进度： 50%，预计下周内完成</li>\n<li>问题：小程序提供的云数据库限制，设计的数据库结构效率较低</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周学习\"><a href=\"#二、本周学习\" class=\"headerlink\" title=\"二、本周学习\"></a>二、本周学习</h3><ol>\n<li><p>小程序原生开发</p>\n<ul>\n<li>目录结构说明<br><img src=\"/images/weekly/07/miniprogram.png\" alt=\"小程序原生开发目录结构\"> </li>\n<li>vscode插件辅助开发<br><strong>live sass compile</strong>：修改配置文件”extensionName”: “.wxss”，将sass实时打包为wxss。同理如果是习惯用less的，可以用Easy WXLESS。<br><strong>vscode weapp api</strong>：提供小程序API提示。<br><strong>vscode-wechat</strong>：wxml和wxss语法高亮支持，本来支持本地预览，但是这个插件目前没有维护，预览功能有bug。<br>sublime可参考<a href=\"https://www.jianshu.com/p/ec0f7c936f23\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/ec0f7c936f23</a>   </li>\n<li>注意点记录  <ul>\n<li>小程序是数据驱动开发，无法操作DOM   </li>\n<li>小程序是微信的内部应用，无法获取到window/document   </li>\n<li>云函数上传部署速度很慢，如果在云函数内调用了云数据库，需要上传部署并安装依赖，速度就更慢了，建议本地测试好函数再部署上去。   </li>\n<li>一次只能对一个数据表进行增删改查，如果需要多表关联查询，需要分多次操作。   </li>\n<li>数据表读写操作权限只有四种，注意无法实现所有人均可写数据。   </li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>闯关模式游戏，画画为最主要的互动元素，由玩家画出主角/武器，游戏的开发比较简单，互动方式比较新颖。<br>参考案例： <a href=\"http://zj.qq.com/money/ywl_game_halloween.htm\" target=\"_blank\" rel=\"noopener\">http://zj.qq.com/money/ywl_game_halloween.htm</a><br>做了一个简单的demo，实现主体功能，画画并显示到界面上：<br><img src=\"/images/weekly/07/draw2playQR.png\" alt=\"扫一扫体验demo\"><br><img src=\"/images/weekly/07/draw2play.gif\" alt=\"demo效果\"></p>\n</li>\n</ol>\n"},{"title":"两周一报05（20181021）","date":"2018-10-21T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，threejs学习分享","_content":"### 一、本周项目：岁月神偷H5&\b站内攻略详细版高潮期（10.17 ~ 11.02）\n1. 部分安卓机下（测试机华为P10 Android8.0.0）音频播放必须通过click事件触发。\n2. IScroll禁用了原生的click事件，官方推荐使用封装的tap事件，而tap事件只在页面滑动且滑动距离小于10px时触发。\n\n### 二、近期学习\n#### 1. three.js：WebGL第三方库\n- **描述**：目前使用比较广泛的开源3D动画库\n- **进度**：80%\n- **输出**：目前正在整理学习文章，详细文章如下，更复杂的一些问题等大促过后再继续学习~\n  - [threejs基础上：初始化](https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96/)\n  - [threejs基础下：贴图资源加载与光照](https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E8%B4%B4%E5%9B%BE%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%85%89%E7%85%A7/)\n  - [threejs进阶上：动画](https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8A%EF%BC%9A%E5%8A%A8%E7%94%BB/)\n  - [threejs进阶下：\b交互](https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8B%EF%BC%9A%E4%BA%A4%E4%BA%92/)\n  - [threejs问题集锦（随时更新）](https://jinglecjy.github.io/2018/10/11/threejs%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/)\n- **DEMO**\n  - [BUG已修复] 3D地球，可拖动旋转。地球上有城市坐标，点击将该位置旋转到屏幕中央，下方显示城市名称，体验链接和效果展示如下：   \n  链接：https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html   \n    ![扫一扫体验3D地球](/images/weekly/05/qrearth.png)   \n    ![3D地球效果](/images/weekly/05/earth.gif)   \n  - 简单的全景，之前看到的一个全景是需要鱼眼贴图，且比例为2:1，对图片资源要求比较高，所以试着采用了六面体贴图实现了全景demo，感觉效果比球状全景要好很多，顶部和底部不会穿帮，对贴图的要求也降低了不少，只需要提供前/后/上/下/左/右6个面的图二图即可，体验链接和效果展示如下：   \n  链接：https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html   \n  ![扫一扫体验简单全景](/images/weekly/05/qraround.png)    \n  ![简单全景效果](/images/weekly/05/around.gif)   \n       ","source":"_posts/两周一报05（20181021）.md","raw":"---\ntitle: 两周一报05（20181021）\ndate: 2018-10-21 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，threejs学习分享\n---\n### 一、本周项目：岁月神偷H5&\b站内攻略详细版高潮期（10.17 ~ 11.02）\n1. 部分安卓机下（测试机华为P10 Android8.0.0）音频播放必须通过click事件触发。\n2. IScroll禁用了原生的click事件，官方推荐使用封装的tap事件，而tap事件只在页面滑动且滑动距离小于10px时触发。\n\n### 二、近期学习\n#### 1. three.js：WebGL第三方库\n- **描述**：目前使用比较广泛的开源3D动画库\n- **进度**：80%\n- **输出**：目前正在整理学习文章，详细文章如下，更复杂的一些问题等大促过后再继续学习~\n  - [threejs基础上：初始化](https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96/)\n  - [threejs基础下：贴图资源加载与光照](https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E8%B4%B4%E5%9B%BE%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%85%89%E7%85%A7/)\n  - [threejs进阶上：动画](https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8A%EF%BC%9A%E5%8A%A8%E7%94%BB/)\n  - [threejs进阶下：\b交互](https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8B%EF%BC%9A%E4%BA%A4%E4%BA%92/)\n  - [threejs问题集锦（随时更新）](https://jinglecjy.github.io/2018/10/11/threejs%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/)\n- **DEMO**\n  - [BUG已修复] 3D地球，可拖动旋转。地球上有城市坐标，点击将该位置旋转到屏幕中央，下方显示城市名称，体验链接和效果展示如下：   \n  链接：https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html   \n    ![扫一扫体验3D地球](/images/weekly/05/qrearth.png)   \n    ![3D地球效果](/images/weekly/05/earth.gif)   \n  - 简单的全景，之前看到的一个全景是需要鱼眼贴图，且比例为2:1，对图片资源要求比较高，所以试着采用了六面体贴图实现了全景demo，感觉效果比球状全景要好很多，顶部和底部不会穿帮，对贴图的要求也降低了不少，只需要提供前/后/上/下/左/右6个面的图二图即可，体验链接和效果展示如下：   \n  链接：https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html   \n  ![扫一扫体验简单全景](/images/weekly/05/qraround.png)    \n  ![简单全景效果](/images/weekly/05/around.gif)   \n       ","slug":"两周一报05（20181021）","published":1,"updated":"2019-02-25T06:38:39.860Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05i000xyn7o2snq8r3x","content":"<h3 id=\"一、本周项目：岁月神偷H5-amp-站内攻略详细版高潮期（10-17-11-02）\"><a href=\"#一、本周项目：岁月神偷H5-amp-站内攻略详细版高潮期（10-17-11-02）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5&amp;\b站内攻略详细版高潮期（10.17 ~ 11.02）\"></a>一、本周项目：岁月神偷H5&amp;\b站内攻略详细版高潮期（10.17 ~ 11.02）</h3><ol>\n<li>部分安卓机下（测试机华为P10 Android8.0.0）音频播放必须通过click事件触发。</li>\n<li>IScroll禁用了原生的click事件，官方推荐使用封装的tap事件，而tap事件只在页面滑动且滑动距离小于10px时触发。</li>\n</ol>\n<h3 id=\"二、近期学习\"><a href=\"#二、近期学习\" class=\"headerlink\" title=\"二、近期学习\"></a>二、近期学习</h3><h4 id=\"1-three-js：WebGL第三方库\"><a href=\"#1-three-js：WebGL第三方库\" class=\"headerlink\" title=\"1. three.js：WebGL第三方库\"></a>1. three.js：WebGL第三方库</h4><ul>\n<li><strong>描述</strong>：目前使用比较广泛的开源3D动画库</li>\n<li><strong>进度</strong>：80%</li>\n<li><strong>输出</strong>：目前正在整理学习文章，详细文章如下，更复杂的一些问题等大促过后再继续学习~<ul>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">threejs基础上：初始化</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E8%B4%B4%E5%9B%BE%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%85%89%E7%85%A7/\" target=\"_blank\" rel=\"noopener\">threejs基础下：贴图资源加载与光照</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8A%EF%BC%9A%E5%8A%A8%E7%94%BB/\" target=\"_blank\" rel=\"noopener\">threejs进阶上：动画</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8B%EF%BC%9A%E4%BA%A4%E4%BA%92/\" target=\"_blank\" rel=\"noopener\">threejs进阶下：\b交互</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/\" target=\"_blank\" rel=\"noopener\">threejs问题集锦（随时更新）</a></li>\n</ul>\n</li>\n<li><strong>DEMO</strong><ul>\n<li>[BUG已修复] 3D地球，可拖动旋转。地球上有城市坐标，点击将该位置旋转到屏幕中央，下方显示城市名称，体验链接和效果展示如下：<br>链接：<a href=\"https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html\" target=\"_blank\" rel=\"noopener\">https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html</a><br><img src=\"/images/weekly/05/qrearth.png\" alt=\"扫一扫体验3D地球\"><br><img src=\"/images/weekly/05/earth.gif\" alt=\"3D地球效果\">   </li>\n<li>简单的全景，之前看到的一个全景是需要鱼眼贴图，且比例为2:1，对图片资源要求比较高，所以试着采用了六面体贴图实现了全景demo，感觉效果比球状全景要好很多，顶部和底部不会穿帮，对贴图的要求也降低了不少，只需要提供前/后/上/下/左/右6个面的图二图即可，体验链接和效果展示如下：<br>链接：<a href=\"https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html\" target=\"_blank\" rel=\"noopener\">https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html</a><br><img src=\"/images/weekly/05/qraround.png\" alt=\"扫一扫体验简单全景\"><br><img src=\"/images/weekly/05/around.gif\" alt=\"简单全景效果\">   </li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目：岁月神偷H5-amp-站内攻略详细版高潮期（10-17-11-02）\"><a href=\"#一、本周项目：岁月神偷H5-amp-站内攻略详细版高潮期（10-17-11-02）\" class=\"headerlink\" title=\"一、本周项目：岁月神偷H5&amp;\b站内攻略详细版高潮期（10.17 ~ 11.02）\"></a>一、本周项目：岁月神偷H5&amp;\b站内攻略详细版高潮期（10.17 ~ 11.02）</h3><ol>\n<li>部分安卓机下（测试机华为P10 Android8.0.0）音频播放必须通过click事件触发。</li>\n<li>IScroll禁用了原生的click事件，官方推荐使用封装的tap事件，而tap事件只在页面滑动且滑动距离小于10px时触发。</li>\n</ol>\n<h3 id=\"二、近期学习\"><a href=\"#二、近期学习\" class=\"headerlink\" title=\"二、近期学习\"></a>二、近期学习</h3><h4 id=\"1-three-js：WebGL第三方库\"><a href=\"#1-three-js：WebGL第三方库\" class=\"headerlink\" title=\"1. three.js：WebGL第三方库\"></a>1. three.js：WebGL第三方库</h4><ul>\n<li><strong>描述</strong>：目前使用比较广泛的开源3D动画库</li>\n<li><strong>进度</strong>：80%</li>\n<li><strong>输出</strong>：目前正在整理学习文章，详细文章如下，更复杂的一些问题等大促过后再继续学习~<ul>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8A%EF%BC%9A%E5%88%9D%E5%A7%8B%E5%8C%96/\" target=\"_blank\" rel=\"noopener\">threejs基础上：初始化</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E5%9F%BA%E7%A1%80%E4%B8%8B%EF%BC%9A%E8%B4%B4%E5%9B%BE%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%85%89%E7%85%A7/\" target=\"_blank\" rel=\"noopener\">threejs基础下：贴图资源加载与光照</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8A%EF%BC%9A%E5%8A%A8%E7%94%BB/\" target=\"_blank\" rel=\"noopener\">threejs进阶上：动画</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E8%BF%9B%E9%98%B6%E4%B8%8B%EF%BC%9A%E4%BA%A4%E4%BA%92/\" target=\"_blank\" rel=\"noopener\">threejs进阶下：\b交互</a></li>\n<li><a href=\"https://jinglecjy.github.io/2018/10/11/threejs%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/\" target=\"_blank\" rel=\"noopener\">threejs问题集锦（随时更新）</a></li>\n</ul>\n</li>\n<li><strong>DEMO</strong><ul>\n<li>[BUG已修复] 3D地球，可拖动旋转。地球上有城市坐标，点击将该位置旋转到屏幕中央，下方显示城市名称，体验链接和效果展示如下：<br>链接：<a href=\"https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html\" target=\"_blank\" rel=\"noopener\">https://h5.m.jd.com/babelDiy/Zeus/iGeFvMLrNuQqQwwW4grhhREEDVS/index.html</a><br><img src=\"/images/weekly/05/qrearth.png\" alt=\"扫一扫体验3D地球\"><br><img src=\"/images/weekly/05/earth.gif\" alt=\"3D地球效果\">   </li>\n<li>简单的全景，之前看到的一个全景是需要鱼眼贴图，且比例为2:1，对图片资源要求比较高，所以试着采用了六面体贴图实现了全景demo，感觉效果比球状全景要好很多，顶部和底部不会穿帮，对贴图的要求也降低了不少，只需要提供前/后/上/下/左/右6个面的图二图即可，体验链接和效果展示如下：<br>链接：<a href=\"https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html\" target=\"_blank\" rel=\"noopener\">https://h5.m.jd.com/babelDiy/Zeus/PmFEDsErFeuFrSgqVUsx11pbuZq/index.html</a><br><img src=\"/images/weekly/05/qraround.png\" alt=\"扫一扫体验简单全景\"><br><img src=\"/images/weekly/05/around.gif\" alt=\"简单全景效果\">   </li>\n</ul>\n</li>\n</ul>\n"},{"title":"两周一报06（20181102）","date":"2018-11-02T10:00:00.000Z","toc":true,"comments":1,"description":"2018年11月行业动态，项目进度，文档撰写分享","_content":"### 一、行业动态\n1. **WebAssembly标准**   \n  把除javascript外的编程语言转换为能在现代浏览器中运行的代码的技术，目的是和javascript结合用于开发大型web项目，提升性能。该标准受到了主流浏览器的支持（Firefox/Chrome/Safari/Edge），但是依据PSPDFKit对WebAssembly的实际测试，除了Firefox外的其他浏览器测试结果都不理想，有兴趣的同学可以看看PSPDFKit开源的WebAssembly测试基准，具体的测试效果如下：   \n  ![webassembly性能测试](/images/weekly/06/webassembly.png)\n2. **小程序云开发**    \n  - 描述：帮助开发者快速构建微信小程序的后端服务，提供了云函数、云数据库和云文件存储能力，并将这些能力封装成特定的接口，以wx.cloud.xx的形式调用。\n  - 思考：\n    - 接口只能在小程序环境中调用，适用于逻辑简单的小程序开发。\n    - 降低了开发门槛，弱化了后端在小程序开发中的作用，安全性和稳定性由官方保证。\n  - 来源：http://www.alloyteam.com/page/0/\n\n### 二、本周项目：M端站内攻略高潮期\n1. 秒杀倒计时一开始的实现策略是setTimeout+定时更新服务器时间校准。后期发现当手机黑屏时，setTimeout也会随之终止。   \n  **解决**：初始时计算出本地时间与服务器时间的差值，然后以本地时间+差值作为当前时间，进行倒计时。同样定期更新服务器时间校准差值。\n2. 榜单接口很不稳定，subsku字段经常不下发或者为空？   \n  **解决**：加入兜底方案，当返回的subsku少于3个时，选用下一个榜单，当少于3个榜单符合条件时隐藏楼层。\n \n### 三、零散分享   \n前段时间开始试着写threejs的文档，体会到写文档是一件很困难的事情，近期刚好看到一篇介绍怎么撰写技术文档的文章，有兴趣的同学可以看看详细内容~文章将技术文档分为了四类，分别介绍了撰写这四类文档的注意点，总结如下：   \n\n| 类型 | 介绍 | 要点 |\n| --- | --- | --- |\n| 教程（tutorial） | 1. 学习导向<br/> 2. 适合入门<br/> 3. 系列课程 | 1. 边学边做，要让读者感受到立竿见影的效果<br/> 2. 提供具体的可操作的步骤，减少抽象的概念和不必要的解释 |\n| 指导（guide） | 1. 目标导向<br/> 2. 解决问题<br/> 3. 分步骤 | 1. 提供一系列的步骤达到具体的结果，目的是解决问题<br/> 2. 不需要解释概念，解决方法具有一定的弹性，适用于不同场景<br/> 3. 实用性优先，不需要面面俱到，比如说一些大部分都知道的操作可以直接省去 |\n| 解释（explanation）| 1. 理解导向<br/> 2. 背景介绍 | 1. 介绍项目背景环境<br/> 2. 提供与同类型的对比，或者说是备选方案 |\n| 参考（reference） | 1. 信息导向<br/> 2. 描述性<br/> 3. 精确完整 | 1. 文档结构与代码结构一致<br/> 2. 整体的格式保持一致<br/> 3. 只描述，不提供具体的应用，精确第一 |\n\n详情见https://www.divio.com/blog/documentation/， ","source":"_posts/两周一报06（20181102）.md","raw":"---\ntitle: 两周一报06（20181102）\ndate: 2018-11-02 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 2018年11月行业动态，项目进度，文档撰写分享\n---\n### 一、行业动态\n1. **WebAssembly标准**   \n  把除javascript外的编程语言转换为能在现代浏览器中运行的代码的技术，目的是和javascript结合用于开发大型web项目，提升性能。该标准受到了主流浏览器的支持（Firefox/Chrome/Safari/Edge），但是依据PSPDFKit对WebAssembly的实际测试，除了Firefox外的其他浏览器测试结果都不理想，有兴趣的同学可以看看PSPDFKit开源的WebAssembly测试基准，具体的测试效果如下：   \n  ![webassembly性能测试](/images/weekly/06/webassembly.png)\n2. **小程序云开发**    \n  - 描述：帮助开发者快速构建微信小程序的后端服务，提供了云函数、云数据库和云文件存储能力，并将这些能力封装成特定的接口，以wx.cloud.xx的形式调用。\n  - 思考：\n    - 接口只能在小程序环境中调用，适用于逻辑简单的小程序开发。\n    - 降低了开发门槛，弱化了后端在小程序开发中的作用，安全性和稳定性由官方保证。\n  - 来源：http://www.alloyteam.com/page/0/\n\n### 二、本周项目：M端站内攻略高潮期\n1. 秒杀倒计时一开始的实现策略是setTimeout+定时更新服务器时间校准。后期发现当手机黑屏时，setTimeout也会随之终止。   \n  **解决**：初始时计算出本地时间与服务器时间的差值，然后以本地时间+差值作为当前时间，进行倒计时。同样定期更新服务器时间校准差值。\n2. 榜单接口很不稳定，subsku字段经常不下发或者为空？   \n  **解决**：加入兜底方案，当返回的subsku少于3个时，选用下一个榜单，当少于3个榜单符合条件时隐藏楼层。\n \n### 三、零散分享   \n前段时间开始试着写threejs的文档，体会到写文档是一件很困难的事情，近期刚好看到一篇介绍怎么撰写技术文档的文章，有兴趣的同学可以看看详细内容~文章将技术文档分为了四类，分别介绍了撰写这四类文档的注意点，总结如下：   \n\n| 类型 | 介绍 | 要点 |\n| --- | --- | --- |\n| 教程（tutorial） | 1. 学习导向<br/> 2. 适合入门<br/> 3. 系列课程 | 1. 边学边做，要让读者感受到立竿见影的效果<br/> 2. 提供具体的可操作的步骤，减少抽象的概念和不必要的解释 |\n| 指导（guide） | 1. 目标导向<br/> 2. 解决问题<br/> 3. 分步骤 | 1. 提供一系列的步骤达到具体的结果，目的是解决问题<br/> 2. 不需要解释概念，解决方法具有一定的弹性，适用于不同场景<br/> 3. 实用性优先，不需要面面俱到，比如说一些大部分都知道的操作可以直接省去 |\n| 解释（explanation）| 1. 理解导向<br/> 2. 背景介绍 | 1. 介绍项目背景环境<br/> 2. 提供与同类型的对比，或者说是备选方案 |\n| 参考（reference） | 1. 信息导向<br/> 2. 描述性<br/> 3. 精确完整 | 1. 文档结构与代码结构一致<br/> 2. 整体的格式保持一致<br/> 3. 只描述，不提供具体的应用，精确第一 |\n\n详情见https://www.divio.com/blog/documentation/， ","slug":"两周一报06（20181102）","published":1,"updated":"2019-02-25T06:38:10.823Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05j0011yn7o911ljmqr","content":"<h3 id=\"一、行业动态\"><a href=\"#一、行业动态\" class=\"headerlink\" title=\"一、行业动态\"></a>一、行业动态</h3><ol>\n<li><strong>WebAssembly标准</strong><br>把除javascript外的编程语言转换为能在现代浏览器中运行的代码的技术，目的是和javascript结合用于开发大型web项目，提升性能。该标准受到了主流浏览器的支持（Firefox/Chrome/Safari/Edge），但是依据PSPDFKit对WebAssembly的实际测试，除了Firefox外的其他浏览器测试结果都不理想，有兴趣的同学可以看看PSPDFKit开源的WebAssembly测试基准，具体的测试效果如下：<br><img src=\"/images/weekly/06/webassembly.png\" alt=\"webassembly性能测试\"></li>\n<li><strong>小程序云开发</strong>    <ul>\n<li>描述：帮助开发者快速构建微信小程序的后端服务，提供了云函数、云数据库和云文件存储能力，并将这些能力封装成特定的接口，以wx.cloud.xx的形式调用。</li>\n<li>思考：<ul>\n<li>接口只能在小程序环境中调用，适用于逻辑简单的小程序开发。</li>\n<li>降低了开发门槛，弱化了后端在小程序开发中的作用，安全性和稳定性由官方保证。</li>\n</ul>\n</li>\n<li>来源：<a href=\"http://www.alloyteam.com/page/0/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/page/0/</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周项目：M端站内攻略高潮期\"><a href=\"#二、本周项目：M端站内攻略高潮期\" class=\"headerlink\" title=\"二、本周项目：M端站内攻略高潮期\"></a>二、本周项目：M端站内攻略高潮期</h3><ol>\n<li>秒杀倒计时一开始的实现策略是setTimeout+定时更新服务器时间校准。后期发现当手机黑屏时，setTimeout也会随之终止。<br><strong>解决</strong>：初始时计算出本地时间与服务器时间的差值，然后以本地时间+差值作为当前时间，进行倒计时。同样定期更新服务器时间校准差值。</li>\n<li>榜单接口很不稳定，subsku字段经常不下发或者为空？<br><strong>解决</strong>：加入兜底方案，当返回的subsku少于3个时，选用下一个榜单，当少于3个榜单符合条件时隐藏楼层。</li>\n</ol>\n<h3 id=\"三、零散分享\"><a href=\"#三、零散分享\" class=\"headerlink\" title=\"三、零散分享\"></a>三、零散分享</h3><p>前段时间开始试着写threejs的文档，体会到写文档是一件很困难的事情，近期刚好看到一篇介绍怎么撰写技术文档的文章，有兴趣的同学可以看看详细内容~文章将技术文档分为了四类，分别介绍了撰写这四类文档的注意点，总结如下：   </p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>介绍</th>\n<th>要点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>教程（tutorial）</td>\n<td>1. 学习导向<br> 2. 适合入门<br> 3. 系列课程</td>\n<td>1. 边学边做，要让读者感受到立竿见影的效果<br> 2. 提供具体的可操作的步骤，减少抽象的概念和不必要的解释</td>\n</tr>\n<tr>\n<td>指导（guide）</td>\n<td>1. 目标导向<br> 2. 解决问题<br> 3. 分步骤</td>\n<td>1. 提供一系列的步骤达到具体的结果，目的是解决问题<br> 2. 不需要解释概念，解决方法具有一定的弹性，适用于不同场景<br> 3. 实用性优先，不需要面面俱到，比如说一些大部分都知道的操作可以直接省去</td>\n</tr>\n<tr>\n<td>解释（explanation）</td>\n<td>1. 理解导向<br> 2. 背景介绍</td>\n<td>1. 介绍项目背景环境<br> 2. 提供与同类型的对比，或者说是备选方案</td>\n</tr>\n<tr>\n<td>参考（reference）</td>\n<td>1. 信息导向<br> 2. 描述性<br> 3. 精确完整</td>\n<td>1. 文档结构与代码结构一致<br> 2. 整体的格式保持一致<br> 3. 只描述，不提供具体的应用，精确第一</td>\n</tr>\n</tbody>\n</table>\n<p>详情见<a href=\"https://www.divio.com/blog/documentation/，\" target=\"_blank\" rel=\"noopener\">https://www.divio.com/blog/documentation/，</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、行业动态\"><a href=\"#一、行业动态\" class=\"headerlink\" title=\"一、行业动态\"></a>一、行业动态</h3><ol>\n<li><strong>WebAssembly标准</strong><br>把除javascript外的编程语言转换为能在现代浏览器中运行的代码的技术，目的是和javascript结合用于开发大型web项目，提升性能。该标准受到了主流浏览器的支持（Firefox/Chrome/Safari/Edge），但是依据PSPDFKit对WebAssembly的实际测试，除了Firefox外的其他浏览器测试结果都不理想，有兴趣的同学可以看看PSPDFKit开源的WebAssembly测试基准，具体的测试效果如下：<br><img src=\"/images/weekly/06/webassembly.png\" alt=\"webassembly性能测试\"></li>\n<li><strong>小程序云开发</strong>    <ul>\n<li>描述：帮助开发者快速构建微信小程序的后端服务，提供了云函数、云数据库和云文件存储能力，并将这些能力封装成特定的接口，以wx.cloud.xx的形式调用。</li>\n<li>思考：<ul>\n<li>接口只能在小程序环境中调用，适用于逻辑简单的小程序开发。</li>\n<li>降低了开发门槛，弱化了后端在小程序开发中的作用，安全性和稳定性由官方保证。</li>\n</ul>\n</li>\n<li>来源：<a href=\"http://www.alloyteam.com/page/0/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/page/0/</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周项目：M端站内攻略高潮期\"><a href=\"#二、本周项目：M端站内攻略高潮期\" class=\"headerlink\" title=\"二、本周项目：M端站内攻略高潮期\"></a>二、本周项目：M端站内攻略高潮期</h3><ol>\n<li>秒杀倒计时一开始的实现策略是setTimeout+定时更新服务器时间校准。后期发现当手机黑屏时，setTimeout也会随之终止。<br><strong>解决</strong>：初始时计算出本地时间与服务器时间的差值，然后以本地时间+差值作为当前时间，进行倒计时。同样定期更新服务器时间校准差值。</li>\n<li>榜单接口很不稳定，subsku字段经常不下发或者为空？<br><strong>解决</strong>：加入兜底方案，当返回的subsku少于3个时，选用下一个榜单，当少于3个榜单符合条件时隐藏楼层。</li>\n</ol>\n<h3 id=\"三、零散分享\"><a href=\"#三、零散分享\" class=\"headerlink\" title=\"三、零散分享\"></a>三、零散分享</h3><p>前段时间开始试着写threejs的文档，体会到写文档是一件很困难的事情，近期刚好看到一篇介绍怎么撰写技术文档的文章，有兴趣的同学可以看看详细内容~文章将技术文档分为了四类，分别介绍了撰写这四类文档的注意点，总结如下：   </p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>介绍</th>\n<th>要点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>教程（tutorial）</td>\n<td>1. 学习导向<br> 2. 适合入门<br> 3. 系列课程</td>\n<td>1. 边学边做，要让读者感受到立竿见影的效果<br> 2. 提供具体的可操作的步骤，减少抽象的概念和不必要的解释</td>\n</tr>\n<tr>\n<td>指导（guide）</td>\n<td>1. 目标导向<br> 2. 解决问题<br> 3. 分步骤</td>\n<td>1. 提供一系列的步骤达到具体的结果，目的是解决问题<br> 2. 不需要解释概念，解决方法具有一定的弹性，适用于不同场景<br> 3. 实用性优先，不需要面面俱到，比如说一些大部分都知道的操作可以直接省去</td>\n</tr>\n<tr>\n<td>解释（explanation）</td>\n<td>1. 理解导向<br> 2. 背景介绍</td>\n<td>1. 介绍项目背景环境<br> 2. 提供与同类型的对比，或者说是备选方案</td>\n</tr>\n<tr>\n<td>参考（reference）</td>\n<td>1. 信息导向<br> 2. 描述性<br> 3. 精确完整</td>\n<td>1. 文档结构与代码结构一致<br> 2. 整体的格式保持一致<br> 3. 只描述，不提供具体的应用，精确第一</td>\n</tr>\n</tbody>\n</table>\n<p>详情见<a href=\"https://www.divio.com/blog/documentation/，\" target=\"_blank\" rel=\"noopener\">https://www.divio.com/blog/documentation/，</a> </p>\n"},{"title":"两周一报08（20181130）","date":"2018-11-30T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度，小程序云开发总结","_content":"### 一、本周项目\n1. **[待提测] 双十二主会场小院标签楼层**   \n  - 进度：100%   \n  - 问题：上游接口还在测试中，接口未上线影响提测进度。   \n\n\n2. **[进行中] 测试机管理小程序**   \n  - 描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。\n  - 进度： 80%\n  - 问题：一开始没有想好完整的交互模式，导致一边做一边改，影响效率\n\n### 二、小程序云开发踩坑总结\n1. **问题整理**\n  - 云开发数据库无法联表查询，导致每次查询手机列表都要同时取出三个表的数据，再进行处理，拉取数据十分耗时。小程序云开发社区反馈后期会优化联表操作，建议目前采用添加冗余的方式来加快数据拉取。\n  - 上传文件到小程序云开发服务器后，返回的是一个文件fileid，通过这个ID生成的图片链接有效期最长只有一天。\n  - 为了前后端解耦，考虑将所有的数据库操作都放在了云函数中，由于功能不同导致云函数数量很多，对于复杂需求难以维护。\n  - 小程序码生成的接口共有A/B/C三个，其中A/C有数量限制，只有B是不限数量，但是只能生成线上小程序的小程序码。\n\n2. **总结**\n  目前云开发的功能还比较简单，而且BUG较多，想要试水的话建议可以用一用云函数，方便代码复用，其他如云数据库，只支持简单的增删改查，稍微复杂的操作就会很吃力，而云存储给的权限比较吝啬，生成文件链接还需要根据文件ID再访问一次，链接有效期最长只有一天，用起来比较繁琐。","source":"_posts/两周一报08（20181130）.md","raw":"---\ntitle: 两周一报08（20181130）\ndate: 2018-11-30 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度，小程序云开发总结\n---\n### 一、本周项目\n1. **[待提测] 双十二主会场小院标签楼层**   \n  - 进度：100%   \n  - 问题：上游接口还在测试中，接口未上线影响提测进度。   \n\n\n2. **[进行中] 测试机管理小程序**   \n  - 描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。\n  - 进度： 80%\n  - 问题：一开始没有想好完整的交互模式，导致一边做一边改，影响效率\n\n### 二、小程序云开发踩坑总结\n1. **问题整理**\n  - 云开发数据库无法联表查询，导致每次查询手机列表都要同时取出三个表的数据，再进行处理，拉取数据十分耗时。小程序云开发社区反馈后期会优化联表操作，建议目前采用添加冗余的方式来加快数据拉取。\n  - 上传文件到小程序云开发服务器后，返回的是一个文件fileid，通过这个ID生成的图片链接有效期最长只有一天。\n  - 为了前后端解耦，考虑将所有的数据库操作都放在了云函数中，由于功能不同导致云函数数量很多，对于复杂需求难以维护。\n  - 小程序码生成的接口共有A/B/C三个，其中A/C有数量限制，只有B是不限数量，但是只能生成线上小程序的小程序码。\n\n2. **总结**\n  目前云开发的功能还比较简单，而且BUG较多，想要试水的话建议可以用一用云函数，方便代码复用，其他如云数据库，只支持简单的增删改查，稍微复杂的操作就会很吃力，而云存储给的权限比较吝啬，生成文件链接还需要根据文件ID再访问一次，链接有效期最长只有一天，用起来比较繁琐。","slug":"两周一报08（20181130）","published":1,"updated":"2019-02-25T06:35:14.720Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05k0012yn7oo3me7hc7","content":"<h3 id=\"一、本周项目\"><a href=\"#一、本周项目\" class=\"headerlink\" title=\"一、本周项目\"></a>一、本周项目</h3><ol>\n<li><strong>[待提测] 双十二主会场小院标签楼层</strong>   <ul>\n<li>进度：100%   </li>\n<li>问题：上游接口还在测试中，接口未上线影响提测进度。   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>[进行中] 测试机管理小程序</strong>   <ul>\n<li>描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。</li>\n<li>进度： 80%</li>\n<li>问题：一开始没有想好完整的交互模式，导致一边做一边改，影响效率</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、小程序云开发踩坑总结\"><a href=\"#二、小程序云开发踩坑总结\" class=\"headerlink\" title=\"二、小程序云开发踩坑总结\"></a>二、小程序云开发踩坑总结</h3><ol>\n<li><p><strong>问题整理</strong></p>\n<ul>\n<li>云开发数据库无法联表查询，导致每次查询手机列表都要同时取出三个表的数据，再进行处理，拉取数据十分耗时。小程序云开发社区反馈后期会优化联表操作，建议目前采用添加冗余的方式来加快数据拉取。</li>\n<li>上传文件到小程序云开发服务器后，返回的是一个文件fileid，通过这个ID生成的图片链接有效期最长只有一天。</li>\n<li>为了前后端解耦，考虑将所有的数据库操作都放在了云函数中，由于功能不同导致云函数数量很多，对于复杂需求难以维护。</li>\n<li>小程序码生成的接口共有A/B/C三个，其中A/C有数量限制，只有B是不限数量，但是只能生成线上小程序的小程序码。</li>\n</ul>\n</li>\n<li><p><strong>总结</strong><br>目前云开发的功能还比较简单，而且BUG较多，想要试水的话建议可以用一用云函数，方便代码复用，其他如云数据库，只支持简单的增删改查，稍微复杂的操作就会很吃力，而云存储给的权限比较吝啬，生成文件链接还需要根据文件ID再访问一次，链接有效期最长只有一天，用起来比较繁琐。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目\"><a href=\"#一、本周项目\" class=\"headerlink\" title=\"一、本周项目\"></a>一、本周项目</h3><ol>\n<li><strong>[待提测] 双十二主会场小院标签楼层</strong>   <ul>\n<li>进度：100%   </li>\n<li>问题：上游接口还在测试中，接口未上线影响提测进度。   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>[进行中] 测试机管理小程序</strong>   <ul>\n<li>描述：通过扫描每个手机专有的二维码借取/归还部门内测试机，提供个人手机及凹凸实验室测试机信息查询。</li>\n<li>进度： 80%</li>\n<li>问题：一开始没有想好完整的交互模式，导致一边做一边改，影响效率</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、小程序云开发踩坑总结\"><a href=\"#二、小程序云开发踩坑总结\" class=\"headerlink\" title=\"二、小程序云开发踩坑总结\"></a>二、小程序云开发踩坑总结</h3><ol>\n<li><p><strong>问题整理</strong></p>\n<ul>\n<li>云开发数据库无法联表查询，导致每次查询手机列表都要同时取出三个表的数据，再进行处理，拉取数据十分耗时。小程序云开发社区反馈后期会优化联表操作，建议目前采用添加冗余的方式来加快数据拉取。</li>\n<li>上传文件到小程序云开发服务器后，返回的是一个文件fileid，通过这个ID生成的图片链接有效期最长只有一天。</li>\n<li>为了前后端解耦，考虑将所有的数据库操作都放在了云函数中，由于功能不同导致云函数数量很多，对于复杂需求难以维护。</li>\n<li>小程序码生成的接口共有A/B/C三个，其中A/C有数量限制，只有B是不限数量，但是只能生成线上小程序的小程序码。</li>\n</ul>\n</li>\n<li><p><strong>总结</strong><br>目前云开发的功能还比较简单，而且BUG较多，想要试水的话建议可以用一用云函数，方便代码复用，其他如云数据库，只支持简单的增删改查，稍微复杂的操作就会很吃力，而云存储给的权限比较吝啬，生成文件链接还需要根据文件ID再访问一次，链接有效期最长只有一天，用起来比较繁琐。</p>\n</li>\n</ol>\n"},{"title":"两周一报09（20181214）","date":"2018-12-14T10:00:00.000Z","toc":true,"comments":1,"description":"项目进度","_content":"### 一、本周项目\n1. **[已完成] 双十二主会场预热期问题总结**   \n  - 东家小院返回图片过大，对首屏加载速度有影响   \n  解决：\n    - 对于能够处理图片大小的链接，前端进行处理（依据网络状况/是否支持webp/是否已设置size等），修改quality和size。\n  - 运营模式下，自定义代码的请求会被运营模块阻塞，当请求较多/请求资源较大时，可能因为超时失败。  \n  解决：   \n    - 自定义代码css和js尽量内联，减少请求数目；   \n    - 多自定义模块能够合并的尽量合并；   \n    - 头图尽量用运营模块搭建，如果功能比较复杂，可以先用运营模块放头图的图片，然后再用自定义代码往上加数据或其他。防止下面的运营楼层出现在首屏优先加载，影响首屏资源数；   \n  - 运营模式下，多模块楼层若出现在首屏，对于加载速度有较大的影响，尤其是有多个tab且tab内部结构复杂时，会阻塞自定义代码请求。   \n\n   \n      \n2. **[进行中] 大黄蜂互动游戏**   \n  - 之前做的视频类H5一般都是循环播放，此次的需求时只播放一次，在Android浏览器端播放结束会有广告出现\n    - （不彻底解决方案）在视频播放结束后马上隐藏视频，用一张图片代替原位置（如果视频暂停的时候还是会有同样的问题）。\n  - Android微信下会有全屏按钮\n    - 若视频本身为全屏，可以通过拉高视频，将按钮撑到可视区域之外\n    - 若视频非全屏展示，则该按钮无法去除（微信下视频层级过高无法被遮住）\n    - 用 canvas实现视频播放性能不佳，慎重使用","source":"_posts/两周一报09（20181214）.md","raw":"---\ntitle: 两周一报09（20181214）\ndate: 2018-12-14 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 项目进度\n---\n### 一、本周项目\n1. **[已完成] 双十二主会场预热期问题总结**   \n  - 东家小院返回图片过大，对首屏加载速度有影响   \n  解决：\n    - 对于能够处理图片大小的链接，前端进行处理（依据网络状况/是否支持webp/是否已设置size等），修改quality和size。\n  - 运营模式下，自定义代码的请求会被运营模块阻塞，当请求较多/请求资源较大时，可能因为超时失败。  \n  解决：   \n    - 自定义代码css和js尽量内联，减少请求数目；   \n    - 多自定义模块能够合并的尽量合并；   \n    - 头图尽量用运营模块搭建，如果功能比较复杂，可以先用运营模块放头图的图片，然后再用自定义代码往上加数据或其他。防止下面的运营楼层出现在首屏优先加载，影响首屏资源数；   \n  - 运营模式下，多模块楼层若出现在首屏，对于加载速度有较大的影响，尤其是有多个tab且tab内部结构复杂时，会阻塞自定义代码请求。   \n\n   \n      \n2. **[进行中] 大黄蜂互动游戏**   \n  - 之前做的视频类H5一般都是循环播放，此次的需求时只播放一次，在Android浏览器端播放结束会有广告出现\n    - （不彻底解决方案）在视频播放结束后马上隐藏视频，用一张图片代替原位置（如果视频暂停的时候还是会有同样的问题）。\n  - Android微信下会有全屏按钮\n    - 若视频本身为全屏，可以通过拉高视频，将按钮撑到可视区域之外\n    - 若视频非全屏展示，则该按钮无法去除（微信下视频层级过高无法被遮住）\n    - 用 canvas实现视频播放性能不佳，慎重使用","slug":"两周一报09（20181214）","published":1,"updated":"2019-02-25T06:34:51.866Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05l0016yn7o098zkgz3","content":"<h3 id=\"一、本周项目\"><a href=\"#一、本周项目\" class=\"headerlink\" title=\"一、本周项目\"></a>一、本周项目</h3><ol>\n<li><strong>[已完成] 双十二主会场预热期问题总结</strong>   <ul>\n<li>东家小院返回图片过大，对首屏加载速度有影响<br>解决：<ul>\n<li>对于能够处理图片大小的链接，前端进行处理（依据网络状况/是否支持webp/是否已设置size等），修改quality和size。</li>\n</ul>\n</li>\n<li>运营模式下，自定义代码的请求会被运营模块阻塞，当请求较多/请求资源较大时，可能因为超时失败。<br>解决：   <ul>\n<li>自定义代码css和js尽量内联，减少请求数目；   </li>\n<li>多自定义模块能够合并的尽量合并；   </li>\n<li>头图尽量用运营模块搭建，如果功能比较复杂，可以先用运营模块放头图的图片，然后再用自定义代码往上加数据或其他。防止下面的运营楼层出现在首屏优先加载，影响首屏资源数；   </li>\n</ul>\n</li>\n<li>运营模式下，多模块楼层若出现在首屏，对于加载速度有较大的影响，尤其是有多个tab且tab内部结构复杂时，会阻塞自定义代码请求。   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>[进行中] 大黄蜂互动游戏</strong>   <ul>\n<li>之前做的视频类H5一般都是循环播放，此次的需求时只播放一次，在Android浏览器端播放结束会有广告出现<ul>\n<li>（不彻底解决方案）在视频播放结束后马上隐藏视频，用一张图片代替原位置（如果视频暂停的时候还是会有同样的问题）。</li>\n</ul>\n</li>\n<li>Android微信下会有全屏按钮<ul>\n<li>若视频本身为全屏，可以通过拉高视频，将按钮撑到可视区域之外</li>\n<li>若视频非全屏展示，则该按钮无法去除（微信下视频层级过高无法被遮住）</li>\n<li>用 canvas实现视频播放性能不佳，慎重使用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、本周项目\"><a href=\"#一、本周项目\" class=\"headerlink\" title=\"一、本周项目\"></a>一、本周项目</h3><ol>\n<li><strong>[已完成] 双十二主会场预热期问题总结</strong>   <ul>\n<li>东家小院返回图片过大，对首屏加载速度有影响<br>解决：<ul>\n<li>对于能够处理图片大小的链接，前端进行处理（依据网络状况/是否支持webp/是否已设置size等），修改quality和size。</li>\n</ul>\n</li>\n<li>运营模式下，自定义代码的请求会被运营模块阻塞，当请求较多/请求资源较大时，可能因为超时失败。<br>解决：   <ul>\n<li>自定义代码css和js尽量内联，减少请求数目；   </li>\n<li>多自定义模块能够合并的尽量合并；   </li>\n<li>头图尽量用运营模块搭建，如果功能比较复杂，可以先用运营模块放头图的图片，然后再用自定义代码往上加数据或其他。防止下面的运营楼层出现在首屏优先加载，影响首屏资源数；   </li>\n</ul>\n</li>\n<li>运营模式下，多模块楼层若出现在首屏，对于加载速度有较大的影响，尤其是有多个tab且tab内部结构复杂时，会阻塞自定义代码请求。   </li>\n</ul>\n</li>\n</ol>\n<ol start=\"2\">\n<li><strong>[进行中] 大黄蜂互动游戏</strong>   <ul>\n<li>之前做的视频类H5一般都是循环播放，此次的需求时只播放一次，在Android浏览器端播放结束会有广告出现<ul>\n<li>（不彻底解决方案）在视频播放结束后马上隐藏视频，用一张图片代替原位置（如果视频暂停的时候还是会有同样的问题）。</li>\n</ul>\n</li>\n<li>Android微信下会有全屏按钮<ul>\n<li>若视频本身为全屏，可以通过拉高视频，将按钮撑到可视区域之外</li>\n<li>若视频非全屏展示，则该按钮无法去除（微信下视频层级过高无法被遮住）</li>\n<li>用 canvas实现视频播放性能不佳，慎重使用</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"两周一报11（20190111）","date":"2019-01-11T10:00:00.000Z","toc":true,"comments":1,"description":"2018年年度典型问题汇总","_content":"## 2018年度问题整理\n### 1. 倒计时\n  - **【锁屏处理】** 使用setInterval进行倒计时，锁屏时会中断执行。需要通过visibilityChange事件处理。\n  - **【精确度】** 长时间的倒计时不精准，在低端手机下尤其明显。进入页面时获取服务器时间和本地时间的差值，服务器时间作为初始时间，用setInterval每隔400毫秒更新一次时间戳作为当前时间，每隔1分钟获取本地时间与进入页面时的本地时间对比作为校准值，校准当前时间。\n\n### 2. 视频\n  - **【自动播放】** 只有ios10+支持无音轨/设置静音的视频自动播放，其他情况下都需要用户手动触发（click/touchstart事件） ，可考虑的降级方案有低端机下用GIF/逐帧动画（建议帧数不超过30帧，超出在部分手机上有闪屏情况出现）代替。\n  - **【预加载】** 设置preload表示在页面加载后马上加载，个人通常的做法是设置该属性，src置空，在需要播放的时候再设置src，以此达到按需加载的目的。\n  - **【微信/部分浏览器video层级】** 在安卓机下，微信和部分浏览器中，video总在最顶层，且暂时没有发现覆盖它的方法。微信端目前唯一的解决方法是成为白名单(2019.01.06)，浏览器暂时无解。   \n  - **【iphone默认全屏播放】** 在video标签中添加属性`<video playsinline=\"true\" -webkit-playsinline=\"true\"></video>`。\n  - **【锁屏处理】** 锁屏后应当暂停视频，同采用事件visibilitychange处理。\n  - **【浏览器下暂停有广告】** 浏览器原生插入的广告，暂时木有办法。可考虑的处理方案是在视频暂停时将视频缩小为1px * 1px用一张图片占位。\n  - **【视频上传地址】** ViOS和安卓需要分别上传到两个服务器，ios上传到[http://storage.jd.com/*](http://storage.jd.com)，在[oss.jd.com](https://oss.jd.com)上传。安卓上传到[https://static.360buyimg.com/*](https://static.360buyimg.com/)域名下，需要木木和李杰提交，寒冰审批。\n\n### 3. 音频\n  - **【自动播放】** 需要用户手动触发才可播放。\n  - **【循环播放有停顿感】** 音频的前后衔接最好有淡出淡入，手机原生播放器循环播放音频时会有近1秒的停顿，如果没有淡出淡入会有停顿感。\n  - **【静音】** iOS8及以下，IE9及以下不支持muted属性。\n  - **【初始化延迟】** iOS Safari浏览器初始化一个新的音频有延时，因为iOS需要实例化一个新的音频对象再通过网络请求音频资源。解决方案是在页面ready之后把每个文件都load，提前预加载。\n\n### 4. 运营模式\n  - **【自定义模块延后加载】** 头图最好用运营模块占位，然后再用自定义代码往上加功能，保证首屏加载的时候，头图的位置没有重排重绘，也可以防止下面的楼层往上顶，占用首屏加载资源。","source":"_posts/两周一报11（20190111）.md","raw":"---\ntitle: 两周一报11（20190111）\ndate: 2019-01-11 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 2018年年度典型问题汇总\n---\n## 2018年度问题整理\n### 1. 倒计时\n  - **【锁屏处理】** 使用setInterval进行倒计时，锁屏时会中断执行。需要通过visibilityChange事件处理。\n  - **【精确度】** 长时间的倒计时不精准，在低端手机下尤其明显。进入页面时获取服务器时间和本地时间的差值，服务器时间作为初始时间，用setInterval每隔400毫秒更新一次时间戳作为当前时间，每隔1分钟获取本地时间与进入页面时的本地时间对比作为校准值，校准当前时间。\n\n### 2. 视频\n  - **【自动播放】** 只有ios10+支持无音轨/设置静音的视频自动播放，其他情况下都需要用户手动触发（click/touchstart事件） ，可考虑的降级方案有低端机下用GIF/逐帧动画（建议帧数不超过30帧，超出在部分手机上有闪屏情况出现）代替。\n  - **【预加载】** 设置preload表示在页面加载后马上加载，个人通常的做法是设置该属性，src置空，在需要播放的时候再设置src，以此达到按需加载的目的。\n  - **【微信/部分浏览器video层级】** 在安卓机下，微信和部分浏览器中，video总在最顶层，且暂时没有发现覆盖它的方法。微信端目前唯一的解决方法是成为白名单(2019.01.06)，浏览器暂时无解。   \n  - **【iphone默认全屏播放】** 在video标签中添加属性`<video playsinline=\"true\" -webkit-playsinline=\"true\"></video>`。\n  - **【锁屏处理】** 锁屏后应当暂停视频，同采用事件visibilitychange处理。\n  - **【浏览器下暂停有广告】** 浏览器原生插入的广告，暂时木有办法。可考虑的处理方案是在视频暂停时将视频缩小为1px * 1px用一张图片占位。\n  - **【视频上传地址】** ViOS和安卓需要分别上传到两个服务器，ios上传到[http://storage.jd.com/*](http://storage.jd.com)，在[oss.jd.com](https://oss.jd.com)上传。安卓上传到[https://static.360buyimg.com/*](https://static.360buyimg.com/)域名下，需要木木和李杰提交，寒冰审批。\n\n### 3. 音频\n  - **【自动播放】** 需要用户手动触发才可播放。\n  - **【循环播放有停顿感】** 音频的前后衔接最好有淡出淡入，手机原生播放器循环播放音频时会有近1秒的停顿，如果没有淡出淡入会有停顿感。\n  - **【静音】** iOS8及以下，IE9及以下不支持muted属性。\n  - **【初始化延迟】** iOS Safari浏览器初始化一个新的音频有延时，因为iOS需要实例化一个新的音频对象再通过网络请求音频资源。解决方案是在页面ready之后把每个文件都load，提前预加载。\n\n### 4. 运营模式\n  - **【自定义模块延后加载】** 头图最好用运营模块占位，然后再用自定义代码往上加功能，保证首屏加载的时候，头图的位置没有重排重绘，也可以防止下面的楼层往上顶，占用首屏加载资源。","slug":"两周一报11（20190111）","published":1,"updated":"2019-02-25T06:34:15.044Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05m0018yn7ozksrb6d7","content":"<h2 id=\"2018年度问题整理\"><a href=\"#2018年度问题整理\" class=\"headerlink\" title=\"2018年度问题整理\"></a>2018年度问题整理</h2><h3 id=\"1-倒计时\"><a href=\"#1-倒计时\" class=\"headerlink\" title=\"1. 倒计时\"></a>1. 倒计时</h3><ul>\n<li><strong>【锁屏处理】</strong> 使用setInterval进行倒计时，锁屏时会中断执行。需要通过visibilityChange事件处理。</li>\n<li><strong>【精确度】</strong> 长时间的倒计时不精准，在低端手机下尤其明显。进入页面时获取服务器时间和本地时间的差值，服务器时间作为初始时间，用setInterval每隔400毫秒更新一次时间戳作为当前时间，每隔1分钟获取本地时间与进入页面时的本地时间对比作为校准值，校准当前时间。</li>\n</ul>\n<h3 id=\"2-视频\"><a href=\"#2-视频\" class=\"headerlink\" title=\"2. 视频\"></a>2. 视频</h3><ul>\n<li><strong>【自动播放】</strong> 只有ios10+支持无音轨/设置静音的视频自动播放，其他情况下都需要用户手动触发（click/touchstart事件） ，可考虑的降级方案有低端机下用GIF/逐帧动画（建议帧数不超过30帧，超出在部分手机上有闪屏情况出现）代替。</li>\n<li><strong>【预加载】</strong> 设置preload表示在页面加载后马上加载，个人通常的做法是设置该属性，src置空，在需要播放的时候再设置src，以此达到按需加载的目的。</li>\n<li><strong>【微信/部分浏览器video层级】</strong> 在安卓机下，微信和部分浏览器中，video总在最顶层，且暂时没有发现覆盖它的方法。微信端目前唯一的解决方法是成为白名单(2019.01.06)，浏览器暂时无解。   </li>\n<li><strong>【iphone默认全屏播放】</strong> 在video标签中添加属性<code>&lt;video playsinline=&quot;true&quot; -webkit-playsinline=&quot;true&quot;&gt;&lt;/video&gt;</code>。</li>\n<li><strong>【锁屏处理】</strong> 锁屏后应当暂停视频，同采用事件visibilitychange处理。</li>\n<li><strong>【浏览器下暂停有广告】</strong> 浏览器原生插入的广告，暂时木有办法。可考虑的处理方案是在视频暂停时将视频缩小为1px * 1px用一张图片占位。</li>\n<li><strong>【视频上传地址】</strong> ViOS和安卓需要分别上传到两个服务器，ios上传到<a href=\"http://storage.jd.com\" target=\"_blank\" rel=\"noopener\">http://storage.jd.com/*</a>，在<a href=\"https://oss.jd.com\" target=\"_blank\" rel=\"noopener\">oss.jd.com</a>上传。安卓上传到<a href=\"https://static.360buyimg.com/\" target=\"_blank\" rel=\"noopener\">https://static.360buyimg.com/*</a>域名下，需要木木和李杰提交，寒冰审批。</li>\n</ul>\n<h3 id=\"3-音频\"><a href=\"#3-音频\" class=\"headerlink\" title=\"3. 音频\"></a>3. 音频</h3><ul>\n<li><strong>【自动播放】</strong> 需要用户手动触发才可播放。</li>\n<li><strong>【循环播放有停顿感】</strong> 音频的前后衔接最好有淡出淡入，手机原生播放器循环播放音频时会有近1秒的停顿，如果没有淡出淡入会有停顿感。</li>\n<li><strong>【静音】</strong> iOS8及以下，IE9及以下不支持muted属性。</li>\n<li><strong>【初始化延迟】</strong> iOS Safari浏览器初始化一个新的音频有延时，因为iOS需要实例化一个新的音频对象再通过网络请求音频资源。解决方案是在页面ready之后把每个文件都load，提前预加载。</li>\n</ul>\n<h3 id=\"4-运营模式\"><a href=\"#4-运营模式\" class=\"headerlink\" title=\"4. 运营模式\"></a>4. 运营模式</h3><ul>\n<li><strong>【自定义模块延后加载】</strong> 头图最好用运营模块占位，然后再用自定义代码往上加功能，保证首屏加载的时候，头图的位置没有重排重绘，也可以防止下面的楼层往上顶，占用首屏加载资源。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2018年度问题整理\"><a href=\"#2018年度问题整理\" class=\"headerlink\" title=\"2018年度问题整理\"></a>2018年度问题整理</h2><h3 id=\"1-倒计时\"><a href=\"#1-倒计时\" class=\"headerlink\" title=\"1. 倒计时\"></a>1. 倒计时</h3><ul>\n<li><strong>【锁屏处理】</strong> 使用setInterval进行倒计时，锁屏时会中断执行。需要通过visibilityChange事件处理。</li>\n<li><strong>【精确度】</strong> 长时间的倒计时不精准，在低端手机下尤其明显。进入页面时获取服务器时间和本地时间的差值，服务器时间作为初始时间，用setInterval每隔400毫秒更新一次时间戳作为当前时间，每隔1分钟获取本地时间与进入页面时的本地时间对比作为校准值，校准当前时间。</li>\n</ul>\n<h3 id=\"2-视频\"><a href=\"#2-视频\" class=\"headerlink\" title=\"2. 视频\"></a>2. 视频</h3><ul>\n<li><strong>【自动播放】</strong> 只有ios10+支持无音轨/设置静音的视频自动播放，其他情况下都需要用户手动触发（click/touchstart事件） ，可考虑的降级方案有低端机下用GIF/逐帧动画（建议帧数不超过30帧，超出在部分手机上有闪屏情况出现）代替。</li>\n<li><strong>【预加载】</strong> 设置preload表示在页面加载后马上加载，个人通常的做法是设置该属性，src置空，在需要播放的时候再设置src，以此达到按需加载的目的。</li>\n<li><strong>【微信/部分浏览器video层级】</strong> 在安卓机下，微信和部分浏览器中，video总在最顶层，且暂时没有发现覆盖它的方法。微信端目前唯一的解决方法是成为白名单(2019.01.06)，浏览器暂时无解。   </li>\n<li><strong>【iphone默认全屏播放】</strong> 在video标签中添加属性<code>&lt;video playsinline=&quot;true&quot; -webkit-playsinline=&quot;true&quot;&gt;&lt;/video&gt;</code>。</li>\n<li><strong>【锁屏处理】</strong> 锁屏后应当暂停视频，同采用事件visibilitychange处理。</li>\n<li><strong>【浏览器下暂停有广告】</strong> 浏览器原生插入的广告，暂时木有办法。可考虑的处理方案是在视频暂停时将视频缩小为1px * 1px用一张图片占位。</li>\n<li><strong>【视频上传地址】</strong> ViOS和安卓需要分别上传到两个服务器，ios上传到<a href=\"http://storage.jd.com\" target=\"_blank\" rel=\"noopener\">http://storage.jd.com/*</a>，在<a href=\"https://oss.jd.com\" target=\"_blank\" rel=\"noopener\">oss.jd.com</a>上传。安卓上传到<a href=\"https://static.360buyimg.com/\" target=\"_blank\" rel=\"noopener\">https://static.360buyimg.com/*</a>域名下，需要木木和李杰提交，寒冰审批。</li>\n</ul>\n<h3 id=\"3-音频\"><a href=\"#3-音频\" class=\"headerlink\" title=\"3. 音频\"></a>3. 音频</h3><ul>\n<li><strong>【自动播放】</strong> 需要用户手动触发才可播放。</li>\n<li><strong>【循环播放有停顿感】</strong> 音频的前后衔接最好有淡出淡入，手机原生播放器循环播放音频时会有近1秒的停顿，如果没有淡出淡入会有停顿感。</li>\n<li><strong>【静音】</strong> iOS8及以下，IE9及以下不支持muted属性。</li>\n<li><strong>【初始化延迟】</strong> iOS Safari浏览器初始化一个新的音频有延时，因为iOS需要实例化一个新的音频对象再通过网络请求音频资源。解决方案是在页面ready之后把每个文件都load，提前预加载。</li>\n</ul>\n<h3 id=\"4-运营模式\"><a href=\"#4-运营模式\" class=\"headerlink\" title=\"4. 运营模式\"></a>4. 运营模式</h3><ul>\n<li><strong>【自定义模块延后加载】</strong> 头图最好用运营模块占位，然后再用自定义代码往上加功能，保证首屏加载的时候，头图的位置没有重排重绘，也可以防止下面的楼层往上顶，占用首屏加载资源。</li>\n</ul>\n"},{"title":"两周一报10（20181228）","date":"2018-12-28T10:00:00.000Z","toc":true,"comments":1,"description":"2018年12月行业动态，项目进度","_content":"### 一、12月行业动态\n1. **微信小程序近期更新一览**  \n  - 20181112起，小程序跳转小程序数量不可超过10个，且不支持动态修改   \n  - 20190114起，获取用户位置信息时需填写用途说明，否则无法正常调用地理位置相关接口   \n  - 20180114起，不再支持使用“提前发起授权接口”获取用户信息  \n  - 从小程序基础库版本2.1.1或以上、及开发者工具1.02.1808300或以上开始，小程序支持npm安装第三方包     \n     \n2. **在App、微信、h5页面切换音频播放功能的兼容性问题**\n  - 播放音频需要用户主动触发  \n  - 多音频切换方法：  \n  - 在多个audio标签之间切换。优点是使用方便，缺点是资源占用高；  \n  - 将多个音频合并为一个文件，播放不同的音频选择相应时段。优点是兼容性好，缺点是比较繁琐；  \n  - 应用切换到后台后再切换回来，音乐续播，在visiblityChange事件中触发   \n  参考：https://jdc.jd.com/archives/212874\n    \n3. **轻量级移动web特效解决方案omi-transform**   \n  - 描述：以修改DOM属性为代价，提供可编程性高的动效方案   \n  - 优点：   \n    - 使用matrix3d为最终输出DOM对象，硬件加速   \n    - 可编程性高   \n    - 轻量级   \n    - 有原生版本和react版本，可与多种框架配合使用   \n  - 参考：http://www.alloyteam.com/2018/11/13436/\n\n \n### 二、本周项目\n1. **【自测中】大黄蜂互动游戏**\n  - iOS下Safari上滑切换音效失败   \n  audio.play()在Safari下只能写在touchstart事件才能生效   \n     \n  - Android下站内偶现视频解析异常   \n  目前没有发现原因，抓包返回也正常，过了一段时间突然就好了，猜测是服务器问题   \n\n  - 黑屏是音乐还会继续播放的问题   \n  黑屏时需要特殊处理，关闭声音并且若有视频则暂停视频，通过visibilityChange事件触发   \n  \n  - 网速慢的时候视频加载时间很长   \n  目前无解，只能够添加提示文案【正在加载…】，缓解一下这个问题","source":"_posts/两周一报10（20181228）.md","raw":"---\ntitle: 两周一报10（20181228）\ndate: 2018-12-28 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 2018年12月行业动态，项目进度\n---\n### 一、12月行业动态\n1. **微信小程序近期更新一览**  \n  - 20181112起，小程序跳转小程序数量不可超过10个，且不支持动态修改   \n  - 20190114起，获取用户位置信息时需填写用途说明，否则无法正常调用地理位置相关接口   \n  - 20180114起，不再支持使用“提前发起授权接口”获取用户信息  \n  - 从小程序基础库版本2.1.1或以上、及开发者工具1.02.1808300或以上开始，小程序支持npm安装第三方包     \n     \n2. **在App、微信、h5页面切换音频播放功能的兼容性问题**\n  - 播放音频需要用户主动触发  \n  - 多音频切换方法：  \n  - 在多个audio标签之间切换。优点是使用方便，缺点是资源占用高；  \n  - 将多个音频合并为一个文件，播放不同的音频选择相应时段。优点是兼容性好，缺点是比较繁琐；  \n  - 应用切换到后台后再切换回来，音乐续播，在visiblityChange事件中触发   \n  参考：https://jdc.jd.com/archives/212874\n    \n3. **轻量级移动web特效解决方案omi-transform**   \n  - 描述：以修改DOM属性为代价，提供可编程性高的动效方案   \n  - 优点：   \n    - 使用matrix3d为最终输出DOM对象，硬件加速   \n    - 可编程性高   \n    - 轻量级   \n    - 有原生版本和react版本，可与多种框架配合使用   \n  - 参考：http://www.alloyteam.com/2018/11/13436/\n\n \n### 二、本周项目\n1. **【自测中】大黄蜂互动游戏**\n  - iOS下Safari上滑切换音效失败   \n  audio.play()在Safari下只能写在touchstart事件才能生效   \n     \n  - Android下站内偶现视频解析异常   \n  目前没有发现原因，抓包返回也正常，过了一段时间突然就好了，猜测是服务器问题   \n\n  - 黑屏是音乐还会继续播放的问题   \n  黑屏时需要特殊处理，关闭声音并且若有视频则暂停视频，通过visibilityChange事件触发   \n  \n  - 网速慢的时候视频加载时间很长   \n  目前无解，只能够添加提示文案【正在加载…】，缓解一下这个问题","slug":"两周一报10（20181228）","published":1,"updated":"2019-02-25T06:34:36.030Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05o001cyn7oes4bndxx","content":"<h3 id=\"一、12月行业动态\"><a href=\"#一、12月行业动态\" class=\"headerlink\" title=\"一、12月行业动态\"></a>一、12月行业动态</h3><ol>\n<li><p><strong>微信小程序近期更新一览</strong>  </p>\n<ul>\n<li>20181112起，小程序跳转小程序数量不可超过10个，且不支持动态修改   </li>\n<li>20190114起，获取用户位置信息时需填写用途说明，否则无法正常调用地理位置相关接口   </li>\n<li>20180114起，不再支持使用“提前发起授权接口”获取用户信息  </li>\n<li>从小程序基础库版本2.1.1或以上、及开发者工具1.02.1808300或以上开始，小程序支持npm安装第三方包     </li>\n</ul>\n</li>\n<li><p><strong>在App、微信、h5页面切换音频播放功能的兼容性问题</strong></p>\n<ul>\n<li>播放音频需要用户主动触发  </li>\n<li>多音频切换方法：  </li>\n<li>在多个audio标签之间切换。优点是使用方便，缺点是资源占用高；  </li>\n<li>将多个音频合并为一个文件，播放不同的音频选择相应时段。优点是兼容性好，缺点是比较繁琐；  </li>\n<li>应用切换到后台后再切换回来，音乐续播，在visiblityChange事件中触发<br>参考：<a href=\"https://jdc.jd.com/archives/212874\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/212874</a></li>\n</ul>\n</li>\n<li><p><strong>轻量级移动web特效解决方案omi-transform</strong>   </p>\n<ul>\n<li>描述：以修改DOM属性为代价，提供可编程性高的动效方案   </li>\n<li>优点：   <ul>\n<li>使用matrix3d为最终输出DOM对象，硬件加速   </li>\n<li>可编程性高   </li>\n<li>轻量级   </li>\n<li>有原生版本和react版本，可与多种框架配合使用   </li>\n</ul>\n</li>\n<li>参考：<a href=\"http://www.alloyteam.com/2018/11/13436/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2018/11/13436/</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周项目\"><a href=\"#二、本周项目\" class=\"headerlink\" title=\"二、本周项目\"></a>二、本周项目</h3><ol>\n<li><p><strong>【自测中】大黄蜂互动游戏</strong></p>\n<ul>\n<li><p>iOS下Safari上滑切换音效失败<br>audio.play()在Safari下只能写在touchstart事件才能生效   </p>\n</li>\n<li><p>Android下站内偶现视频解析异常<br>目前没有发现原因，抓包返回也正常，过了一段时间突然就好了，猜测是服务器问题   </p>\n</li>\n<li><p>黑屏是音乐还会继续播放的问题<br>黑屏时需要特殊处理，关闭声音并且若有视频则暂停视频，通过visibilityChange事件触发   </p>\n</li>\n<li><p>网速慢的时候视频加载时间很长<br>目前无解，只能够添加提示文案【正在加载…】，缓解一下这个问题</p>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、12月行业动态\"><a href=\"#一、12月行业动态\" class=\"headerlink\" title=\"一、12月行业动态\"></a>一、12月行业动态</h3><ol>\n<li><p><strong>微信小程序近期更新一览</strong>  </p>\n<ul>\n<li>20181112起，小程序跳转小程序数量不可超过10个，且不支持动态修改   </li>\n<li>20190114起，获取用户位置信息时需填写用途说明，否则无法正常调用地理位置相关接口   </li>\n<li>20180114起，不再支持使用“提前发起授权接口”获取用户信息  </li>\n<li>从小程序基础库版本2.1.1或以上、及开发者工具1.02.1808300或以上开始，小程序支持npm安装第三方包     </li>\n</ul>\n</li>\n<li><p><strong>在App、微信、h5页面切换音频播放功能的兼容性问题</strong></p>\n<ul>\n<li>播放音频需要用户主动触发  </li>\n<li>多音频切换方法：  </li>\n<li>在多个audio标签之间切换。优点是使用方便，缺点是资源占用高；  </li>\n<li>将多个音频合并为一个文件，播放不同的音频选择相应时段。优点是兼容性好，缺点是比较繁琐；  </li>\n<li>应用切换到后台后再切换回来，音乐续播，在visiblityChange事件中触发<br>参考：<a href=\"https://jdc.jd.com/archives/212874\" target=\"_blank\" rel=\"noopener\">https://jdc.jd.com/archives/212874</a></li>\n</ul>\n</li>\n<li><p><strong>轻量级移动web特效解决方案omi-transform</strong>   </p>\n<ul>\n<li>描述：以修改DOM属性为代价，提供可编程性高的动效方案   </li>\n<li>优点：   <ul>\n<li>使用matrix3d为最终输出DOM对象，硬件加速   </li>\n<li>可编程性高   </li>\n<li>轻量级   </li>\n<li>有原生版本和react版本，可与多种框架配合使用   </li>\n</ul>\n</li>\n<li>参考：<a href=\"http://www.alloyteam.com/2018/11/13436/\" target=\"_blank\" rel=\"noopener\">http://www.alloyteam.com/2018/11/13436/</a></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"二、本周项目\"><a href=\"#二、本周项目\" class=\"headerlink\" title=\"二、本周项目\"></a>二、本周项目</h3><ol>\n<li><p><strong>【自测中】大黄蜂互动游戏</strong></p>\n<ul>\n<li><p>iOS下Safari上滑切换音效失败<br>audio.play()在Safari下只能写在touchstart事件才能生效   </p>\n</li>\n<li><p>Android下站内偶现视频解析异常<br>目前没有发现原因，抓包返回也正常，过了一段时间突然就好了，猜测是服务器问题   </p>\n</li>\n<li><p>黑屏是音乐还会继续播放的问题<br>黑屏时需要特殊处理，关闭声音并且若有视频则暂停视频，通过visibilityChange事件触发   </p>\n</li>\n<li><p>网速慢的时候视频加载时间很长<br>目前无解，只能够添加提示文案【正在加载…】，缓解一下这个问题</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"两周一报12（20190125）","date":"2019-01-25T10:00:00.000Z","toc":true,"comments":1,"description":"2019年1月行业动态","_content":"## 一月行业动态\n### 1. 设计稿生成代码插件一览\n  - imgcook（淘宝）\n    - 功能：目前支持将sketch设计稿生成模块化的html+css代码，输出代码格式支持小程序/React/H5/Rax\n    - 原理：参照图层结构分析+图像识别处理\n    - 体验：https://imgcook.taobao.org/\n  - sketch2code（微软开源）\n    - 功能：将草图翻译为HTML代码\n    - 原理：上传图片-> 视觉模型预测图像中的html元素并标出位置 ->文本识别预测元素中的文本 -> 布局算法依据预测元素的边框信息生成网格结构 -> 生成html代码\n    - 体验：https://sketch2code.azurewebsites.net/\n  - Dapollo（蚂蚁金服）\n    - 功能：提供丰富的内置组件/图标/页面模板，且都有对应的开发代码，设计开发一体化。支持ios/Android/H5/小程序\n    - 原理：sketch插件\n    - 体验：https://oursketch.com/plugin/dapollo\n  - pix2code（理论性参考）\n    - 功能：AI参照UI图片生成代码\n    - 原理：pix2code模型把单个的GUI截屏图片作为输入，基于卷积神经网络和循环升级网络产生计算机标签。\n    - 体验：https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据   \n\n### 2. uni-app：基于vue开发跨平台应用的前端框架   \n  - 描述：DCloud公司开发，基于vuejs的跨平台框架（iOS/Android/H5/微信小程序/支付宝小程序/百度小程序）\n  - 思考：看似很厉害，细看是个大杂烩全家桶，转小程序使用的是美团的mpvue框架，转移动应用使用的是dcloud之前推出的HTML5Plus引擎\n  - 体验：https://uniapp.dcloud.io/   \n\n### 3. Bash简化常用命令\n  - 描述：用一个指令代替一连串的指令\n  - 举例：上传代码到git，可以通过alias设置指令别名 alias gitpush= ='function _gitpush() {git add .; git commit -m $1; git push origin master;}; _gitpush'\n  - 参考：https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa   \n  \n### 4. 一句话动态\n  - 第13届D2前端技术论坛相关ppt已共享，后续会有相关视频分享，可以持续关注：https://www.yuque.com/d2forum/content/d213\n  - 第2届SEE Conf 2019蚂蚁金服体验科技大会，演讲视频与PPT：https://www.yuque.com/seeconf/content/kbnzac\n  - 美团点评-2018前端技术年货：https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf\n  - 基于threejs的在线3D场景编辑器：https://tengge1.github.io/ShadowEditor-examples/\n  - 一些css动效的整理，适合找找灵感   \n    - https://qishaoxuan.github.io/css_tricks/   \n    - https://chokcoco.github.io/CSS-Inspiration/#/","source":"_posts/两周一报12（20190125）.md","raw":"---\ntitle: 两周一报12（20190125）\ndate: 2019-01-25 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 2019年1月行业动态\n---\n## 一月行业动态\n### 1. 设计稿生成代码插件一览\n  - imgcook（淘宝）\n    - 功能：目前支持将sketch设计稿生成模块化的html+css代码，输出代码格式支持小程序/React/H5/Rax\n    - 原理：参照图层结构分析+图像识别处理\n    - 体验：https://imgcook.taobao.org/\n  - sketch2code（微软开源）\n    - 功能：将草图翻译为HTML代码\n    - 原理：上传图片-> 视觉模型预测图像中的html元素并标出位置 ->文本识别预测元素中的文本 -> 布局算法依据预测元素的边框信息生成网格结构 -> 生成html代码\n    - 体验：https://sketch2code.azurewebsites.net/\n  - Dapollo（蚂蚁金服）\n    - 功能：提供丰富的内置组件/图标/页面模板，且都有对应的开发代码，设计开发一体化。支持ios/Android/H5/小程序\n    - 原理：sketch插件\n    - 体验：https://oursketch.com/plugin/dapollo\n  - pix2code（理论性参考）\n    - 功能：AI参照UI图片生成代码\n    - 原理：pix2code模型把单个的GUI截屏图片作为输入，基于卷积神经网络和循环升级网络产生计算机标签。\n    - 体验：https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据   \n\n### 2. uni-app：基于vue开发跨平台应用的前端框架   \n  - 描述：DCloud公司开发，基于vuejs的跨平台框架（iOS/Android/H5/微信小程序/支付宝小程序/百度小程序）\n  - 思考：看似很厉害，细看是个大杂烩全家桶，转小程序使用的是美团的mpvue框架，转移动应用使用的是dcloud之前推出的HTML5Plus引擎\n  - 体验：https://uniapp.dcloud.io/   \n\n### 3. Bash简化常用命令\n  - 描述：用一个指令代替一连串的指令\n  - 举例：上传代码到git，可以通过alias设置指令别名 alias gitpush= ='function _gitpush() {git add .; git commit -m $1; git push origin master;}; _gitpush'\n  - 参考：https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa   \n  \n### 4. 一句话动态\n  - 第13届D2前端技术论坛相关ppt已共享，后续会有相关视频分享，可以持续关注：https://www.yuque.com/d2forum/content/d213\n  - 第2届SEE Conf 2019蚂蚁金服体验科技大会，演讲视频与PPT：https://www.yuque.com/seeconf/content/kbnzac\n  - 美团点评-2018前端技术年货：https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf\n  - 基于threejs的在线3D场景编辑器：https://tengge1.github.io/ShadowEditor-examples/\n  - 一些css动效的整理，适合找找灵感   \n    - https://qishaoxuan.github.io/css_tricks/   \n    - https://chokcoco.github.io/CSS-Inspiration/#/","slug":"两周一报12（20190125）","published":1,"updated":"2019-02-25T06:33:57.712Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05p001gyn7oaoygf5uq","content":"<h2 id=\"一月行业动态\"><a href=\"#一月行业动态\" class=\"headerlink\" title=\"一月行业动态\"></a>一月行业动态</h2><h3 id=\"1-设计稿生成代码插件一览\"><a href=\"#1-设计稿生成代码插件一览\" class=\"headerlink\" title=\"1. 设计稿生成代码插件一览\"></a>1. 设计稿生成代码插件一览</h3><ul>\n<li>imgcook（淘宝）<ul>\n<li>功能：目前支持将sketch设计稿生成模块化的html+css代码，输出代码格式支持小程序/React/H5/Rax</li>\n<li>原理：参照图层结构分析+图像识别处理</li>\n<li>体验：<a href=\"https://imgcook.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://imgcook.taobao.org/</a></li>\n</ul>\n</li>\n<li>sketch2code（微软开源）<ul>\n<li>功能：将草图翻译为HTML代码</li>\n<li>原理：上传图片-&gt; 视觉模型预测图像中的html元素并标出位置 -&gt;文本识别预测元素中的文本 -&gt; 布局算法依据预测元素的边框信息生成网格结构 -&gt; 生成html代码</li>\n<li>体验：<a href=\"https://sketch2code.azurewebsites.net/\" target=\"_blank\" rel=\"noopener\">https://sketch2code.azurewebsites.net/</a></li>\n</ul>\n</li>\n<li>Dapollo（蚂蚁金服）<ul>\n<li>功能：提供丰富的内置组件/图标/页面模板，且都有对应的开发代码，设计开发一体化。支持ios/Android/H5/小程序</li>\n<li>原理：sketch插件</li>\n<li>体验：<a href=\"https://oursketch.com/plugin/dapollo\" target=\"_blank\" rel=\"noopener\">https://oursketch.com/plugin/dapollo</a></li>\n</ul>\n</li>\n<li>pix2code（理论性参考）<ul>\n<li>功能：AI参照UI图片生成代码</li>\n<li>原理：pix2code模型把单个的GUI截屏图片作为输入，基于卷积神经网络和循环升级网络产生计算机标签。</li>\n<li>体验：<a href=\"https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据\" target=\"_blank\" rel=\"noopener\">https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据</a>   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-uni-app：基于vue开发跨平台应用的前端框架\"><a href=\"#2-uni-app：基于vue开发跨平台应用的前端框架\" class=\"headerlink\" title=\"2. uni-app：基于vue开发跨平台应用的前端框架\"></a>2. uni-app：基于vue开发跨平台应用的前端框架</h3><ul>\n<li>描述：DCloud公司开发，基于vuejs的跨平台框架（iOS/Android/H5/微信小程序/支付宝小程序/百度小程序）</li>\n<li>思考：看似很厉害，细看是个大杂烩全家桶，转小程序使用的是美团的mpvue框架，转移动应用使用的是dcloud之前推出的HTML5Plus引擎</li>\n<li>体验：<a href=\"https://uniapp.dcloud.io/\" target=\"_blank\" rel=\"noopener\">https://uniapp.dcloud.io/</a>   </li>\n</ul>\n<h3 id=\"3-Bash简化常用命令\"><a href=\"#3-Bash简化常用命令\" class=\"headerlink\" title=\"3. Bash简化常用命令\"></a>3. Bash简化常用命令</h3><ul>\n<li>描述：用一个指令代替一连串的指令</li>\n<li>举例：上传代码到git，可以通过alias设置指令别名 alias gitpush= =’function _gitpush() {git add .; git commit -m $1; git push origin master;}; _gitpush’</li>\n<li>参考：<a href=\"https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa\" target=\"_blank\" rel=\"noopener\">https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa</a>   </li>\n</ul>\n<h3 id=\"4-一句话动态\"><a href=\"#4-一句话动态\" class=\"headerlink\" title=\"4. 一句话动态\"></a>4. 一句话动态</h3><ul>\n<li>第13届D2前端技术论坛相关ppt已共享，后续会有相关视频分享，可以持续关注：<a href=\"https://www.yuque.com/d2forum/content/d213\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/d2forum/content/d213</a></li>\n<li>第2届SEE Conf 2019蚂蚁金服体验科技大会，演讲视频与PPT：<a href=\"https://www.yuque.com/seeconf/content/kbnzac\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/seeconf/content/kbnzac</a></li>\n<li>美团点评-2018前端技术年货：<a href=\"https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf\" target=\"_blank\" rel=\"noopener\">https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf</a></li>\n<li>基于threejs的在线3D场景编辑器：<a href=\"https://tengge1.github.io/ShadowEditor-examples/\" target=\"_blank\" rel=\"noopener\">https://tengge1.github.io/ShadowEditor-examples/</a></li>\n<li>一些css动效的整理，适合找找灵感   <ul>\n<li><a href=\"https://qishaoxuan.github.io/css_tricks/\" target=\"_blank\" rel=\"noopener\">https://qishaoxuan.github.io/css_tricks/</a>   </li>\n<li><a href=\"https://chokcoco.github.io/CSS-Inspiration/#/\" target=\"_blank\" rel=\"noopener\">https://chokcoco.github.io/CSS-Inspiration/#/</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一月行业动态\"><a href=\"#一月行业动态\" class=\"headerlink\" title=\"一月行业动态\"></a>一月行业动态</h2><h3 id=\"1-设计稿生成代码插件一览\"><a href=\"#1-设计稿生成代码插件一览\" class=\"headerlink\" title=\"1. 设计稿生成代码插件一览\"></a>1. 设计稿生成代码插件一览</h3><ul>\n<li>imgcook（淘宝）<ul>\n<li>功能：目前支持将sketch设计稿生成模块化的html+css代码，输出代码格式支持小程序/React/H5/Rax</li>\n<li>原理：参照图层结构分析+图像识别处理</li>\n<li>体验：<a href=\"https://imgcook.taobao.org/\" target=\"_blank\" rel=\"noopener\">https://imgcook.taobao.org/</a></li>\n</ul>\n</li>\n<li>sketch2code（微软开源）<ul>\n<li>功能：将草图翻译为HTML代码</li>\n<li>原理：上传图片-&gt; 视觉模型预测图像中的html元素并标出位置 -&gt;文本识别预测元素中的文本 -&gt; 布局算法依据预测元素的边框信息生成网格结构 -&gt; 生成html代码</li>\n<li>体验：<a href=\"https://sketch2code.azurewebsites.net/\" target=\"_blank\" rel=\"noopener\">https://sketch2code.azurewebsites.net/</a></li>\n</ul>\n</li>\n<li>Dapollo（蚂蚁金服）<ul>\n<li>功能：提供丰富的内置组件/图标/页面模板，且都有对应的开发代码，设计开发一体化。支持ios/Android/H5/小程序</li>\n<li>原理：sketch插件</li>\n<li>体验：<a href=\"https://oursketch.com/plugin/dapollo\" target=\"_blank\" rel=\"noopener\">https://oursketch.com/plugin/dapollo</a></li>\n</ul>\n</li>\n<li>pix2code（理论性参考）<ul>\n<li>功能：AI参照UI图片生成代码</li>\n<li>原理：pix2code模型把单个的GUI截屏图片作为输入，基于卷积神经网络和循环升级网络产生计算机标签。</li>\n<li>体验：<a href=\"https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据\" target=\"_blank\" rel=\"noopener\">https://uizard.io/research/#pix2code上包含17年-18年关于这个模型的相关论文，可以看看其中的实验数据</a>   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-uni-app：基于vue开发跨平台应用的前端框架\"><a href=\"#2-uni-app：基于vue开发跨平台应用的前端框架\" class=\"headerlink\" title=\"2. uni-app：基于vue开发跨平台应用的前端框架\"></a>2. uni-app：基于vue开发跨平台应用的前端框架</h3><ul>\n<li>描述：DCloud公司开发，基于vuejs的跨平台框架（iOS/Android/H5/微信小程序/支付宝小程序/百度小程序）</li>\n<li>思考：看似很厉害，细看是个大杂烩全家桶，转小程序使用的是美团的mpvue框架，转移动应用使用的是dcloud之前推出的HTML5Plus引擎</li>\n<li>体验：<a href=\"https://uniapp.dcloud.io/\" target=\"_blank\" rel=\"noopener\">https://uniapp.dcloud.io/</a>   </li>\n</ul>\n<h3 id=\"3-Bash简化常用命令\"><a href=\"#3-Bash简化常用命令\" class=\"headerlink\" title=\"3. Bash简化常用命令\"></a>3. Bash简化常用命令</h3><ul>\n<li>描述：用一个指令代替一连串的指令</li>\n<li>举例：上传代码到git，可以通过alias设置指令别名 alias gitpush= =’function _gitpush() {git add .; git commit -m $1; git push origin master;}; _gitpush’</li>\n<li>参考：<a href=\"https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa\" target=\"_blank\" rel=\"noopener\">https://medium.com/@raimibinkarim/9-bash-aliases-to-make-your-life-easier-3e5855aa95fa</a>   </li>\n</ul>\n<h3 id=\"4-一句话动态\"><a href=\"#4-一句话动态\" class=\"headerlink\" title=\"4. 一句话动态\"></a>4. 一句话动态</h3><ul>\n<li>第13届D2前端技术论坛相关ppt已共享，后续会有相关视频分享，可以持续关注：<a href=\"https://www.yuque.com/d2forum/content/d213\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/d2forum/content/d213</a></li>\n<li>第2届SEE Conf 2019蚂蚁金服体验科技大会，演讲视频与PPT：<a href=\"https://www.yuque.com/seeconf/content/kbnzac\" target=\"_blank\" rel=\"noopener\">https://www.yuque.com/seeconf/content/kbnzac</a></li>\n<li>美团点评-2018前端技术年货：<a href=\"https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf\" target=\"_blank\" rel=\"noopener\">https://awps-assets.meituan.net/mit-x/2018-ebook-bundle3/2018-ebook-frontend.pdf</a></li>\n<li>基于threejs的在线3D场景编辑器：<a href=\"https://tengge1.github.io/ShadowEditor-examples/\" target=\"_blank\" rel=\"noopener\">https://tengge1.github.io/ShadowEditor-examples/</a></li>\n<li>一些css动效的整理，适合找找灵感   <ul>\n<li><a href=\"https://qishaoxuan.github.io/css_tricks/\" target=\"_blank\" rel=\"noopener\">https://qishaoxuan.github.io/css_tricks/</a>   </li>\n<li><a href=\"https://chokcoco.github.io/CSS-Inspiration/#/\" target=\"_blank\" rel=\"noopener\">https://chokcoco.github.io/CSS-Inspiration/#/</a></li>\n</ul>\n</li>\n</ul>\n"},{"title":"两周一报13（20190222）","date":"2019-02-22T10:00:00.000Z","toc":true,"comments":1,"description":"2019年2月行业动态，两周问题总结","_content":"## 行业动态   \n1. fuse.js：轻量级模糊搜索插件   \n\n    - 链接：https://fusejs.io/\n    - 关键词：轻量级（11KB），零依赖，模糊搜索\n    - 应用：适合于小数据量的简单搜索，可依据匹配程度排序\n   \n2. 3个值得期待的JavaScript新特性      \n\n    - 链接：https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg   \n    - 简述   \n      - 可选运算符(Optional Chaining, stage-1)：简单的防止访问object时，由于数据结构不规范导致的报错。   \n        ```JavaScript\n        const data = {\n            user: {}\n        };\n        console.log(data.user?.address?.street); // undefined\n        // 可替代以下写法\n        // const street = data && data.user && data.user.address && data.user.address.street;\n        ```\n      - 空值合并(Nullish Coalescing, stage-1)：判断是否为`null`或`undefined`，可以在保护`0`，`false`，``的情况下，设置默认值\n        ```JavaScript\n        var val1 = undefined, val2 = null, val3 = 0, val4 = false, val5 = '';\n        val1 ?? 'default value'; // val1 = 'default value'\n        val2 ?? 'default value'; // val2 = 'default value'\n        val3 ?? 'default value'; // val3 = 0\n        val4 ?? 'default value'; // val4 = false\n        val5 ?? 'default value'; // val5 = ''\n        ```\n      - 管道运算符(The Pipeline Operator, stage-1)：链式调用函数\n        ```JavaScript\n        let result = \"hello\"\n            |> doubleSay\n            |> capitalize\n            |> exclaim;\n        // 替代以下写法\n        // result = exclaim(capitalize(doubleSay(\"hello\")))\n        ```\n   \n3. 常见的CSS图形绘制合集   \n    - 链接：https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/\n    - 以下均为CSS绘制的图形，具体实现可参照链接   \n    ![css图形](https://img10.360buyimg.com/imagetools/jfs/t1/18445/22/7664/76460/5c6fa789Eef5f2834/29d0c0d187e37344.jpg)   \n\n## 近期问题记录\n1. 页面**视频资源会发出3次请求**的原因\n    - 原因分析：https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/\n    - 简述：解释了一下页面中某些video资源会请求3次的原因，赶忙看了一下之前做的项目拉取视频也有这个问题，文章中修复方案实测有效。除此之外发现使用http链接，请求依旧会有2次，第一次请求的code为307，原因是后台做了强制https访问的限制（基于HSTS），改用https链接问题解决。\n2. `babel`舍弃了以前的`babel-*-*`的命名方式，7.x版本采用了`@babel/*-*`形式，使用7.x版本babel安装插件时需要注意对应。   \n3. animation动画安卓下卡顿？   \n    - 原因分析：修改width/height/margin，误差叠加\n    - 解决：   \n        - 修改为transform，避免重排；\n        - 修改为单一属性变化，减少误差；\n        - 加入`transform: translateZ(0)`启动GPU加速\n\n## 好玩的H5案例\n1. 我的剪纸新年照  \n    分析：https://www.h5anli.com/cases/201902/chuanghua.html   \n    h5链接：http://m.baconbuy.com/qq/paperCuts/     \n2. 我家年夜饭（类似汪年全家福）   \n    分析：https://www.h5anli.com/cases/201902/pupupula.html     \n    h5链接：https://pupupula.net/nian/index.html?from=singlemessage     \n\n## 关注学习ing\n1. Lottie   \nhttps://airbnb.design/introducing-lottie/  \nhttp://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc\n2. parcel   \n    - 链接：http://www.itbaby.me/doc/parcel/  \n    - 关键词：web应用打包器，执行快，零配置\n3. react devtools：https://github.com/facebook/react-devtools   \n这个没啥，就是好工具，用上用上~   \n4. 优化动画卡顿：近期正在整理输出相关文章\n\n","source":"_posts/两周一报13（20190222）.md","raw":"---\ntitle: 两周一报13（20190222）\ndate: 2019-02-22 18:00:00\ntags: 周报\ncategory: weekly\ntoc: true\ncomments: true\ndescription: 2019年2月行业动态，两周问题总结\n---\n## 行业动态   \n1. fuse.js：轻量级模糊搜索插件   \n\n    - 链接：https://fusejs.io/\n    - 关键词：轻量级（11KB），零依赖，模糊搜索\n    - 应用：适合于小数据量的简单搜索，可依据匹配程度排序\n   \n2. 3个值得期待的JavaScript新特性      \n\n    - 链接：https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg   \n    - 简述   \n      - 可选运算符(Optional Chaining, stage-1)：简单的防止访问object时，由于数据结构不规范导致的报错。   \n        ```JavaScript\n        const data = {\n            user: {}\n        };\n        console.log(data.user?.address?.street); // undefined\n        // 可替代以下写法\n        // const street = data && data.user && data.user.address && data.user.address.street;\n        ```\n      - 空值合并(Nullish Coalescing, stage-1)：判断是否为`null`或`undefined`，可以在保护`0`，`false`，``的情况下，设置默认值\n        ```JavaScript\n        var val1 = undefined, val2 = null, val3 = 0, val4 = false, val5 = '';\n        val1 ?? 'default value'; // val1 = 'default value'\n        val2 ?? 'default value'; // val2 = 'default value'\n        val3 ?? 'default value'; // val3 = 0\n        val4 ?? 'default value'; // val4 = false\n        val5 ?? 'default value'; // val5 = ''\n        ```\n      - 管道运算符(The Pipeline Operator, stage-1)：链式调用函数\n        ```JavaScript\n        let result = \"hello\"\n            |> doubleSay\n            |> capitalize\n            |> exclaim;\n        // 替代以下写法\n        // result = exclaim(capitalize(doubleSay(\"hello\")))\n        ```\n   \n3. 常见的CSS图形绘制合集   \n    - 链接：https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/\n    - 以下均为CSS绘制的图形，具体实现可参照链接   \n    ![css图形](https://img10.360buyimg.com/imagetools/jfs/t1/18445/22/7664/76460/5c6fa789Eef5f2834/29d0c0d187e37344.jpg)   \n\n## 近期问题记录\n1. 页面**视频资源会发出3次请求**的原因\n    - 原因分析：https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/\n    - 简述：解释了一下页面中某些video资源会请求3次的原因，赶忙看了一下之前做的项目拉取视频也有这个问题，文章中修复方案实测有效。除此之外发现使用http链接，请求依旧会有2次，第一次请求的code为307，原因是后台做了强制https访问的限制（基于HSTS），改用https链接问题解决。\n2. `babel`舍弃了以前的`babel-*-*`的命名方式，7.x版本采用了`@babel/*-*`形式，使用7.x版本babel安装插件时需要注意对应。   \n3. animation动画安卓下卡顿？   \n    - 原因分析：修改width/height/margin，误差叠加\n    - 解决：   \n        - 修改为transform，避免重排；\n        - 修改为单一属性变化，减少误差；\n        - 加入`transform: translateZ(0)`启动GPU加速\n\n## 好玩的H5案例\n1. 我的剪纸新年照  \n    分析：https://www.h5anli.com/cases/201902/chuanghua.html   \n    h5链接：http://m.baconbuy.com/qq/paperCuts/     \n2. 我家年夜饭（类似汪年全家福）   \n    分析：https://www.h5anli.com/cases/201902/pupupula.html     \n    h5链接：https://pupupula.net/nian/index.html?from=singlemessage     \n\n## 关注学习ing\n1. Lottie   \nhttps://airbnb.design/introducing-lottie/  \nhttp://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc\n2. parcel   \n    - 链接：http://www.itbaby.me/doc/parcel/  \n    - 关键词：web应用打包器，执行快，零配置\n3. react devtools：https://github.com/facebook/react-devtools   \n这个没啥，就是好工具，用上用上~   \n4. 优化动画卡顿：近期正在整理输出相关文章\n\n","slug":"两周一报13（20190222）","published":1,"updated":"2019-02-25T06:33:37.387Z","layout":"post","photos":[],"link":"","_id":"cjt8ew05q001kyn7ojp5kvnsb","content":"<h2 id=\"行业动态\"><a href=\"#行业动态\" class=\"headerlink\" title=\"行业动态\"></a>行业动态</h2><ol>\n<li><p>fuse.js：轻量级模糊搜索插件   </p>\n<ul>\n<li>链接：<a href=\"https://fusejs.io/\" target=\"_blank\" rel=\"noopener\">https://fusejs.io/</a></li>\n<li>关键词：轻量级（11KB），零依赖，模糊搜索</li>\n<li>应用：适合于小数据量的简单搜索，可依据匹配程度排序</li>\n</ul>\n</li>\n<li><p>3个值得期待的JavaScript新特性      </p>\n<ul>\n<li>链接：<a href=\"https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg</a>   </li>\n<li><p>简述   </p>\n<ul>\n<li><p>可选运算符(Optional Chaining, stage-1)：简单的防止访问object时，由于数据结构不规范导致的报错。   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    user: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.user?.address?.street); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 可替代以下写法</span></span><br><span class=\"line\"><span class=\"comment\">// const street = data &amp;&amp; data.user &amp;&amp; data.user.address &amp;&amp; data.user.address.street;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值合并(Nullish Coalescing, stage-1)：判断是否为<code>null</code>或<code>undefined</code>，可以在保护<code>0</code>，<code>false</code>，<code></code>的情况下，设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val1 = <span class=\"literal\">undefined</span>, val2 = <span class=\"literal\">null</span>, val3 = <span class=\"number\">0</span>, val4 = <span class=\"literal\">false</span>, val5 = <span class=\"string\">''</span>;</span><br><span class=\"line\">val1 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val1 = 'default value'</span></span><br><span class=\"line\">val2 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val2 = 'default value'</span></span><br><span class=\"line\">val3 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val3 = 0</span></span><br><span class=\"line\">val4 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val4 = false</span></span><br><span class=\"line\">val5 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val5 = ''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管道运算符(The Pipeline Operator, stage-1)：链式调用函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    |&gt; doubleSay</span><br><span class=\"line\">    |&gt; capitalize</span><br><span class=\"line\">    |&gt; exclaim;</span><br><span class=\"line\"><span class=\"comment\">// 替代以下写法</span></span><br><span class=\"line\"><span class=\"comment\">// result = exclaim(capitalize(doubleSay(\"hello\")))</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>常见的CSS图形绘制合集   <ul>\n<li>链接：<a href=\"https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/</a></li>\n<li>以下均为CSS绘制的图形，具体实现可参照链接<br><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/18445/22/7664/76460/5c6fa789Eef5f2834/29d0c0d187e37344.jpg\" alt=\"css图形\">   </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"近期问题记录\"><a href=\"#近期问题记录\" class=\"headerlink\" title=\"近期问题记录\"></a>近期问题记录</h2><ol>\n<li>页面<strong>视频资源会发出3次请求</strong>的原因<ul>\n<li>原因分析：<a href=\"https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/</a></li>\n<li>简述：解释了一下页面中某些video资源会请求3次的原因，赶忙看了一下之前做的项目拉取视频也有这个问题，文章中修复方案实测有效。除此之外发现使用http链接，请求依旧会有2次，第一次请求的code为307，原因是后台做了强制https访问的限制（基于HSTS），改用https链接问题解决。</li>\n</ul>\n</li>\n<li><code>babel</code>舍弃了以前的<code>babel-*-*</code>的命名方式，7.x版本采用了<code>@babel/*-*</code>形式，使用7.x版本babel安装插件时需要注意对应。   </li>\n<li>animation动画安卓下卡顿？   <ul>\n<li>原因分析：修改width/height/margin，误差叠加</li>\n<li>解决：   <ul>\n<li>修改为transform，避免重排；</li>\n<li>修改为单一属性变化，减少误差；</li>\n<li>加入<code>transform: translateZ(0)</code>启动GPU加速</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"好玩的H5案例\"><a href=\"#好玩的H5案例\" class=\"headerlink\" title=\"好玩的H5案例\"></a>好玩的H5案例</h2><ol>\n<li>我的剪纸新年照<br> 分析：<a href=\"https://www.h5anli.com/cases/201902/chuanghua.html\" target=\"_blank\" rel=\"noopener\">https://www.h5anli.com/cases/201902/chuanghua.html</a><br> h5链接：<a href=\"http://m.baconbuy.com/qq/paperCuts/\" target=\"_blank\" rel=\"noopener\">http://m.baconbuy.com/qq/paperCuts/</a>     </li>\n<li>我家年夜饭（类似汪年全家福）<br> 分析：<a href=\"https://www.h5anli.com/cases/201902/pupupula.html\" target=\"_blank\" rel=\"noopener\">https://www.h5anli.com/cases/201902/pupupula.html</a><br> h5链接：<a href=\"https://pupupula.net/nian/index.html?from=singlemessage\" target=\"_blank\" rel=\"noopener\">https://pupupula.net/nian/index.html?from=singlemessage</a>     </li>\n</ol>\n<h2 id=\"关注学习ing\"><a href=\"#关注学习ing\" class=\"headerlink\" title=\"关注学习ing\"></a>关注学习ing</h2><ol>\n<li>Lottie<br><a href=\"https://airbnb.design/introducing-lottie/\" target=\"_blank\" rel=\"noopener\">https://airbnb.design/introducing-lottie/</a><br><a href=\"http://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc\" target=\"_blank\" rel=\"noopener\">http://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc</a></li>\n<li>parcel   <ul>\n<li>链接：<a href=\"http://www.itbaby.me/doc/parcel/\" target=\"_blank\" rel=\"noopener\">http://www.itbaby.me/doc/parcel/</a>  </li>\n<li>关键词：web应用打包器，执行快，零配置</li>\n</ul>\n</li>\n<li>react devtools：<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-devtools</a><br>这个没啥，就是好工具，用上用上~   </li>\n<li>优化动画卡顿：近期正在整理输出相关文章</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"行业动态\"><a href=\"#行业动态\" class=\"headerlink\" title=\"行业动态\"></a>行业动态</h2><ol>\n<li><p>fuse.js：轻量级模糊搜索插件   </p>\n<ul>\n<li>链接：<a href=\"https://fusejs.io/\" target=\"_blank\" rel=\"noopener\">https://fusejs.io/</a></li>\n<li>关键词：轻量级（11KB），零依赖，模糊搜索</li>\n<li>应用：适合于小数据量的简单搜索，可依据匹配程度排序</li>\n</ul>\n</li>\n<li><p>3个值得期待的JavaScript新特性      </p>\n<ul>\n<li>链接：<a href=\"https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/aM5vlKkka8GEFSFM222fNg</a>   </li>\n<li><p>简述   </p>\n<ul>\n<li><p>可选运算符(Optional Chaining, stage-1)：简单的防止访问object时，由于数据结构不规范导致的报错。   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">    user: &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(data.user?.address?.street); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 可替代以下写法</span></span><br><span class=\"line\"><span class=\"comment\">// const street = data &amp;&amp; data.user &amp;&amp; data.user.address &amp;&amp; data.user.address.street;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空值合并(Nullish Coalescing, stage-1)：判断是否为<code>null</code>或<code>undefined</code>，可以在保护<code>0</code>，<code>false</code>，<code></code>的情况下，设置默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> val1 = <span class=\"literal\">undefined</span>, val2 = <span class=\"literal\">null</span>, val3 = <span class=\"number\">0</span>, val4 = <span class=\"literal\">false</span>, val5 = <span class=\"string\">''</span>;</span><br><span class=\"line\">val1 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val1 = 'default value'</span></span><br><span class=\"line\">val2 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val2 = 'default value'</span></span><br><span class=\"line\">val3 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val3 = 0</span></span><br><span class=\"line\">val4 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val4 = false</span></span><br><span class=\"line\">val5 ?? <span class=\"string\">'default value'</span>; <span class=\"comment\">// val5 = ''</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>管道运算符(The Pipeline Operator, stage-1)：链式调用函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">    |&gt; doubleSay</span><br><span class=\"line\">    |&gt; capitalize</span><br><span class=\"line\">    |&gt; exclaim;</span><br><span class=\"line\"><span class=\"comment\">// 替代以下写法</span></span><br><span class=\"line\"><span class=\"comment\">// result = exclaim(capitalize(doubleSay(\"hello\")))</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li>常见的CSS图形绘制合集   <ul>\n<li>链接：<a href=\"https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2019/01/pure-css-shapes/</a></li>\n<li>以下均为CSS绘制的图形，具体实现可参照链接<br><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/18445/22/7664/76460/5c6fa789Eef5f2834/29d0c0d187e37344.jpg\" alt=\"css图形\">   </li>\n</ul>\n</li>\n</ol>\n<h2 id=\"近期问题记录\"><a href=\"#近期问题记录\" class=\"headerlink\" title=\"近期问题记录\"></a>近期问题记录</h2><ol>\n<li>页面<strong>视频资源会发出3次请求</strong>的原因<ul>\n<li>原因分析：<a href=\"https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/\" target=\"_blank\" rel=\"noopener\">https://www.zhangxinxu.com/wordpress/2018/12/video-moov-box/</a></li>\n<li>简述：解释了一下页面中某些video资源会请求3次的原因，赶忙看了一下之前做的项目拉取视频也有这个问题，文章中修复方案实测有效。除此之外发现使用http链接，请求依旧会有2次，第一次请求的code为307，原因是后台做了强制https访问的限制（基于HSTS），改用https链接问题解决。</li>\n</ul>\n</li>\n<li><code>babel</code>舍弃了以前的<code>babel-*-*</code>的命名方式，7.x版本采用了<code>@babel/*-*</code>形式，使用7.x版本babel安装插件时需要注意对应。   </li>\n<li>animation动画安卓下卡顿？   <ul>\n<li>原因分析：修改width/height/margin，误差叠加</li>\n<li>解决：   <ul>\n<li>修改为transform，避免重排；</li>\n<li>修改为单一属性变化，减少误差；</li>\n<li>加入<code>transform: translateZ(0)</code>启动GPU加速</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"好玩的H5案例\"><a href=\"#好玩的H5案例\" class=\"headerlink\" title=\"好玩的H5案例\"></a>好玩的H5案例</h2><ol>\n<li>我的剪纸新年照<br> 分析：<a href=\"https://www.h5anli.com/cases/201902/chuanghua.html\" target=\"_blank\" rel=\"noopener\">https://www.h5anli.com/cases/201902/chuanghua.html</a><br> h5链接：<a href=\"http://m.baconbuy.com/qq/paperCuts/\" target=\"_blank\" rel=\"noopener\">http://m.baconbuy.com/qq/paperCuts/</a>     </li>\n<li>我家年夜饭（类似汪年全家福）<br> 分析：<a href=\"https://www.h5anli.com/cases/201902/pupupula.html\" target=\"_blank\" rel=\"noopener\">https://www.h5anli.com/cases/201902/pupupula.html</a><br> h5链接：<a href=\"https://pupupula.net/nian/index.html?from=singlemessage\" target=\"_blank\" rel=\"noopener\">https://pupupula.net/nian/index.html?from=singlemessage</a>     </li>\n</ol>\n<h2 id=\"关注学习ing\"><a href=\"#关注学习ing\" class=\"headerlink\" title=\"关注学习ing\"></a>关注学习ing</h2><ol>\n<li>Lottie<br><a href=\"https://airbnb.design/introducing-lottie/\" target=\"_blank\" rel=\"noopener\">https://airbnb.design/introducing-lottie/</a><br><a href=\"http://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc\" target=\"_blank\" rel=\"noopener\">http://test.imweb.io/topic/5b23a745d4c96b9b1b4c4efc</a></li>\n<li>parcel   <ul>\n<li>链接：<a href=\"http://www.itbaby.me/doc/parcel/\" target=\"_blank\" rel=\"noopener\">http://www.itbaby.me/doc/parcel/</a>  </li>\n<li>关键词：web应用打包器，执行快，零配置</li>\n</ul>\n</li>\n<li>react devtools：<a href=\"https://github.com/facebook/react-devtools\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/react-devtools</a><br>这个没啥，就是好工具，用上用上~   </li>\n<li>优化动画卡顿：近期正在整理输出相关文章</li>\n</ol>\n"},{"title":"优化动画卡顿：卡顿原因分析及优化方案","date":"2019-03-14T09:00:00.000Z","toc":true,"comments":1,"description":"优化动画卡顿，从渲染原理开始分析起","_content":"# 目录   \n- [一、动画卡顿分析](#1)\n    - [动画卡顿的原因](#1-0)\n    - [页面渲染流程](#1-1)\n- [二、优化方法](#2)\n    - [`JavaScript`：优化JavaScript的执行效率](#2-0)\n    - [`Style`：降低样式计算复杂度和范围](#2-1)\n    - [`Layout`：避免大规模、复杂的布局](#2-2)\n    - [`Paint/Composite`：GPU加速](#2-3)\n- [三、参考](#3)\n\n# <span id=\"1\">一、动画卡顿分析</span>\n## <span id=\"1-0\">动画卡顿的原因</span>\n大多数设备的刷新频率是60次/秒，也就是1秒钟的动画是由60个画面连在一起生成的，所以要求浏览器对每一帧画面的渲染工作要在16ms内完成。当渲染时间超出16ms时，1秒钟内少于60个画面生成，就会有不连贯、卡顿的感觉，影响用户体验。\n## <span id=\"1-1\">页面渲染流程</span>\n一个页面帧在客户端的渲染分为以下几步：   \n![页面渲染流程 来源：Google](https://img14.360buyimg.com/imagetools/jfs/t1/25420/23/7433/43692/5c6bc518E8ebc6723/1ba7bf69d1e49c34.png)     \n1. `JavaScript`：JavaScript实现动画效果，DOM操作等。   \n2. `Style（样式计算）`：确认每个DOM元素应用的CSS样式规则。   \n3. `Layout（布局）`：计算每个DOM元素最终在屏幕上的大小和位置。由于DOM元素的布局是相对的，所以当某个元素发生变化影响了布局时，其他元素也会随之变化，则需要回退重新渲染，这个过程称之为reflow。   \n4. `Paint（绘制）`：在多个层上绘制DOM元素的文字、颜色、图像、边框和阴影等。   \n5. `Composite（Render Layer合并）`：按照合理的顺序合并图层并显示到屏幕上。\n浏览器在实际渲染页面的时候需要经过一系列的映射，由HTML页面构建出来的DOM树到最终的图层，映射过程如下图(来源：[参考[3]](#3))所示（注意下图类名在后续有所更改，RenderObject->LayoutObject，RenderLayer->PaintLayer）：   \n![The Compositing Tree](https://img14.360buyimg.com/imagetools/jfs/t1/19835/12/10577/51755/5c88750fE37bd3acb/f2f49b172da86e5a.png)\n- **Node->RenderObject**：DOM树的每个Node都有一个对应的RenderObject（一对一关系，RenderObject包含了Node的内容）；   \n- **RenderObject -> RenderLayer**：一个或多个RenderObject对应一个RenderLayer（多对一），RenderLayer用于保证元素之间的层级关系，一般来说位于同一位置的且层级相同的元素位于同一个Render Layer，只有某些特殊的RenderObject会专门创建一个新的渲染层，其他的RenderObject与第一个拥有RenderLayer的祖先元素共用一个。常见的生成RenderLayer的RenderObject拥有以下的一种特征[参考[3]](#3)： \n    - 页面根元素\n    - 有CSS定位属性（relative, absolute, fixed, sticky）    \n    -  transparent不为1\n    - overflow不为visible\n    - 有CSS mask属性\n    - 有CSS box-reflect属性\n    - 有CSS filter属性\n    - 3D或硬件加速的2D canvas元素\n    - video元素\n    \n- **RenderLayer -> GraphicsLayer**：一个或多个RenderLayer对应一个GraphicsLayer（多对一），某些被认为是Compositing Layer的RenderLayer单独对应一个GraphicsLayer，其他RenderLayer与第一个拥有GraphicsLayer的祖先元素共用一个GraphicsLayer。每个GraphicsLayer有一个GraphicsContext用于绘制其对应的RenderLayers，合成器将GraphicsContexts的位图合成，最终显示到屏幕上。渲染层提升为合成层的原因如下：   \n    - 有3D transform属性\n    - 有perspective属性\n    - 3D canvas或硬件加速的2D canvas\n    - 硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）\n    - 使用了硬件加速的插件，如flash\n    - 对opacity/transform属性应用了animation/transition（当animation/transition为active）   \n    - 子元素是compositing layer\n    - 兄弟元素是compositing layer，与当前的非composting layer有重叠，层级低于当前层\n    - 有will-change属性       \n\n\n# <span id=\"2\">二、优化方法</span>    \n在网上可以看到很多的优化方案总结，大佬们都写的很好。   \n> Talk is cheap. Show me the code.    \n\n结合页面渲染流程，这里将结合一些测试代码，分析动画的各种优化方案和效果：   \n- `JavaScript`：优化JavaScript的执行效率\n    - `requestAnimationFrame`代替`setTimeout`和`setInterval`\n    - 可并行的DOM元素更新划分为多个小任务\n    - DOM无关的耗时操作放到`Web Workers`中\n- `Style`：降低样式计算复杂度和范围\n    - 降低样式选择器的复杂度\n    - 减少需要执行样式计算的元素个数   \n- `Layout`：避免大规模、复杂的布局\n    - 避免频繁改变布局\n    - 用flexbox布局替代老的布局模型\n    - 避免强制同步布局事件\n- `Paint/Composite`：GPU加速\n    - 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）\n    - 避免提升合成层的陷阱\n\n## <span id=\"2-0\">`JavaScript`：优化JavaScript的执行效率</span>\n### 1. `requestAnimationFrame`代替`setTimeout`和`setInterval`  \n**为什么`setTimeout`和`setInterval`不好？**    \n由于js是单线程执行，所以为了防止某个任务执行时间过长而导致进程阻塞，js中存在异步队列的概念，对于如`setTimeout`和`ajax`请求都是把进程放到了异步队列中，当主进程为空时才执行异步队列中的任务。所以 `setTimeout`和`setInterval`无法保证回调函数的执行时机，可能会在一帧之内执行多次导致多次页面渲染，浪费CPU资源甚至产生卡顿，或者是在一帧即将结束时执行导致重新渲染，出现掉帧的情况。   \n**`requestAnimationFrame`是怎么优化的？**\n- CPU节能，当页面被隐藏或最小化时，暂停渲染。   \n- 函数节流，其循环间隔是由屏幕刷新频率决定的，保证回调函数在屏幕的每一次刷新间隔中只执行一次。    \n   \n**优化效果具体如何？**[DEMO](https://codepen.io/JoeyCai/pen/XOwXwy)   \n    通过chrome的performance面板查看具体表现的差别。        \n    通过`setTimeout`进行了3次渲染，而且有长时间帧出现：   \n    ![setTimeout](https://img10.360buyimg.com/imagetools/jfs/t1/9752/6/14504/771355/5c6e8e33Eb93736f4/0b5cb0adc3ea5c8f.jpg)    \n    使用`requestAnimationFrame`DOM操作部分合并，只进行了2次渲染，长时间帧也被优化：   \n    ![requestAnimationFrame](https://img13.360buyimg.com/imagetools/jfs/t1/32704/5/2719/675214/5c6e8e33Ed56b5b04/bf06524cbff562cc.jpg)   \n\n### 2. DOM无关的耗时操作放到`Web Worker`中   \n**`Web Worker`的好处是什么？**   \nJavaScript是单线程的，如果频繁的进行耗时操作（如实时更新数据），就会造成拥堵，影响用户交互体验。`Web Worker`的作用在于为JavaScript创建了多线程环境，worker线程在后台运行，受主线程控制，两者互不干扰。worker线程负担高延迟且UI无关的任务，主线程负责UI交互就会相对流畅。    \n**需要注意**   \n- `Web Worker`无法操作DOM，本质上只是将数据刷新和页面渲染拆开执行。\n- `Web Worker`遵循同源策略且限制本地访问。\n- 用一次多余的网络请求和浏览器线程资源来换取高效执行。    \n\n**优化效果具体如何？**[DEMO](https://codepen.io/JoeyCai/project/editor/ZqandE)   \n可以通过chrome的performance面板查看具体表现的差别：\n不使用`web worker`，减少了一次网络请求，但是出现了长时间帧，有卡帧的风险。   \n![不使用worker](https://img12.360buyimg.com/imagetools/jfs/t1/25172/28/8409/564851/5c74ec5eE57284d6e/df0bcd6f3351087f.jpg)   \n使用了`web worker`之后，耗时操作无关的任务不再被阻塞，但是增加了网络延迟。如果在项目中使用worker，初始化时间需要好好斟酌。    \n![使用worker](https://img13.360buyimg.com/imagetools/jfs/t1/17237/39/8303/651249/5c74eccfE8c9bdbd6/d408441c34165184.jpg)\n\n**可考虑的应用场景**  \n- 轮询服务器获取数据   \n- 频繁的数据上报   \n- 耗时的数据处理\n\n## <span id=\"2-1\">`Style`：降低样式计算复杂度和范围</span>\n### 1. *降低样式选择器的复杂度？*\n降低样式选择器的复杂度是常常被提出的一个优化方法，实际上这个方法的效果比较微弱，根据Ivan Curic的文章[[5]](#refs-5)的测试方法([DEMO](https://codepen.io/ivancuric/pen/ZaWxqV))，在一个拥有50000个节点的页面中，不同选择器复杂度对于性能的影响不会超过20ms，而一般情况下，页面的节点数都不会达到这个数量。   \n优化效果微弱的原因在于浏览器引擎对选择器速度进行了优化，不同引擎的性能优化方案不同，所以开发者的优化是否有效是难以预测的，至少对于静态元素的优化性价比是极低的。   \n通过测试可以确认的一点是，应当**减少伪类选择器和过长的选择器的使用**。推荐按照如OOCSS、BEM等命名规范来组织CSS，优点是在微弱优化性能的同时也提高了代码可维护性。   \n### 2. 减少需要执行样式计算的元素个数    \n这一点是针对较早的浏览器而言，较早的浏览器如改变了`body`元素上的一个类，则其子元素都需要重新计算样式。    \n现代浏览器都进行了优化，所以优化效果要视具体应用场景而言。目前尚未挖掘到应用例子，后期如有发现回来填坑。  \n## <span id=\"2-2\"> `Layout`：避免大规模、复杂的布局</span>\n### 1. 避免频繁触发布局   \n不同的属性导致的渲染成本不尽相同，这一点在css动画时对比尤其明显。触发layout或者paint的动画属性尤其消耗性能，所以应当尽量使用`transform`和`opacity`作为动画属性，如果无法实现则考虑采用JavaScript实现动画。   \n**性能差别有多大？**\n以width和transform为例，分别实现动画的性能差别：[DEMO](https://codepen.io/JoeyCai/pen/BbNavp)      \n通过width实现动画，帧率较低且曲线抖动明显，右下角也给出了一帧的渲染过程，触发了样式计算，布局，绘制和渲染层合并：      \n![width实现动画](https://img14.360buyimg.com/imagetools/jfs/t1/9917/2/15827/442526/5c764912E4a21de39/cc6866d97ec11f1b.png)   \n通过transform实现动画，可以发现帧率虽然也低但是平稳，渲染过程只触发了样式计算和、绘制和渲染层合并（仅当元素为合成层时，不会触发绘制。后面将详细讲述）：      \n![transform实现动画](https://img14.360buyimg.com/imagetools/jfs/t1/17764/7/8535/398481/5c7648c0Ee511a7d1/6233890c687bb85b.png)\n### 2. 用flexbox布局替代老的布局模型\n常用的经典布局方案有基于浮动的布局、基于绝对定位的布局，flexbox布局相较而言更加高效。在能用flexbox布局的项目中，尽量用flexbox布局。以下[DEMO](https://codepen.io/JoeyCai/pen/vPLWjQ)尝试用三种布局方式渲染一样的界面效果来测试性能：     \n绝对布局：对于每一个元素都需要唯一的定位坐标，当元素较多时，CSS文件偏大，导致在样式计算上花费了较多的时间。      \n![绝对布局](https://img13.360buyimg.com/imagetools/jfs/t1/18552/10/8755/413725/5c78fed1E451f7fbc/a912ac13678feb3a.jpg)   \n浮动布局：浮动元素之间定位会互相影响，部分浮动元素也受到文档流影响，导致布局所需时间较长。   \n![浮动布局](https://img11.360buyimg.com/imagetools/jfs/t1/8544/17/15769/406636/5c78fe8bEa78f88e3/e40a0d94beed9025.jpg)   \n弹性布局：对比前两种布局方案而言，性能有较显著的提升。   \n![弹性布局](https://img11.360buyimg.com/imagetools/jfs/t1/14490/38/8676/397959/5c78feb7E45544822/0308de0c0c8a7317.jpg)   \n### 3. 避免强制同步布局事件      \n**什么是强制同步布局？**   \n前面提到了页面渲染流程是JavaScript->Style->Layout->Paint->Composite，强制同步布局就是强制浏览器在执行JavaScript脚本前先执行布局。   \n**什么情况会导致强制同步布局？**   \nJavaScript运行时，获取到的元素属性样式都是上一帧的数值，所以如果在当前帧的渲染流程中，获取当前帧的某个元素属性之前对该元素进行了修改，浏览器就必须先应用属性再执行JavaScript逻辑，简而言之就是DOM先写后读操作，尤其是连续的读写操作，对浏览器的性能影响更大。\n**对性能影响有多大？**[DEMO](https://codepen.io/JoeyCai/pen/NJryQz)   \nDEMO通过改变1000个节点的属性，测试强制同步布局事件对性能的影响，具体参照下图。可以发现性能的损耗是极大的，连续的读写操作导致连续的强制同步事件触发，JavaScript执行时间变得很长：    \n![强制同步布局](https://img11.360buyimg.com/imagetools/jfs/t1/20407/22/9210/435015/5c7cd4a7E5ec454a1/814a3da7231f7e94.jpg)\n\n## <span id=\"2-3\">`Paint/Composite`：GPU加速</span>\n### 1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）    \n*注：可在Chrome的开发者工具的layers面板查看合成层，layers面板打开方法command+shift+p(mac)/ctrl+shift+p(windows) -> show layers*\n将复杂/频繁变化的元素提升到合成层，这样的好处是该元素绘制的时候不会触发其他元素的绘制。渲染层提升为合成层的原因如下（注意以下原因是在渲染层的基础之上）：   \n- 有3D transform属性\n- 有perspective属性\n- 3D canvas或硬件加速的2D canvas\n- 硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）\n- 使用了硬件加速的插件，如flash/iframe\n- 对opacity/transform属性应用了animation/transition（当animation/transition为active）   \n- will-change属性为opacity、transform、top、left、bottom、right\n- 子元素是compositing layer\n- 兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层        \n\n**为什么会有性能提升？**   \n- 只重绘需要重绘的部分\n- GPU加速：合成层的位图直接由GPU合成，比CPU处理速度更快 \n\n**性能提升有多少？**   [DEMO](https://codepen.io/JoeyCai/pen/QoqMeO)\n通过demo可以看到，提升为合成层之后，paint所需的时间大大减少。   \n![render layer -> compositing layer](https://img13.360buyimg.com/imagetools/jfs/t1/16031/7/10460/249740/5c871e47Ea6fc73a7/6dff807ff7296591.jpg)   \n\n**提升合成层是不是越多越好？**    \n可以看到提升合成层后，paint时间大大下降。但是合成层的创建需要消耗额外的内存和管理资源，过多的合成层给页面带来的内存开销很大，[DEMO](https://codepen.io/JoeyCai/pen/NJaOvy)创建了5000个元素，全部元素都提升为合成层与不提升时的内存消耗进行对比。这一点在移动端尤其需要注意，相比较于PC，移动设备的内存资源更加紧张。 \n![过多合成层](https://img14.360buyimg.com/imagetools/jfs/t1/30928/10/5654/389279/5c87757cE22aa61cc/1b0b1d36b15cd200.jpg)     \n\n\n**只提升动画元素的渲染层**   \n基于提升为合成层来提升性能的原理，当页面其他部分绘制比较复杂且相对静态时，我们可以考虑将动画元素单独提升为合成层，减少动画元素对页面其他元素的影响。      \n   \n### 2. 避免提升合成层的陷阱\n回顾一下提升为合成层的最后一个原因：兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层。   \n这种情况下导致的提升合成层一般都是预期外的。其原因与屏幕的渲染流程有关，我们回忆一下页面映射的最后一步，每一个Compositing Layer对应一张位图，合成器最后将这些位图根据层级关系合并起来最终输出到屏幕。此时我们假设A是已知的合成层，而B理想中应当是普通渲染层，其层级关系如图所示：   \n![层级陷阱](https://img10.360buyimg.com/imagetools/jfs/t1/29982/12/10660/38006/5c8783e5E829c400b/f80855a3afd155f9.jpg)  \nB作为普通渲染层与父级元素位于同一张位图，A单独在一张位图，此时合并的时候层级就会出现问题，如果直接将B置于A之上，有可能导致层级低于A的B的父元素反而显示在了A之上，反之A，B的层级关系就不对了。浏览器此时的解决方案，就是将B也单独出来作为compositing layer进行渲染，导致了意料外的compositing layer生成。\n这种时候第一直觉就是避免重叠的发生不就好了嘛？然而事情并不简单。在查找资料的时候发现了一个神奇宝贝——**assumedOverlap**。字面意思是假设重叠，对于无法/难以判断是否会与compositing layer重合的某些元素，浏览器假设会发生重叠，提升为compositing layer。   \n对此浏览器也进行了优化的，通过层压缩（Layer Squashing）处理，将与合成层有重叠且连续多个的渲染层合并为一个合成层。防止由于重叠导致的提升合成层过多，导致的层爆炸（Layer Explosion），可参考[DEMO](https://codepen.io/JoeyCai/pen/jJaoop)。       \n然而层压缩还是有解决不了的情况，查看[源码](https://chromium.googlesource.com/chromium/blink/+/master/Source/platform/graphics/CompositingReasons.cpp)可以列出以下原因（注意一下都是在重叠/假设重叠的前提下）：      \n- `scrollsWithRespectToSquashingLayer`：渲染层相对于压缩层滚动，当滚动的渲染层与合成层重叠时，会有新的合成层生成且无法压缩。[DEMO(这个例子不是很好，codepen用iframe嵌入，整个iframe都变成了合成层，如果想看效果可以在本地看)](https://codepen.io/JoeyCai/pen/LaOvoM)   \n- `squashingSparsityExceeded`：渲染层压缩后会导致压缩层过于稀疏。[DEMO](https://codepen.io/JoeyCai/pen/ZPaNmV)   \n- `squashingClippingContainerMismatch`：渲染层和压缩层的裁剪容器（clip container）不同，简单理解就是重叠的渲染层的容器overflow类型不同。[DEMO](https://codepen.io/JoeyCai/pen/xBpBrG)   \n- `squashingOpacityAncestorMismatch`：渲染层与压缩层的继承自祖先的opacity属性不同。[DEMO](https://codepen.io/JoeyCai/pen/VRrorE)   \n- `squashingTransformAncestorMismatch`：渲染层与压缩层的继承自祖先的transform不同。[DEMO](https://codepen.io/JoeyCai/pen/wOpOLQ)\n- `squashingFilterAncestorMismatch`：渲染层与压缩层的继承自祖先的filter属性不同，或者是渲染层本身有filter属性。[DEMO](https://codepen.io/JoeyCai/pen/WmdmLL)   \n- `squashingWouldBreakPaintOrder`：无法在不打乱渲染顺序的前提下压缩（e.g. 父元素有mask/filter属性，子元素与压缩层overlap，则假如合并了，父元素的mask/filter属性无法局部应用在压缩层，导致渲染结果有误）。[DEMO](https://codepen.io/JoeyCai/pen/eXyoMg)  \n- `squashingVideoIsDisallowed`：video元素无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/zbpXME)   \n- `squashedLayerClipsCompositingDescendants`：当合成层是被剪切的子元素时，与之重叠的渲染层无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/XGZrgY)\n- `squashingLayoutPartIsDisallowed`：无法压缩frame/iframe/plugin。   \n- `squashingReflectionDisallowed`：无法压缩有reflection属性的渲染层。 [DEMO](https://codepen.io/JoeyCai/pen/QoQWgB)  \n- `squashingBlendingDisallowed`：无法压缩有blend mode属性的渲染层。[DEMO](https://codepen.io/JoeyCai/pen/vPdYdm)   \n- `squashingNearestFixedPositionMismatch`：渲染层的最近fixed元素与压缩层不同，无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/EMQaWW)    \n\n当发现页面明明没有什么内容却比较卡的时候可以检查一下是不是这个原因，以下给出常见的层压缩解决不了的情况：   \n1. 带`transform`动画的元素，其后的元素为`relative/absolute`定位   \n原因：relative元素和relative下的absolute元素由于assumedOverlap原因都被被提升为合成层，又由于设置了overflow:hidden，基于前面提到的`squashingClippingContainerMismatch`，渲染层与合成层的裁剪容器不同，导致无法层压缩，出现过多的合成层。\n解决方法：为动画的元素设置`z-index`扰乱compositing layer的排序。[DEMO](https://codepen.io/JoeyCai/pen/GeOeWy)   \n\n# 三、<span id=\"3\">参考</span>\n本文结构主要参照文章[1]，对其中的一些优化点进行了实际测试和扩展，也算是一篇读后感吧~   \n关于层压缩部分情况过于复杂，没找到什么资料，感觉还没有完全吃透，后面有机会再重新整理一下。感恩以下大佬！\n1. 深度剖析浏览器渲染性能原理，你到底知道多少？ https://www.jianshu.com/p/a32b890c29b1\n2. <span id=\"refs-5\">Optimizing CSS: ID Selectors and Other Myths https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/</span>      \n3. GPU Accelerated Compositing in Chrome http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\n4. GPU加速是什么 https://aotu.io/notes/2017/04/11/GPU/\n5. Blink Compositing Update: Recap and Squashing https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719      \n6. 无线性能优化：Composite http://taobaofed.org/blog/2016/04/25/performance-composite/\n\n撒花完结~欢迎指教~   ","source":"_posts/优化动画卡顿：卡顿原因分析及优化方案.md","raw":"---\ntitle: 优化动画卡顿：卡顿原因分析及优化方案\ndate: 2019-03-14 17:00:00\ntags: 日常研究\ncategory: intensive study\ntoc: true\ncomments: true\ndescription: 优化动画卡顿，从渲染原理开始分析起\n---\n# 目录   \n- [一、动画卡顿分析](#1)\n    - [动画卡顿的原因](#1-0)\n    - [页面渲染流程](#1-1)\n- [二、优化方法](#2)\n    - [`JavaScript`：优化JavaScript的执行效率](#2-0)\n    - [`Style`：降低样式计算复杂度和范围](#2-1)\n    - [`Layout`：避免大规模、复杂的布局](#2-2)\n    - [`Paint/Composite`：GPU加速](#2-3)\n- [三、参考](#3)\n\n# <span id=\"1\">一、动画卡顿分析</span>\n## <span id=\"1-0\">动画卡顿的原因</span>\n大多数设备的刷新频率是60次/秒，也就是1秒钟的动画是由60个画面连在一起生成的，所以要求浏览器对每一帧画面的渲染工作要在16ms内完成。当渲染时间超出16ms时，1秒钟内少于60个画面生成，就会有不连贯、卡顿的感觉，影响用户体验。\n## <span id=\"1-1\">页面渲染流程</span>\n一个页面帧在客户端的渲染分为以下几步：   \n![页面渲染流程 来源：Google](https://img14.360buyimg.com/imagetools/jfs/t1/25420/23/7433/43692/5c6bc518E8ebc6723/1ba7bf69d1e49c34.png)     \n1. `JavaScript`：JavaScript实现动画效果，DOM操作等。   \n2. `Style（样式计算）`：确认每个DOM元素应用的CSS样式规则。   \n3. `Layout（布局）`：计算每个DOM元素最终在屏幕上的大小和位置。由于DOM元素的布局是相对的，所以当某个元素发生变化影响了布局时，其他元素也会随之变化，则需要回退重新渲染，这个过程称之为reflow。   \n4. `Paint（绘制）`：在多个层上绘制DOM元素的文字、颜色、图像、边框和阴影等。   \n5. `Composite（Render Layer合并）`：按照合理的顺序合并图层并显示到屏幕上。\n浏览器在实际渲染页面的时候需要经过一系列的映射，由HTML页面构建出来的DOM树到最终的图层，映射过程如下图(来源：[参考[3]](#3))所示（注意下图类名在后续有所更改，RenderObject->LayoutObject，RenderLayer->PaintLayer）：   \n![The Compositing Tree](https://img14.360buyimg.com/imagetools/jfs/t1/19835/12/10577/51755/5c88750fE37bd3acb/f2f49b172da86e5a.png)\n- **Node->RenderObject**：DOM树的每个Node都有一个对应的RenderObject（一对一关系，RenderObject包含了Node的内容）；   \n- **RenderObject -> RenderLayer**：一个或多个RenderObject对应一个RenderLayer（多对一），RenderLayer用于保证元素之间的层级关系，一般来说位于同一位置的且层级相同的元素位于同一个Render Layer，只有某些特殊的RenderObject会专门创建一个新的渲染层，其他的RenderObject与第一个拥有RenderLayer的祖先元素共用一个。常见的生成RenderLayer的RenderObject拥有以下的一种特征[参考[3]](#3)： \n    - 页面根元素\n    - 有CSS定位属性（relative, absolute, fixed, sticky）    \n    -  transparent不为1\n    - overflow不为visible\n    - 有CSS mask属性\n    - 有CSS box-reflect属性\n    - 有CSS filter属性\n    - 3D或硬件加速的2D canvas元素\n    - video元素\n    \n- **RenderLayer -> GraphicsLayer**：一个或多个RenderLayer对应一个GraphicsLayer（多对一），某些被认为是Compositing Layer的RenderLayer单独对应一个GraphicsLayer，其他RenderLayer与第一个拥有GraphicsLayer的祖先元素共用一个GraphicsLayer。每个GraphicsLayer有一个GraphicsContext用于绘制其对应的RenderLayers，合成器将GraphicsContexts的位图合成，最终显示到屏幕上。渲染层提升为合成层的原因如下：   \n    - 有3D transform属性\n    - 有perspective属性\n    - 3D canvas或硬件加速的2D canvas\n    - 硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）\n    - 使用了硬件加速的插件，如flash\n    - 对opacity/transform属性应用了animation/transition（当animation/transition为active）   \n    - 子元素是compositing layer\n    - 兄弟元素是compositing layer，与当前的非composting layer有重叠，层级低于当前层\n    - 有will-change属性       \n\n\n# <span id=\"2\">二、优化方法</span>    \n在网上可以看到很多的优化方案总结，大佬们都写的很好。   \n> Talk is cheap. Show me the code.    \n\n结合页面渲染流程，这里将结合一些测试代码，分析动画的各种优化方案和效果：   \n- `JavaScript`：优化JavaScript的执行效率\n    - `requestAnimationFrame`代替`setTimeout`和`setInterval`\n    - 可并行的DOM元素更新划分为多个小任务\n    - DOM无关的耗时操作放到`Web Workers`中\n- `Style`：降低样式计算复杂度和范围\n    - 降低样式选择器的复杂度\n    - 减少需要执行样式计算的元素个数   \n- `Layout`：避免大规模、复杂的布局\n    - 避免频繁改变布局\n    - 用flexbox布局替代老的布局模型\n    - 避免强制同步布局事件\n- `Paint/Composite`：GPU加速\n    - 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）\n    - 避免提升合成层的陷阱\n\n## <span id=\"2-0\">`JavaScript`：优化JavaScript的执行效率</span>\n### 1. `requestAnimationFrame`代替`setTimeout`和`setInterval`  \n**为什么`setTimeout`和`setInterval`不好？**    \n由于js是单线程执行，所以为了防止某个任务执行时间过长而导致进程阻塞，js中存在异步队列的概念，对于如`setTimeout`和`ajax`请求都是把进程放到了异步队列中，当主进程为空时才执行异步队列中的任务。所以 `setTimeout`和`setInterval`无法保证回调函数的执行时机，可能会在一帧之内执行多次导致多次页面渲染，浪费CPU资源甚至产生卡顿，或者是在一帧即将结束时执行导致重新渲染，出现掉帧的情况。   \n**`requestAnimationFrame`是怎么优化的？**\n- CPU节能，当页面被隐藏或最小化时，暂停渲染。   \n- 函数节流，其循环间隔是由屏幕刷新频率决定的，保证回调函数在屏幕的每一次刷新间隔中只执行一次。    \n   \n**优化效果具体如何？**[DEMO](https://codepen.io/JoeyCai/pen/XOwXwy)   \n    通过chrome的performance面板查看具体表现的差别。        \n    通过`setTimeout`进行了3次渲染，而且有长时间帧出现：   \n    ![setTimeout](https://img10.360buyimg.com/imagetools/jfs/t1/9752/6/14504/771355/5c6e8e33Eb93736f4/0b5cb0adc3ea5c8f.jpg)    \n    使用`requestAnimationFrame`DOM操作部分合并，只进行了2次渲染，长时间帧也被优化：   \n    ![requestAnimationFrame](https://img13.360buyimg.com/imagetools/jfs/t1/32704/5/2719/675214/5c6e8e33Ed56b5b04/bf06524cbff562cc.jpg)   \n\n### 2. DOM无关的耗时操作放到`Web Worker`中   \n**`Web Worker`的好处是什么？**   \nJavaScript是单线程的，如果频繁的进行耗时操作（如实时更新数据），就会造成拥堵，影响用户交互体验。`Web Worker`的作用在于为JavaScript创建了多线程环境，worker线程在后台运行，受主线程控制，两者互不干扰。worker线程负担高延迟且UI无关的任务，主线程负责UI交互就会相对流畅。    \n**需要注意**   \n- `Web Worker`无法操作DOM，本质上只是将数据刷新和页面渲染拆开执行。\n- `Web Worker`遵循同源策略且限制本地访问。\n- 用一次多余的网络请求和浏览器线程资源来换取高效执行。    \n\n**优化效果具体如何？**[DEMO](https://codepen.io/JoeyCai/project/editor/ZqandE)   \n可以通过chrome的performance面板查看具体表现的差别：\n不使用`web worker`，减少了一次网络请求，但是出现了长时间帧，有卡帧的风险。   \n![不使用worker](https://img12.360buyimg.com/imagetools/jfs/t1/25172/28/8409/564851/5c74ec5eE57284d6e/df0bcd6f3351087f.jpg)   \n使用了`web worker`之后，耗时操作无关的任务不再被阻塞，但是增加了网络延迟。如果在项目中使用worker，初始化时间需要好好斟酌。    \n![使用worker](https://img13.360buyimg.com/imagetools/jfs/t1/17237/39/8303/651249/5c74eccfE8c9bdbd6/d408441c34165184.jpg)\n\n**可考虑的应用场景**  \n- 轮询服务器获取数据   \n- 频繁的数据上报   \n- 耗时的数据处理\n\n## <span id=\"2-1\">`Style`：降低样式计算复杂度和范围</span>\n### 1. *降低样式选择器的复杂度？*\n降低样式选择器的复杂度是常常被提出的一个优化方法，实际上这个方法的效果比较微弱，根据Ivan Curic的文章[[5]](#refs-5)的测试方法([DEMO](https://codepen.io/ivancuric/pen/ZaWxqV))，在一个拥有50000个节点的页面中，不同选择器复杂度对于性能的影响不会超过20ms，而一般情况下，页面的节点数都不会达到这个数量。   \n优化效果微弱的原因在于浏览器引擎对选择器速度进行了优化，不同引擎的性能优化方案不同，所以开发者的优化是否有效是难以预测的，至少对于静态元素的优化性价比是极低的。   \n通过测试可以确认的一点是，应当**减少伪类选择器和过长的选择器的使用**。推荐按照如OOCSS、BEM等命名规范来组织CSS，优点是在微弱优化性能的同时也提高了代码可维护性。   \n### 2. 减少需要执行样式计算的元素个数    \n这一点是针对较早的浏览器而言，较早的浏览器如改变了`body`元素上的一个类，则其子元素都需要重新计算样式。    \n现代浏览器都进行了优化，所以优化效果要视具体应用场景而言。目前尚未挖掘到应用例子，后期如有发现回来填坑。  \n## <span id=\"2-2\"> `Layout`：避免大规模、复杂的布局</span>\n### 1. 避免频繁触发布局   \n不同的属性导致的渲染成本不尽相同，这一点在css动画时对比尤其明显。触发layout或者paint的动画属性尤其消耗性能，所以应当尽量使用`transform`和`opacity`作为动画属性，如果无法实现则考虑采用JavaScript实现动画。   \n**性能差别有多大？**\n以width和transform为例，分别实现动画的性能差别：[DEMO](https://codepen.io/JoeyCai/pen/BbNavp)      \n通过width实现动画，帧率较低且曲线抖动明显，右下角也给出了一帧的渲染过程，触发了样式计算，布局，绘制和渲染层合并：      \n![width实现动画](https://img14.360buyimg.com/imagetools/jfs/t1/9917/2/15827/442526/5c764912E4a21de39/cc6866d97ec11f1b.png)   \n通过transform实现动画，可以发现帧率虽然也低但是平稳，渲染过程只触发了样式计算和、绘制和渲染层合并（仅当元素为合成层时，不会触发绘制。后面将详细讲述）：      \n![transform实现动画](https://img14.360buyimg.com/imagetools/jfs/t1/17764/7/8535/398481/5c7648c0Ee511a7d1/6233890c687bb85b.png)\n### 2. 用flexbox布局替代老的布局模型\n常用的经典布局方案有基于浮动的布局、基于绝对定位的布局，flexbox布局相较而言更加高效。在能用flexbox布局的项目中，尽量用flexbox布局。以下[DEMO](https://codepen.io/JoeyCai/pen/vPLWjQ)尝试用三种布局方式渲染一样的界面效果来测试性能：     \n绝对布局：对于每一个元素都需要唯一的定位坐标，当元素较多时，CSS文件偏大，导致在样式计算上花费了较多的时间。      \n![绝对布局](https://img13.360buyimg.com/imagetools/jfs/t1/18552/10/8755/413725/5c78fed1E451f7fbc/a912ac13678feb3a.jpg)   \n浮动布局：浮动元素之间定位会互相影响，部分浮动元素也受到文档流影响，导致布局所需时间较长。   \n![浮动布局](https://img11.360buyimg.com/imagetools/jfs/t1/8544/17/15769/406636/5c78fe8bEa78f88e3/e40a0d94beed9025.jpg)   \n弹性布局：对比前两种布局方案而言，性能有较显著的提升。   \n![弹性布局](https://img11.360buyimg.com/imagetools/jfs/t1/14490/38/8676/397959/5c78feb7E45544822/0308de0c0c8a7317.jpg)   \n### 3. 避免强制同步布局事件      \n**什么是强制同步布局？**   \n前面提到了页面渲染流程是JavaScript->Style->Layout->Paint->Composite，强制同步布局就是强制浏览器在执行JavaScript脚本前先执行布局。   \n**什么情况会导致强制同步布局？**   \nJavaScript运行时，获取到的元素属性样式都是上一帧的数值，所以如果在当前帧的渲染流程中，获取当前帧的某个元素属性之前对该元素进行了修改，浏览器就必须先应用属性再执行JavaScript逻辑，简而言之就是DOM先写后读操作，尤其是连续的读写操作，对浏览器的性能影响更大。\n**对性能影响有多大？**[DEMO](https://codepen.io/JoeyCai/pen/NJryQz)   \nDEMO通过改变1000个节点的属性，测试强制同步布局事件对性能的影响，具体参照下图。可以发现性能的损耗是极大的，连续的读写操作导致连续的强制同步事件触发，JavaScript执行时间变得很长：    \n![强制同步布局](https://img11.360buyimg.com/imagetools/jfs/t1/20407/22/9210/435015/5c7cd4a7E5ec454a1/814a3da7231f7e94.jpg)\n\n## <span id=\"2-3\">`Paint/Composite`：GPU加速</span>\n### 1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）    \n*注：可在Chrome的开发者工具的layers面板查看合成层，layers面板打开方法command+shift+p(mac)/ctrl+shift+p(windows) -> show layers*\n将复杂/频繁变化的元素提升到合成层，这样的好处是该元素绘制的时候不会触发其他元素的绘制。渲染层提升为合成层的原因如下（注意以下原因是在渲染层的基础之上）：   \n- 有3D transform属性\n- 有perspective属性\n- 3D canvas或硬件加速的2D canvas\n- 硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）\n- 使用了硬件加速的插件，如flash/iframe\n- 对opacity/transform属性应用了animation/transition（当animation/transition为active）   \n- will-change属性为opacity、transform、top、left、bottom、right\n- 子元素是compositing layer\n- 兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层        \n\n**为什么会有性能提升？**   \n- 只重绘需要重绘的部分\n- GPU加速：合成层的位图直接由GPU合成，比CPU处理速度更快 \n\n**性能提升有多少？**   [DEMO](https://codepen.io/JoeyCai/pen/QoqMeO)\n通过demo可以看到，提升为合成层之后，paint所需的时间大大减少。   \n![render layer -> compositing layer](https://img13.360buyimg.com/imagetools/jfs/t1/16031/7/10460/249740/5c871e47Ea6fc73a7/6dff807ff7296591.jpg)   \n\n**提升合成层是不是越多越好？**    \n可以看到提升合成层后，paint时间大大下降。但是合成层的创建需要消耗额外的内存和管理资源，过多的合成层给页面带来的内存开销很大，[DEMO](https://codepen.io/JoeyCai/pen/NJaOvy)创建了5000个元素，全部元素都提升为合成层与不提升时的内存消耗进行对比。这一点在移动端尤其需要注意，相比较于PC，移动设备的内存资源更加紧张。 \n![过多合成层](https://img14.360buyimg.com/imagetools/jfs/t1/30928/10/5654/389279/5c87757cE22aa61cc/1b0b1d36b15cd200.jpg)     \n\n\n**只提升动画元素的渲染层**   \n基于提升为合成层来提升性能的原理，当页面其他部分绘制比较复杂且相对静态时，我们可以考虑将动画元素单独提升为合成层，减少动画元素对页面其他元素的影响。      \n   \n### 2. 避免提升合成层的陷阱\n回顾一下提升为合成层的最后一个原因：兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层。   \n这种情况下导致的提升合成层一般都是预期外的。其原因与屏幕的渲染流程有关，我们回忆一下页面映射的最后一步，每一个Compositing Layer对应一张位图，合成器最后将这些位图根据层级关系合并起来最终输出到屏幕。此时我们假设A是已知的合成层，而B理想中应当是普通渲染层，其层级关系如图所示：   \n![层级陷阱](https://img10.360buyimg.com/imagetools/jfs/t1/29982/12/10660/38006/5c8783e5E829c400b/f80855a3afd155f9.jpg)  \nB作为普通渲染层与父级元素位于同一张位图，A单独在一张位图，此时合并的时候层级就会出现问题，如果直接将B置于A之上，有可能导致层级低于A的B的父元素反而显示在了A之上，反之A，B的层级关系就不对了。浏览器此时的解决方案，就是将B也单独出来作为compositing layer进行渲染，导致了意料外的compositing layer生成。\n这种时候第一直觉就是避免重叠的发生不就好了嘛？然而事情并不简单。在查找资料的时候发现了一个神奇宝贝——**assumedOverlap**。字面意思是假设重叠，对于无法/难以判断是否会与compositing layer重合的某些元素，浏览器假设会发生重叠，提升为compositing layer。   \n对此浏览器也进行了优化的，通过层压缩（Layer Squashing）处理，将与合成层有重叠且连续多个的渲染层合并为一个合成层。防止由于重叠导致的提升合成层过多，导致的层爆炸（Layer Explosion），可参考[DEMO](https://codepen.io/JoeyCai/pen/jJaoop)。       \n然而层压缩还是有解决不了的情况，查看[源码](https://chromium.googlesource.com/chromium/blink/+/master/Source/platform/graphics/CompositingReasons.cpp)可以列出以下原因（注意一下都是在重叠/假设重叠的前提下）：      \n- `scrollsWithRespectToSquashingLayer`：渲染层相对于压缩层滚动，当滚动的渲染层与合成层重叠时，会有新的合成层生成且无法压缩。[DEMO(这个例子不是很好，codepen用iframe嵌入，整个iframe都变成了合成层，如果想看效果可以在本地看)](https://codepen.io/JoeyCai/pen/LaOvoM)   \n- `squashingSparsityExceeded`：渲染层压缩后会导致压缩层过于稀疏。[DEMO](https://codepen.io/JoeyCai/pen/ZPaNmV)   \n- `squashingClippingContainerMismatch`：渲染层和压缩层的裁剪容器（clip container）不同，简单理解就是重叠的渲染层的容器overflow类型不同。[DEMO](https://codepen.io/JoeyCai/pen/xBpBrG)   \n- `squashingOpacityAncestorMismatch`：渲染层与压缩层的继承自祖先的opacity属性不同。[DEMO](https://codepen.io/JoeyCai/pen/VRrorE)   \n- `squashingTransformAncestorMismatch`：渲染层与压缩层的继承自祖先的transform不同。[DEMO](https://codepen.io/JoeyCai/pen/wOpOLQ)\n- `squashingFilterAncestorMismatch`：渲染层与压缩层的继承自祖先的filter属性不同，或者是渲染层本身有filter属性。[DEMO](https://codepen.io/JoeyCai/pen/WmdmLL)   \n- `squashingWouldBreakPaintOrder`：无法在不打乱渲染顺序的前提下压缩（e.g. 父元素有mask/filter属性，子元素与压缩层overlap，则假如合并了，父元素的mask/filter属性无法局部应用在压缩层，导致渲染结果有误）。[DEMO](https://codepen.io/JoeyCai/pen/eXyoMg)  \n- `squashingVideoIsDisallowed`：video元素无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/zbpXME)   \n- `squashedLayerClipsCompositingDescendants`：当合成层是被剪切的子元素时，与之重叠的渲染层无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/XGZrgY)\n- `squashingLayoutPartIsDisallowed`：无法压缩frame/iframe/plugin。   \n- `squashingReflectionDisallowed`：无法压缩有reflection属性的渲染层。 [DEMO](https://codepen.io/JoeyCai/pen/QoQWgB)  \n- `squashingBlendingDisallowed`：无法压缩有blend mode属性的渲染层。[DEMO](https://codepen.io/JoeyCai/pen/vPdYdm)   \n- `squashingNearestFixedPositionMismatch`：渲染层的最近fixed元素与压缩层不同，无法被压缩。[DEMO](https://codepen.io/JoeyCai/pen/EMQaWW)    \n\n当发现页面明明没有什么内容却比较卡的时候可以检查一下是不是这个原因，以下给出常见的层压缩解决不了的情况：   \n1. 带`transform`动画的元素，其后的元素为`relative/absolute`定位   \n原因：relative元素和relative下的absolute元素由于assumedOverlap原因都被被提升为合成层，又由于设置了overflow:hidden，基于前面提到的`squashingClippingContainerMismatch`，渲染层与合成层的裁剪容器不同，导致无法层压缩，出现过多的合成层。\n解决方法：为动画的元素设置`z-index`扰乱compositing layer的排序。[DEMO](https://codepen.io/JoeyCai/pen/GeOeWy)   \n\n# 三、<span id=\"3\">参考</span>\n本文结构主要参照文章[1]，对其中的一些优化点进行了实际测试和扩展，也算是一篇读后感吧~   \n关于层压缩部分情况过于复杂，没找到什么资料，感觉还没有完全吃透，后面有机会再重新整理一下。感恩以下大佬！\n1. 深度剖析浏览器渲染性能原理，你到底知道多少？ https://www.jianshu.com/p/a32b890c29b1\n2. <span id=\"refs-5\">Optimizing CSS: ID Selectors and Other Myths https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/</span>      \n3. GPU Accelerated Compositing in Chrome http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\n4. GPU加速是什么 https://aotu.io/notes/2017/04/11/GPU/\n5. Blink Compositing Update: Recap and Squashing https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719      \n6. 无线性能优化：Composite http://taobaofed.org/blog/2016/04/25/performance-composite/\n\n撒花完结~欢迎指教~   ","slug":"优化动画卡顿：卡顿原因分析及优化方案","published":1,"updated":"2019-03-14T09:12:50.234Z","_id":"cjt8ew05s001oyn7o0hmgysfc","layout":"post","photos":[],"link":"","content":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#1\">一、动画卡顿分析</a><ul>\n<li><a href=\"#1-0\">动画卡顿的原因</a></li>\n<li><a href=\"#1-1\">页面渲染流程</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">二、优化方法</a><ul>\n<li><a href=\"#2-0\"><code>JavaScript</code>：优化JavaScript的执行效率</a></li>\n<li><a href=\"#2-1\"><code>Style</code>：降低样式计算复杂度和范围</a></li>\n<li><a href=\"#2-2\"><code>Layout</code>：避免大规模、复杂的布局</a></li>\n<li><a href=\"#2-3\"><code>Paint/Composite</code>：GPU加速</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">三、参考</a></li>\n</ul>\n<h1 id=\"一、动画卡顿分析\"><a href=\"#一、动画卡顿分析\" class=\"headerlink\" title=\"一、动画卡顿分析\"></a><span id=\"1\">一、动画卡顿分析</span></h1><h2 id=\"动画卡顿的原因\"><a href=\"#动画卡顿的原因\" class=\"headerlink\" title=\"动画卡顿的原因\"></a><span id=\"1-0\">动画卡顿的原因</span></h2><p>大多数设备的刷新频率是60次/秒，也就是1秒钟的动画是由60个画面连在一起生成的，所以要求浏览器对每一帧画面的渲染工作要在16ms内完成。当渲染时间超出16ms时，1秒钟内少于60个画面生成，就会有不连贯、卡顿的感觉，影响用户体验。</p>\n<h2 id=\"页面渲染流程\"><a href=\"#页面渲染流程\" class=\"headerlink\" title=\"页面渲染流程\"></a><span id=\"1-1\">页面渲染流程</span></h2><p>一个页面帧在客户端的渲染分为以下几步：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/25420/23/7433/43692/5c6bc518E8ebc6723/1ba7bf69d1e49c34.png\" alt=\"页面渲染流程 来源：Google\">     </p>\n<ol>\n<li><code>JavaScript</code>：JavaScript实现动画效果，DOM操作等。   </li>\n<li><code>Style（样式计算）</code>：确认每个DOM元素应用的CSS样式规则。   </li>\n<li><code>Layout（布局）</code>：计算每个DOM元素最终在屏幕上的大小和位置。由于DOM元素的布局是相对的，所以当某个元素发生变化影响了布局时，其他元素也会随之变化，则需要回退重新渲染，这个过程称之为reflow。   </li>\n<li><code>Paint（绘制）</code>：在多个层上绘制DOM元素的文字、颜色、图像、边框和阴影等。   </li>\n<li><code>Composite（Render Layer合并）</code>：按照合理的顺序合并图层并显示到屏幕上。<br>浏览器在实际渲染页面的时候需要经过一系列的映射，由HTML页面构建出来的DOM树到最终的图层，映射过程如下图(来源：<a href=\"#3\">参考[3]</a>)所示（注意下图类名在后续有所更改，RenderObject-&gt;LayoutObject，RenderLayer-&gt;PaintLayer）：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/19835/12/10577/51755/5c88750fE37bd3acb/f2f49b172da86e5a.png\" alt=\"The Compositing Tree\"></li>\n</ol>\n<ul>\n<li><strong>Node-&gt;RenderObject</strong>：DOM树的每个Node都有一个对应的RenderObject（一对一关系，RenderObject包含了Node的内容）；   </li>\n<li><p><strong>RenderObject -&gt; RenderLayer</strong>：一个或多个RenderObject对应一个RenderLayer（多对一），RenderLayer用于保证元素之间的层级关系，一般来说位于同一位置的且层级相同的元素位于同一个Render Layer，只有某些特殊的RenderObject会专门创建一个新的渲染层，其他的RenderObject与第一个拥有RenderLayer的祖先元素共用一个。常见的生成RenderLayer的RenderObject拥有以下的一种特征<a href=\"#3\">参考[3]</a>： </p>\n<ul>\n<li>页面根元素</li>\n<li>有CSS定位属性（relative, absolute, fixed, sticky）    </li>\n<li>transparent不为1</li>\n<li>overflow不为visible</li>\n<li>有CSS mask属性</li>\n<li>有CSS box-reflect属性</li>\n<li>有CSS filter属性</li>\n<li>3D或硬件加速的2D canvas元素</li>\n<li>video元素</li>\n</ul>\n</li>\n<li><p><strong>RenderLayer -&gt; GraphicsLayer</strong>：一个或多个RenderLayer对应一个GraphicsLayer（多对一），某些被认为是Compositing Layer的RenderLayer单独对应一个GraphicsLayer，其他RenderLayer与第一个拥有GraphicsLayer的祖先元素共用一个GraphicsLayer。每个GraphicsLayer有一个GraphicsContext用于绘制其对应的RenderLayers，合成器将GraphicsContexts的位图合成，最终显示到屏幕上。渲染层提升为合成层的原因如下：   </p>\n<ul>\n<li>有3D transform属性</li>\n<li>有perspective属性</li>\n<li>3D canvas或硬件加速的2D canvas</li>\n<li>硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）</li>\n<li>使用了硬件加速的插件，如flash</li>\n<li>对opacity/transform属性应用了animation/transition（当animation/transition为active）   </li>\n<li>子元素是compositing layer</li>\n<li>兄弟元素是compositing layer，与当前的非composting layer有重叠，层级低于当前层</li>\n<li>有will-change属性       </li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、优化方法\"><a href=\"#二、优化方法\" class=\"headerlink\" title=\"二、优化方法\"></a><span id=\"2\">二、优化方法</span></h1><p>在网上可以看到很多的优化方案总结，大佬们都写的很好。   </p>\n<blockquote>\n<p>Talk is cheap. Show me the code.    </p>\n</blockquote>\n<p>结合页面渲染流程，这里将结合一些测试代码，分析动画的各种优化方案和效果：   </p>\n<ul>\n<li><code>JavaScript</code>：优化JavaScript的执行效率<ul>\n<li><code>requestAnimationFrame</code>代替<code>setTimeout</code>和<code>setInterval</code></li>\n<li>可并行的DOM元素更新划分为多个小任务</li>\n<li>DOM无关的耗时操作放到<code>Web Workers</code>中</li>\n</ul>\n</li>\n<li><code>Style</code>：降低样式计算复杂度和范围<ul>\n<li>降低样式选择器的复杂度</li>\n<li>减少需要执行样式计算的元素个数   </li>\n</ul>\n</li>\n<li><code>Layout</code>：避免大规模、复杂的布局<ul>\n<li>避免频繁改变布局</li>\n<li>用flexbox布局替代老的布局模型</li>\n<li>避免强制同步布局事件</li>\n</ul>\n</li>\n<li><code>Paint/Composite</code>：GPU加速<ul>\n<li>将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）</li>\n<li>避免提升合成层的陷阱</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JavaScript：优化JavaScript的执行效率\"><a href=\"#JavaScript：优化JavaScript的执行效率\" class=\"headerlink\" title=\"JavaScript：优化JavaScript的执行效率\"></a><span id=\"2-0\"><code>JavaScript</code>：优化JavaScript的执行效率</span></h2><h3 id=\"1-requestAnimationFrame代替setTimeout和setInterval\"><a href=\"#1-requestAnimationFrame代替setTimeout和setInterval\" class=\"headerlink\" title=\"1. requestAnimationFrame代替setTimeout和setInterval\"></a>1. <code>requestAnimationFrame</code>代替<code>setTimeout</code>和<code>setInterval</code></h3><p><strong>为什么<code>setTimeout</code>和<code>setInterval</code>不好？</strong><br>由于js是单线程执行，所以为了防止某个任务执行时间过长而导致进程阻塞，js中存在异步队列的概念，对于如<code>setTimeout</code>和<code>ajax</code>请求都是把进程放到了异步队列中，当主进程为空时才执行异步队列中的任务。所以 <code>setTimeout</code>和<code>setInterval</code>无法保证回调函数的执行时机，可能会在一帧之内执行多次导致多次页面渲染，浪费CPU资源甚至产生卡顿，或者是在一帧即将结束时执行导致重新渲染，出现掉帧的情况。<br><strong><code>requestAnimationFrame</code>是怎么优化的？</strong></p>\n<ul>\n<li>CPU节能，当页面被隐藏或最小化时，暂停渲染。   </li>\n<li>函数节流，其循环间隔是由屏幕刷新频率决定的，保证回调函数在屏幕的每一次刷新间隔中只执行一次。    </li>\n</ul>\n<p><strong>优化效果具体如何？</strong><a href=\"https://codepen.io/JoeyCai/pen/XOwXwy\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>    通过chrome的performance面板查看具体表现的差别。<br>    通过<code>setTimeout</code>进行了3次渲染，而且有长时间帧出现：<br>    <img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/9752/6/14504/771355/5c6e8e33Eb93736f4/0b5cb0adc3ea5c8f.jpg\" alt=\"setTimeout\"><br>    使用<code>requestAnimationFrame</code>DOM操作部分合并，只进行了2次渲染，长时间帧也被优化：<br>    <img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/32704/5/2719/675214/5c6e8e33Ed56b5b04/bf06524cbff562cc.jpg\" alt=\"requestAnimationFrame\">   </p>\n<h3 id=\"2-DOM无关的耗时操作放到Web-Worker中\"><a href=\"#2-DOM无关的耗时操作放到Web-Worker中\" class=\"headerlink\" title=\"2. DOM无关的耗时操作放到Web Worker中\"></a>2. DOM无关的耗时操作放到<code>Web Worker</code>中</h3><p><strong><code>Web Worker</code>的好处是什么？</strong><br>JavaScript是单线程的，如果频繁的进行耗时操作（如实时更新数据），就会造成拥堵，影响用户交互体验。<code>Web Worker</code>的作用在于为JavaScript创建了多线程环境，worker线程在后台运行，受主线程控制，两者互不干扰。worker线程负担高延迟且UI无关的任务，主线程负责UI交互就会相对流畅。<br><strong>需要注意</strong>   </p>\n<ul>\n<li><code>Web Worker</code>无法操作DOM，本质上只是将数据刷新和页面渲染拆开执行。</li>\n<li><code>Web Worker</code>遵循同源策略且限制本地访问。</li>\n<li>用一次多余的网络请求和浏览器线程资源来换取高效执行。    </li>\n</ul>\n<p><strong>优化效果具体如何？</strong><a href=\"https://codepen.io/JoeyCai/project/editor/ZqandE\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>可以通过chrome的performance面板查看具体表现的差别：<br>不使用<code>web worker</code>，减少了一次网络请求，但是出现了长时间帧，有卡帧的风险。<br><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/25172/28/8409/564851/5c74ec5eE57284d6e/df0bcd6f3351087f.jpg\" alt=\"不使用worker\"><br>使用了<code>web worker</code>之后，耗时操作无关的任务不再被阻塞，但是增加了网络延迟。如果在项目中使用worker，初始化时间需要好好斟酌。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/17237/39/8303/651249/5c74eccfE8c9bdbd6/d408441c34165184.jpg\" alt=\"使用worker\"></p>\n<p><strong>可考虑的应用场景</strong>  </p>\n<ul>\n<li>轮询服务器获取数据   </li>\n<li>频繁的数据上报   </li>\n<li>耗时的数据处理</li>\n</ul>\n<h2 id=\"Style：降低样式计算复杂度和范围\"><a href=\"#Style：降低样式计算复杂度和范围\" class=\"headerlink\" title=\"Style：降低样式计算复杂度和范围\"></a><span id=\"2-1\"><code>Style</code>：降低样式计算复杂度和范围</span></h2><h3 id=\"1-降低样式选择器的复杂度？\"><a href=\"#1-降低样式选择器的复杂度？\" class=\"headerlink\" title=\"1. 降低样式选择器的复杂度？\"></a>1. <em>降低样式选择器的复杂度？</em></h3><p>降低样式选择器的复杂度是常常被提出的一个优化方法，实际上这个方法的效果比较微弱，根据Ivan Curic的文章<a href=\"#refs-5\">[5]</a>的测试方法(<a href=\"https://codepen.io/ivancuric/pen/ZaWxqV\" target=\"_blank\" rel=\"noopener\">DEMO</a>)，在一个拥有50000个节点的页面中，不同选择器复杂度对于性能的影响不会超过20ms，而一般情况下，页面的节点数都不会达到这个数量。<br>优化效果微弱的原因在于浏览器引擎对选择器速度进行了优化，不同引擎的性能优化方案不同，所以开发者的优化是否有效是难以预测的，至少对于静态元素的优化性价比是极低的。<br>通过测试可以确认的一点是，应当<strong>减少伪类选择器和过长的选择器的使用</strong>。推荐按照如OOCSS、BEM等命名规范来组织CSS，优点是在微弱优化性能的同时也提高了代码可维护性。   </p>\n<h3 id=\"2-减少需要执行样式计算的元素个数\"><a href=\"#2-减少需要执行样式计算的元素个数\" class=\"headerlink\" title=\"2. 减少需要执行样式计算的元素个数\"></a>2. 减少需要执行样式计算的元素个数</h3><p>这一点是针对较早的浏览器而言，较早的浏览器如改变了<code>body</code>元素上的一个类，则其子元素都需要重新计算样式。<br>现代浏览器都进行了优化，所以优化效果要视具体应用场景而言。目前尚未挖掘到应用例子，后期如有发现回来填坑。  </p>\n<h2 id=\"Layout：避免大规模、复杂的布局\"><a href=\"#Layout：避免大规模、复杂的布局\" class=\"headerlink\" title=\" Layout：避免大规模、复杂的布局\"></a><span id=\"2-2\"> <code>Layout</code>：避免大规模、复杂的布局</span></h2><h3 id=\"1-避免频繁触发布局\"><a href=\"#1-避免频繁触发布局\" class=\"headerlink\" title=\"1. 避免频繁触发布局\"></a>1. 避免频繁触发布局</h3><p>不同的属性导致的渲染成本不尽相同，这一点在css动画时对比尤其明显。触发layout或者paint的动画属性尤其消耗性能，所以应当尽量使用<code>transform</code>和<code>opacity</code>作为动画属性，如果无法实现则考虑采用JavaScript实现动画。<br><strong>性能差别有多大？</strong><br>以width和transform为例，分别实现动画的性能差别：<a href=\"https://codepen.io/JoeyCai/pen/BbNavp\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>通过width实现动画，帧率较低且曲线抖动明显，右下角也给出了一帧的渲染过程，触发了样式计算，布局，绘制和渲染层合并：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/9917/2/15827/442526/5c764912E4a21de39/cc6866d97ec11f1b.png\" alt=\"width实现动画\"><br>通过transform实现动画，可以发现帧率虽然也低但是平稳，渲染过程只触发了样式计算和、绘制和渲染层合并（仅当元素为合成层时，不会触发绘制。后面将详细讲述）：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/17764/7/8535/398481/5c7648c0Ee511a7d1/6233890c687bb85b.png\" alt=\"transform实现动画\"></p>\n<h3 id=\"2-用flexbox布局替代老的布局模型\"><a href=\"#2-用flexbox布局替代老的布局模型\" class=\"headerlink\" title=\"2. 用flexbox布局替代老的布局模型\"></a>2. 用flexbox布局替代老的布局模型</h3><p>常用的经典布局方案有基于浮动的布局、基于绝对定位的布局，flexbox布局相较而言更加高效。在能用flexbox布局的项目中，尽量用flexbox布局。以下<a href=\"https://codepen.io/JoeyCai/pen/vPLWjQ\" target=\"_blank\" rel=\"noopener\">DEMO</a>尝试用三种布局方式渲染一样的界面效果来测试性能：<br>绝对布局：对于每一个元素都需要唯一的定位坐标，当元素较多时，CSS文件偏大，导致在样式计算上花费了较多的时间。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/18552/10/8755/413725/5c78fed1E451f7fbc/a912ac13678feb3a.jpg\" alt=\"绝对布局\"><br>浮动布局：浮动元素之间定位会互相影响，部分浮动元素也受到文档流影响，导致布局所需时间较长。<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/8544/17/15769/406636/5c78fe8bEa78f88e3/e40a0d94beed9025.jpg\" alt=\"浮动布局\"><br>弹性布局：对比前两种布局方案而言，性能有较显著的提升。<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/14490/38/8676/397959/5c78feb7E45544822/0308de0c0c8a7317.jpg\" alt=\"弹性布局\">   </p>\n<h3 id=\"3-避免强制同步布局事件\"><a href=\"#3-避免强制同步布局事件\" class=\"headerlink\" title=\"3. 避免强制同步布局事件\"></a>3. 避免强制同步布局事件</h3><p><strong>什么是强制同步布局？</strong><br>前面提到了页面渲染流程是JavaScript-&gt;Style-&gt;Layout-&gt;Paint-&gt;Composite，强制同步布局就是强制浏览器在执行JavaScript脚本前先执行布局。<br><strong>什么情况会导致强制同步布局？</strong><br>JavaScript运行时，获取到的元素属性样式都是上一帧的数值，所以如果在当前帧的渲染流程中，获取当前帧的某个元素属性之前对该元素进行了修改，浏览器就必须先应用属性再执行JavaScript逻辑，简而言之就是DOM先写后读操作，尤其是连续的读写操作，对浏览器的性能影响更大。<br><strong>对性能影响有多大？</strong><a href=\"https://codepen.io/JoeyCai/pen/NJryQz\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>DEMO通过改变1000个节点的属性，测试强制同步布局事件对性能的影响，具体参照下图。可以发现性能的损耗是极大的，连续的读写操作导致连续的强制同步事件触发，JavaScript执行时间变得很长：<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/20407/22/9210/435015/5c7cd4a7E5ec454a1/814a3da7231f7e94.jpg\" alt=\"强制同步布局\"></p>\n<h2 id=\"Paint-Composite：GPU加速\"><a href=\"#Paint-Composite：GPU加速\" class=\"headerlink\" title=\"Paint/Composite：GPU加速\"></a><span id=\"2-3\"><code>Paint/Composite</code>：GPU加速</span></h2><h3 id=\"1-将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing-Layer）\"><a href=\"#1-将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing-Layer）\" class=\"headerlink\" title=\"1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）\"></a>1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）</h3><p><em>注：可在Chrome的开发者工具的layers面板查看合成层，layers面板打开方法command+shift+p(mac)/ctrl+shift+p(windows) -&gt; show layers</em><br>将复杂/频繁变化的元素提升到合成层，这样的好处是该元素绘制的时候不会触发其他元素的绘制。渲染层提升为合成层的原因如下（注意以下原因是在渲染层的基础之上）：   </p>\n<ul>\n<li>有3D transform属性</li>\n<li>有perspective属性</li>\n<li>3D canvas或硬件加速的2D canvas</li>\n<li>硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）</li>\n<li>使用了硬件加速的插件，如flash/iframe</li>\n<li>对opacity/transform属性应用了animation/transition（当animation/transition为active）   </li>\n<li>will-change属性为opacity、transform、top、left、bottom、right</li>\n<li>子元素是compositing layer</li>\n<li>兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层        </li>\n</ul>\n<p><strong>为什么会有性能提升？</strong>   </p>\n<ul>\n<li>只重绘需要重绘的部分</li>\n<li>GPU加速：合成层的位图直接由GPU合成，比CPU处理速度更快 </li>\n</ul>\n<p><strong>性能提升有多少？</strong>   <a href=\"https://codepen.io/JoeyCai/pen/QoqMeO\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>通过demo可以看到，提升为合成层之后，paint所需的时间大大减少。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/16031/7/10460/249740/5c871e47Ea6fc73a7/6dff807ff7296591.jpg\" alt=\"render layer -&gt; compositing layer\">   </p>\n<p><strong>提升合成层是不是越多越好？</strong><br>可以看到提升合成层后，paint时间大大下降。但是合成层的创建需要消耗额外的内存和管理资源，过多的合成层给页面带来的内存开销很大，<a href=\"https://codepen.io/JoeyCai/pen/NJaOvy\" target=\"_blank\" rel=\"noopener\">DEMO</a>创建了5000个元素，全部元素都提升为合成层与不提升时的内存消耗进行对比。这一点在移动端尤其需要注意，相比较于PC，移动设备的内存资源更加紧张。<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/30928/10/5654/389279/5c87757cE22aa61cc/1b0b1d36b15cd200.jpg\" alt=\"过多合成层\">     </p>\n<p><strong>只提升动画元素的渲染层</strong><br>基于提升为合成层来提升性能的原理，当页面其他部分绘制比较复杂且相对静态时，我们可以考虑将动画元素单独提升为合成层，减少动画元素对页面其他元素的影响。      </p>\n<h3 id=\"2-避免提升合成层的陷阱\"><a href=\"#2-避免提升合成层的陷阱\" class=\"headerlink\" title=\"2. 避免提升合成层的陷阱\"></a>2. 避免提升合成层的陷阱</h3><p>回顾一下提升为合成层的最后一个原因：兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层。<br>这种情况下导致的提升合成层一般都是预期外的。其原因与屏幕的渲染流程有关，我们回忆一下页面映射的最后一步，每一个Compositing Layer对应一张位图，合成器最后将这些位图根据层级关系合并起来最终输出到屏幕。此时我们假设A是已知的合成层，而B理想中应当是普通渲染层，其层级关系如图所示：<br><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/29982/12/10660/38006/5c8783e5E829c400b/f80855a3afd155f9.jpg\" alt=\"层级陷阱\"><br>B作为普通渲染层与父级元素位于同一张位图，A单独在一张位图，此时合并的时候层级就会出现问题，如果直接将B置于A之上，有可能导致层级低于A的B的父元素反而显示在了A之上，反之A，B的层级关系就不对了。浏览器此时的解决方案，就是将B也单独出来作为compositing layer进行渲染，导致了意料外的compositing layer生成。<br>这种时候第一直觉就是避免重叠的发生不就好了嘛？然而事情并不简单。在查找资料的时候发现了一个神奇宝贝——<strong>assumedOverlap</strong>。字面意思是假设重叠，对于无法/难以判断是否会与compositing layer重合的某些元素，浏览器假设会发生重叠，提升为compositing layer。<br>对此浏览器也进行了优化的，通过层压缩（Layer Squashing）处理，将与合成层有重叠且连续多个的渲染层合并为一个合成层。防止由于重叠导致的提升合成层过多，导致的层爆炸（Layer Explosion），可参考<a href=\"https://codepen.io/JoeyCai/pen/jJaoop\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<br>然而层压缩还是有解决不了的情况，查看<a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/platform/graphics/CompositingReasons.cpp\" target=\"_blank\" rel=\"noopener\">源码</a>可以列出以下原因（注意一下都是在重叠/假设重叠的前提下）：      </p>\n<ul>\n<li><code>scrollsWithRespectToSquashingLayer</code>：渲染层相对于压缩层滚动，当滚动的渲染层与合成层重叠时，会有新的合成层生成且无法压缩。<a href=\"https://codepen.io/JoeyCai/pen/LaOvoM\" target=\"_blank\" rel=\"noopener\">DEMO(这个例子不是很好，codepen用iframe嵌入，整个iframe都变成了合成层，如果想看效果可以在本地看)</a>   </li>\n<li><code>squashingSparsityExceeded</code>：渲染层压缩后会导致压缩层过于稀疏。<a href=\"https://codepen.io/JoeyCai/pen/ZPaNmV\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingClippingContainerMismatch</code>：渲染层和压缩层的裁剪容器（clip container）不同，简单理解就是重叠的渲染层的容器overflow类型不同。<a href=\"https://codepen.io/JoeyCai/pen/xBpBrG\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingOpacityAncestorMismatch</code>：渲染层与压缩层的继承自祖先的opacity属性不同。<a href=\"https://codepen.io/JoeyCai/pen/VRrorE\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingTransformAncestorMismatch</code>：渲染层与压缩层的继承自祖先的transform不同。<a href=\"https://codepen.io/JoeyCai/pen/wOpOLQ\" target=\"_blank\" rel=\"noopener\">DEMO</a></li>\n<li><code>squashingFilterAncestorMismatch</code>：渲染层与压缩层的继承自祖先的filter属性不同，或者是渲染层本身有filter属性。<a href=\"https://codepen.io/JoeyCai/pen/WmdmLL\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingWouldBreakPaintOrder</code>：无法在不打乱渲染顺序的前提下压缩（e.g. 父元素有mask/filter属性，子元素与压缩层overlap，则假如合并了，父元素的mask/filter属性无法局部应用在压缩层，导致渲染结果有误）。<a href=\"https://codepen.io/JoeyCai/pen/eXyoMg\" target=\"_blank\" rel=\"noopener\">DEMO</a>  </li>\n<li><code>squashingVideoIsDisallowed</code>：video元素无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/zbpXME\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashedLayerClipsCompositingDescendants</code>：当合成层是被剪切的子元素时，与之重叠的渲染层无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/XGZrgY\" target=\"_blank\" rel=\"noopener\">DEMO</a></li>\n<li><code>squashingLayoutPartIsDisallowed</code>：无法压缩frame/iframe/plugin。   </li>\n<li><code>squashingReflectionDisallowed</code>：无法压缩有reflection属性的渲染层。 <a href=\"https://codepen.io/JoeyCai/pen/QoQWgB\" target=\"_blank\" rel=\"noopener\">DEMO</a>  </li>\n<li><code>squashingBlendingDisallowed</code>：无法压缩有blend mode属性的渲染层。<a href=\"https://codepen.io/JoeyCai/pen/vPdYdm\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingNearestFixedPositionMismatch</code>：渲染层的最近fixed元素与压缩层不同，无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/EMQaWW\" target=\"_blank\" rel=\"noopener\">DEMO</a>    </li>\n</ul>\n<p>当发现页面明明没有什么内容却比较卡的时候可以检查一下是不是这个原因，以下给出常见的层压缩解决不了的情况：   </p>\n<ol>\n<li>带<code>transform</code>动画的元素，其后的元素为<code>relative/absolute</code>定位<br>原因：relative元素和relative下的absolute元素由于assumedOverlap原因都被被提升为合成层，又由于设置了overflow:hidden，基于前面提到的<code>squashingClippingContainerMismatch</code>，渲染层与合成层的裁剪容器不同，导致无法层压缩，出现过多的合成层。<br>解决方法：为动画的元素设置<code>z-index</code>扰乱compositing layer的排序。<a href=\"https://codepen.io/JoeyCai/pen/GeOeWy\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n</ol>\n<h1 id=\"三、参考\"><a href=\"#三、参考\" class=\"headerlink\" title=\"三、参考\"></a>三、<span id=\"3\">参考</span></h1><p>本文结构主要参照文章[1]，对其中的一些优化点进行了实际测试和扩展，也算是一篇读后感吧~<br>关于层压缩部分情况过于复杂，没找到什么资料，感觉还没有完全吃透，后面有机会再重新整理一下。感恩以下大佬！</p>\n<ol>\n<li>深度剖析浏览器渲染性能原理，你到底知道多少？ <a href=\"https://www.jianshu.com/p/a32b890c29b1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a32b890c29b1</a></li>\n<li><span id=\"refs-5\">Optimizing CSS: ID Selectors and Other Myths <a href=\"https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/\" target=\"_blank\" rel=\"noopener\">https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/</a></span>      </li>\n<li>GPU Accelerated Compositing in Chrome <a href=\"http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\" target=\"_blank\" rel=\"noopener\">http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome</a></li>\n<li>GPU加速是什么 <a href=\"https://aotu.io/notes/2017/04/11/GPU/\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/04/11/GPU/</a></li>\n<li>Blink Compositing Update: Recap and Squashing <a href=\"https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719</a>      </li>\n<li>无线性能优化：Composite <a href=\"http://taobaofed.org/blog/2016/04/25/performance-composite/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/04/25/performance-composite/</a></li>\n</ol>\n<p>撒花完结~欢迎指教~   </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li><a href=\"#1\">一、动画卡顿分析</a><ul>\n<li><a href=\"#1-0\">动画卡顿的原因</a></li>\n<li><a href=\"#1-1\">页面渲染流程</a></li>\n</ul>\n</li>\n<li><a href=\"#2\">二、优化方法</a><ul>\n<li><a href=\"#2-0\"><code>JavaScript</code>：优化JavaScript的执行效率</a></li>\n<li><a href=\"#2-1\"><code>Style</code>：降低样式计算复杂度和范围</a></li>\n<li><a href=\"#2-2\"><code>Layout</code>：避免大规模、复杂的布局</a></li>\n<li><a href=\"#2-3\"><code>Paint/Composite</code>：GPU加速</a></li>\n</ul>\n</li>\n<li><a href=\"#3\">三、参考</a></li>\n</ul>\n<h1 id=\"一、动画卡顿分析\"><a href=\"#一、动画卡顿分析\" class=\"headerlink\" title=\"一、动画卡顿分析\"></a><span id=\"1\">一、动画卡顿分析</span></h1><h2 id=\"动画卡顿的原因\"><a href=\"#动画卡顿的原因\" class=\"headerlink\" title=\"动画卡顿的原因\"></a><span id=\"1-0\">动画卡顿的原因</span></h2><p>大多数设备的刷新频率是60次/秒，也就是1秒钟的动画是由60个画面连在一起生成的，所以要求浏览器对每一帧画面的渲染工作要在16ms内完成。当渲染时间超出16ms时，1秒钟内少于60个画面生成，就会有不连贯、卡顿的感觉，影响用户体验。</p>\n<h2 id=\"页面渲染流程\"><a href=\"#页面渲染流程\" class=\"headerlink\" title=\"页面渲染流程\"></a><span id=\"1-1\">页面渲染流程</span></h2><p>一个页面帧在客户端的渲染分为以下几步：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/25420/23/7433/43692/5c6bc518E8ebc6723/1ba7bf69d1e49c34.png\" alt=\"页面渲染流程 来源：Google\">     </p>\n<ol>\n<li><code>JavaScript</code>：JavaScript实现动画效果，DOM操作等。   </li>\n<li><code>Style（样式计算）</code>：确认每个DOM元素应用的CSS样式规则。   </li>\n<li><code>Layout（布局）</code>：计算每个DOM元素最终在屏幕上的大小和位置。由于DOM元素的布局是相对的，所以当某个元素发生变化影响了布局时，其他元素也会随之变化，则需要回退重新渲染，这个过程称之为reflow。   </li>\n<li><code>Paint（绘制）</code>：在多个层上绘制DOM元素的文字、颜色、图像、边框和阴影等。   </li>\n<li><code>Composite（Render Layer合并）</code>：按照合理的顺序合并图层并显示到屏幕上。<br>浏览器在实际渲染页面的时候需要经过一系列的映射，由HTML页面构建出来的DOM树到最终的图层，映射过程如下图(来源：<a href=\"#3\">参考[3]</a>)所示（注意下图类名在后续有所更改，RenderObject-&gt;LayoutObject，RenderLayer-&gt;PaintLayer）：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/19835/12/10577/51755/5c88750fE37bd3acb/f2f49b172da86e5a.png\" alt=\"The Compositing Tree\"></li>\n</ol>\n<ul>\n<li><strong>Node-&gt;RenderObject</strong>：DOM树的每个Node都有一个对应的RenderObject（一对一关系，RenderObject包含了Node的内容）；   </li>\n<li><p><strong>RenderObject -&gt; RenderLayer</strong>：一个或多个RenderObject对应一个RenderLayer（多对一），RenderLayer用于保证元素之间的层级关系，一般来说位于同一位置的且层级相同的元素位于同一个Render Layer，只有某些特殊的RenderObject会专门创建一个新的渲染层，其他的RenderObject与第一个拥有RenderLayer的祖先元素共用一个。常见的生成RenderLayer的RenderObject拥有以下的一种特征<a href=\"#3\">参考[3]</a>： </p>\n<ul>\n<li>页面根元素</li>\n<li>有CSS定位属性（relative, absolute, fixed, sticky）    </li>\n<li>transparent不为1</li>\n<li>overflow不为visible</li>\n<li>有CSS mask属性</li>\n<li>有CSS box-reflect属性</li>\n<li>有CSS filter属性</li>\n<li>3D或硬件加速的2D canvas元素</li>\n<li>video元素</li>\n</ul>\n</li>\n<li><p><strong>RenderLayer -&gt; GraphicsLayer</strong>：一个或多个RenderLayer对应一个GraphicsLayer（多对一），某些被认为是Compositing Layer的RenderLayer单独对应一个GraphicsLayer，其他RenderLayer与第一个拥有GraphicsLayer的祖先元素共用一个GraphicsLayer。每个GraphicsLayer有一个GraphicsContext用于绘制其对应的RenderLayers，合成器将GraphicsContexts的位图合成，最终显示到屏幕上。渲染层提升为合成层的原因如下：   </p>\n<ul>\n<li>有3D transform属性</li>\n<li>有perspective属性</li>\n<li>3D canvas或硬件加速的2D canvas</li>\n<li>硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）</li>\n<li>使用了硬件加速的插件，如flash</li>\n<li>对opacity/transform属性应用了animation/transition（当animation/transition为active）   </li>\n<li>子元素是compositing layer</li>\n<li>兄弟元素是compositing layer，与当前的非composting layer有重叠，层级低于当前层</li>\n<li>有will-change属性       </li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二、优化方法\"><a href=\"#二、优化方法\" class=\"headerlink\" title=\"二、优化方法\"></a><span id=\"2\">二、优化方法</span></h1><p>在网上可以看到很多的优化方案总结，大佬们都写的很好。   </p>\n<blockquote>\n<p>Talk is cheap. Show me the code.    </p>\n</blockquote>\n<p>结合页面渲染流程，这里将结合一些测试代码，分析动画的各种优化方案和效果：   </p>\n<ul>\n<li><code>JavaScript</code>：优化JavaScript的执行效率<ul>\n<li><code>requestAnimationFrame</code>代替<code>setTimeout</code>和<code>setInterval</code></li>\n<li>可并行的DOM元素更新划分为多个小任务</li>\n<li>DOM无关的耗时操作放到<code>Web Workers</code>中</li>\n</ul>\n</li>\n<li><code>Style</code>：降低样式计算复杂度和范围<ul>\n<li>降低样式选择器的复杂度</li>\n<li>减少需要执行样式计算的元素个数   </li>\n</ul>\n</li>\n<li><code>Layout</code>：避免大规模、复杂的布局<ul>\n<li>避免频繁改变布局</li>\n<li>用flexbox布局替代老的布局模型</li>\n<li>避免强制同步布局事件</li>\n</ul>\n</li>\n<li><code>Paint/Composite</code>：GPU加速<ul>\n<li>将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）</li>\n<li>避免提升合成层的陷阱</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"JavaScript：优化JavaScript的执行效率\"><a href=\"#JavaScript：优化JavaScript的执行效率\" class=\"headerlink\" title=\"JavaScript：优化JavaScript的执行效率\"></a><span id=\"2-0\"><code>JavaScript</code>：优化JavaScript的执行效率</span></h2><h3 id=\"1-requestAnimationFrame代替setTimeout和setInterval\"><a href=\"#1-requestAnimationFrame代替setTimeout和setInterval\" class=\"headerlink\" title=\"1. requestAnimationFrame代替setTimeout和setInterval\"></a>1. <code>requestAnimationFrame</code>代替<code>setTimeout</code>和<code>setInterval</code></h3><p><strong>为什么<code>setTimeout</code>和<code>setInterval</code>不好？</strong><br>由于js是单线程执行，所以为了防止某个任务执行时间过长而导致进程阻塞，js中存在异步队列的概念，对于如<code>setTimeout</code>和<code>ajax</code>请求都是把进程放到了异步队列中，当主进程为空时才执行异步队列中的任务。所以 <code>setTimeout</code>和<code>setInterval</code>无法保证回调函数的执行时机，可能会在一帧之内执行多次导致多次页面渲染，浪费CPU资源甚至产生卡顿，或者是在一帧即将结束时执行导致重新渲染，出现掉帧的情况。<br><strong><code>requestAnimationFrame</code>是怎么优化的？</strong></p>\n<ul>\n<li>CPU节能，当页面被隐藏或最小化时，暂停渲染。   </li>\n<li>函数节流，其循环间隔是由屏幕刷新频率决定的，保证回调函数在屏幕的每一次刷新间隔中只执行一次。    </li>\n</ul>\n<p><strong>优化效果具体如何？</strong><a href=\"https://codepen.io/JoeyCai/pen/XOwXwy\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>    通过chrome的performance面板查看具体表现的差别。<br>    通过<code>setTimeout</code>进行了3次渲染，而且有长时间帧出现：<br>    <img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/9752/6/14504/771355/5c6e8e33Eb93736f4/0b5cb0adc3ea5c8f.jpg\" alt=\"setTimeout\"><br>    使用<code>requestAnimationFrame</code>DOM操作部分合并，只进行了2次渲染，长时间帧也被优化：<br>    <img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/32704/5/2719/675214/5c6e8e33Ed56b5b04/bf06524cbff562cc.jpg\" alt=\"requestAnimationFrame\">   </p>\n<h3 id=\"2-DOM无关的耗时操作放到Web-Worker中\"><a href=\"#2-DOM无关的耗时操作放到Web-Worker中\" class=\"headerlink\" title=\"2. DOM无关的耗时操作放到Web Worker中\"></a>2. DOM无关的耗时操作放到<code>Web Worker</code>中</h3><p><strong><code>Web Worker</code>的好处是什么？</strong><br>JavaScript是单线程的，如果频繁的进行耗时操作（如实时更新数据），就会造成拥堵，影响用户交互体验。<code>Web Worker</code>的作用在于为JavaScript创建了多线程环境，worker线程在后台运行，受主线程控制，两者互不干扰。worker线程负担高延迟且UI无关的任务，主线程负责UI交互就会相对流畅。<br><strong>需要注意</strong>   </p>\n<ul>\n<li><code>Web Worker</code>无法操作DOM，本质上只是将数据刷新和页面渲染拆开执行。</li>\n<li><code>Web Worker</code>遵循同源策略且限制本地访问。</li>\n<li>用一次多余的网络请求和浏览器线程资源来换取高效执行。    </li>\n</ul>\n<p><strong>优化效果具体如何？</strong><a href=\"https://codepen.io/JoeyCai/project/editor/ZqandE\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>可以通过chrome的performance面板查看具体表现的差别：<br>不使用<code>web worker</code>，减少了一次网络请求，但是出现了长时间帧，有卡帧的风险。<br><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/25172/28/8409/564851/5c74ec5eE57284d6e/df0bcd6f3351087f.jpg\" alt=\"不使用worker\"><br>使用了<code>web worker</code>之后，耗时操作无关的任务不再被阻塞，但是增加了网络延迟。如果在项目中使用worker，初始化时间需要好好斟酌。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/17237/39/8303/651249/5c74eccfE8c9bdbd6/d408441c34165184.jpg\" alt=\"使用worker\"></p>\n<p><strong>可考虑的应用场景</strong>  </p>\n<ul>\n<li>轮询服务器获取数据   </li>\n<li>频繁的数据上报   </li>\n<li>耗时的数据处理</li>\n</ul>\n<h2 id=\"Style：降低样式计算复杂度和范围\"><a href=\"#Style：降低样式计算复杂度和范围\" class=\"headerlink\" title=\"Style：降低样式计算复杂度和范围\"></a><span id=\"2-1\"><code>Style</code>：降低样式计算复杂度和范围</span></h2><h3 id=\"1-降低样式选择器的复杂度？\"><a href=\"#1-降低样式选择器的复杂度？\" class=\"headerlink\" title=\"1. 降低样式选择器的复杂度？\"></a>1. <em>降低样式选择器的复杂度？</em></h3><p>降低样式选择器的复杂度是常常被提出的一个优化方法，实际上这个方法的效果比较微弱，根据Ivan Curic的文章<a href=\"#refs-5\">[5]</a>的测试方法(<a href=\"https://codepen.io/ivancuric/pen/ZaWxqV\" target=\"_blank\" rel=\"noopener\">DEMO</a>)，在一个拥有50000个节点的页面中，不同选择器复杂度对于性能的影响不会超过20ms，而一般情况下，页面的节点数都不会达到这个数量。<br>优化效果微弱的原因在于浏览器引擎对选择器速度进行了优化，不同引擎的性能优化方案不同，所以开发者的优化是否有效是难以预测的，至少对于静态元素的优化性价比是极低的。<br>通过测试可以确认的一点是，应当<strong>减少伪类选择器和过长的选择器的使用</strong>。推荐按照如OOCSS、BEM等命名规范来组织CSS，优点是在微弱优化性能的同时也提高了代码可维护性。   </p>\n<h3 id=\"2-减少需要执行样式计算的元素个数\"><a href=\"#2-减少需要执行样式计算的元素个数\" class=\"headerlink\" title=\"2. 减少需要执行样式计算的元素个数\"></a>2. 减少需要执行样式计算的元素个数</h3><p>这一点是针对较早的浏览器而言，较早的浏览器如改变了<code>body</code>元素上的一个类，则其子元素都需要重新计算样式。<br>现代浏览器都进行了优化，所以优化效果要视具体应用场景而言。目前尚未挖掘到应用例子，后期如有发现回来填坑。  </p>\n<h2 id=\"Layout：避免大规模、复杂的布局\"><a href=\"#Layout：避免大规模、复杂的布局\" class=\"headerlink\" title=\" Layout：避免大规模、复杂的布局\"></a><span id=\"2-2\"> <code>Layout</code>：避免大规模、复杂的布局</span></h2><h3 id=\"1-避免频繁触发布局\"><a href=\"#1-避免频繁触发布局\" class=\"headerlink\" title=\"1. 避免频繁触发布局\"></a>1. 避免频繁触发布局</h3><p>不同的属性导致的渲染成本不尽相同，这一点在css动画时对比尤其明显。触发layout或者paint的动画属性尤其消耗性能，所以应当尽量使用<code>transform</code>和<code>opacity</code>作为动画属性，如果无法实现则考虑采用JavaScript实现动画。<br><strong>性能差别有多大？</strong><br>以width和transform为例，分别实现动画的性能差别：<a href=\"https://codepen.io/JoeyCai/pen/BbNavp\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>通过width实现动画，帧率较低且曲线抖动明显，右下角也给出了一帧的渲染过程，触发了样式计算，布局，绘制和渲染层合并：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/9917/2/15827/442526/5c764912E4a21de39/cc6866d97ec11f1b.png\" alt=\"width实现动画\"><br>通过transform实现动画，可以发现帧率虽然也低但是平稳，渲染过程只触发了样式计算和、绘制和渲染层合并（仅当元素为合成层时，不会触发绘制。后面将详细讲述）：<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/17764/7/8535/398481/5c7648c0Ee511a7d1/6233890c687bb85b.png\" alt=\"transform实现动画\"></p>\n<h3 id=\"2-用flexbox布局替代老的布局模型\"><a href=\"#2-用flexbox布局替代老的布局模型\" class=\"headerlink\" title=\"2. 用flexbox布局替代老的布局模型\"></a>2. 用flexbox布局替代老的布局模型</h3><p>常用的经典布局方案有基于浮动的布局、基于绝对定位的布局，flexbox布局相较而言更加高效。在能用flexbox布局的项目中，尽量用flexbox布局。以下<a href=\"https://codepen.io/JoeyCai/pen/vPLWjQ\" target=\"_blank\" rel=\"noopener\">DEMO</a>尝试用三种布局方式渲染一样的界面效果来测试性能：<br>绝对布局：对于每一个元素都需要唯一的定位坐标，当元素较多时，CSS文件偏大，导致在样式计算上花费了较多的时间。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/18552/10/8755/413725/5c78fed1E451f7fbc/a912ac13678feb3a.jpg\" alt=\"绝对布局\"><br>浮动布局：浮动元素之间定位会互相影响，部分浮动元素也受到文档流影响，导致布局所需时间较长。<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/8544/17/15769/406636/5c78fe8bEa78f88e3/e40a0d94beed9025.jpg\" alt=\"浮动布局\"><br>弹性布局：对比前两种布局方案而言，性能有较显著的提升。<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/14490/38/8676/397959/5c78feb7E45544822/0308de0c0c8a7317.jpg\" alt=\"弹性布局\">   </p>\n<h3 id=\"3-避免强制同步布局事件\"><a href=\"#3-避免强制同步布局事件\" class=\"headerlink\" title=\"3. 避免强制同步布局事件\"></a>3. 避免强制同步布局事件</h3><p><strong>什么是强制同步布局？</strong><br>前面提到了页面渲染流程是JavaScript-&gt;Style-&gt;Layout-&gt;Paint-&gt;Composite，强制同步布局就是强制浏览器在执行JavaScript脚本前先执行布局。<br><strong>什么情况会导致强制同步布局？</strong><br>JavaScript运行时，获取到的元素属性样式都是上一帧的数值，所以如果在当前帧的渲染流程中，获取当前帧的某个元素属性之前对该元素进行了修改，浏览器就必须先应用属性再执行JavaScript逻辑，简而言之就是DOM先写后读操作，尤其是连续的读写操作，对浏览器的性能影响更大。<br><strong>对性能影响有多大？</strong><a href=\"https://codepen.io/JoeyCai/pen/NJryQz\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>DEMO通过改变1000个节点的属性，测试强制同步布局事件对性能的影响，具体参照下图。可以发现性能的损耗是极大的，连续的读写操作导致连续的强制同步事件触发，JavaScript执行时间变得很长：<br><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/20407/22/9210/435015/5c7cd4a7E5ec454a1/814a3da7231f7e94.jpg\" alt=\"强制同步布局\"></p>\n<h2 id=\"Paint-Composite：GPU加速\"><a href=\"#Paint-Composite：GPU加速\" class=\"headerlink\" title=\"Paint/Composite：GPU加速\"></a><span id=\"2-3\"><code>Paint/Composite</code>：GPU加速</span></h2><h3 id=\"1-将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing-Layer）\"><a href=\"#1-将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing-Layer）\" class=\"headerlink\" title=\"1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）\"></a>1. 将移动或渐变元素由渲染层（RenderLayer）提升为合成层（Compositing Layer）</h3><p><em>注：可在Chrome的开发者工具的layers面板查看合成层，layers面板打开方法command+shift+p(mac)/ctrl+shift+p(windows) -&gt; show layers</em><br>将复杂/频繁变化的元素提升到合成层，这样的好处是该元素绘制的时候不会触发其他元素的绘制。渲染层提升为合成层的原因如下（注意以下原因是在渲染层的基础之上）：   </p>\n<ul>\n<li>有3D transform属性</li>\n<li>有perspective属性</li>\n<li>3D canvas或硬件加速的2D canvas</li>\n<li>硬件加速的iframe元素（如iframe嵌入的页面有合成层，合成层需要硬件加速）</li>\n<li>使用了硬件加速的插件，如flash/iframe</li>\n<li>对opacity/transform属性应用了animation/transition（当animation/transition为active）   </li>\n<li>will-change属性为opacity、transform、top、left、bottom、right</li>\n<li>子元素是compositing layer</li>\n<li>兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层        </li>\n</ul>\n<p><strong>为什么会有性能提升？</strong>   </p>\n<ul>\n<li>只重绘需要重绘的部分</li>\n<li>GPU加速：合成层的位图直接由GPU合成，比CPU处理速度更快 </li>\n</ul>\n<p><strong>性能提升有多少？</strong>   <a href=\"https://codepen.io/JoeyCai/pen/QoqMeO\" target=\"_blank\" rel=\"noopener\">DEMO</a><br>通过demo可以看到，提升为合成层之后，paint所需的时间大大减少。<br><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/16031/7/10460/249740/5c871e47Ea6fc73a7/6dff807ff7296591.jpg\" alt=\"render layer -&gt; compositing layer\">   </p>\n<p><strong>提升合成层是不是越多越好？</strong><br>可以看到提升合成层后，paint时间大大下降。但是合成层的创建需要消耗额外的内存和管理资源，过多的合成层给页面带来的内存开销很大，<a href=\"https://codepen.io/JoeyCai/pen/NJaOvy\" target=\"_blank\" rel=\"noopener\">DEMO</a>创建了5000个元素，全部元素都提升为合成层与不提升时的内存消耗进行对比。这一点在移动端尤其需要注意，相比较于PC，移动设备的内存资源更加紧张。<br><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/30928/10/5654/389279/5c87757cE22aa61cc/1b0b1d36b15cd200.jpg\" alt=\"过多合成层\">     </p>\n<p><strong>只提升动画元素的渲染层</strong><br>基于提升为合成层来提升性能的原理，当页面其他部分绘制比较复杂且相对静态时，我们可以考虑将动画元素单独提升为合成层，减少动画元素对页面其他元素的影响。      </p>\n<h3 id=\"2-避免提升合成层的陷阱\"><a href=\"#2-避免提升合成层的陷阱\" class=\"headerlink\" title=\"2. 避免提升合成层的陷阱\"></a>2. 避免提升合成层的陷阱</h3><p>回顾一下提升为合成层的最后一个原因：兄弟元素是compositing layer，与当前的非composting layer有重叠，composting layer的层级低于非composting layer层。<br>这种情况下导致的提升合成层一般都是预期外的。其原因与屏幕的渲染流程有关，我们回忆一下页面映射的最后一步，每一个Compositing Layer对应一张位图，合成器最后将这些位图根据层级关系合并起来最终输出到屏幕。此时我们假设A是已知的合成层，而B理想中应当是普通渲染层，其层级关系如图所示：<br><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/29982/12/10660/38006/5c8783e5E829c400b/f80855a3afd155f9.jpg\" alt=\"层级陷阱\"><br>B作为普通渲染层与父级元素位于同一张位图，A单独在一张位图，此时合并的时候层级就会出现问题，如果直接将B置于A之上，有可能导致层级低于A的B的父元素反而显示在了A之上，反之A，B的层级关系就不对了。浏览器此时的解决方案，就是将B也单独出来作为compositing layer进行渲染，导致了意料外的compositing layer生成。<br>这种时候第一直觉就是避免重叠的发生不就好了嘛？然而事情并不简单。在查找资料的时候发现了一个神奇宝贝——<strong>assumedOverlap</strong>。字面意思是假设重叠，对于无法/难以判断是否会与compositing layer重合的某些元素，浏览器假设会发生重叠，提升为compositing layer。<br>对此浏览器也进行了优化的，通过层压缩（Layer Squashing）处理，将与合成层有重叠且连续多个的渲染层合并为一个合成层。防止由于重叠导致的提升合成层过多，导致的层爆炸（Layer Explosion），可参考<a href=\"https://codepen.io/JoeyCai/pen/jJaoop\" target=\"_blank\" rel=\"noopener\">DEMO</a>。<br>然而层压缩还是有解决不了的情况，查看<a href=\"https://chromium.googlesource.com/chromium/blink/+/master/Source/platform/graphics/CompositingReasons.cpp\" target=\"_blank\" rel=\"noopener\">源码</a>可以列出以下原因（注意一下都是在重叠/假设重叠的前提下）：      </p>\n<ul>\n<li><code>scrollsWithRespectToSquashingLayer</code>：渲染层相对于压缩层滚动，当滚动的渲染层与合成层重叠时，会有新的合成层生成且无法压缩。<a href=\"https://codepen.io/JoeyCai/pen/LaOvoM\" target=\"_blank\" rel=\"noopener\">DEMO(这个例子不是很好，codepen用iframe嵌入，整个iframe都变成了合成层，如果想看效果可以在本地看)</a>   </li>\n<li><code>squashingSparsityExceeded</code>：渲染层压缩后会导致压缩层过于稀疏。<a href=\"https://codepen.io/JoeyCai/pen/ZPaNmV\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingClippingContainerMismatch</code>：渲染层和压缩层的裁剪容器（clip container）不同，简单理解就是重叠的渲染层的容器overflow类型不同。<a href=\"https://codepen.io/JoeyCai/pen/xBpBrG\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingOpacityAncestorMismatch</code>：渲染层与压缩层的继承自祖先的opacity属性不同。<a href=\"https://codepen.io/JoeyCai/pen/VRrorE\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingTransformAncestorMismatch</code>：渲染层与压缩层的继承自祖先的transform不同。<a href=\"https://codepen.io/JoeyCai/pen/wOpOLQ\" target=\"_blank\" rel=\"noopener\">DEMO</a></li>\n<li><code>squashingFilterAncestorMismatch</code>：渲染层与压缩层的继承自祖先的filter属性不同，或者是渲染层本身有filter属性。<a href=\"https://codepen.io/JoeyCai/pen/WmdmLL\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingWouldBreakPaintOrder</code>：无法在不打乱渲染顺序的前提下压缩（e.g. 父元素有mask/filter属性，子元素与压缩层overlap，则假如合并了，父元素的mask/filter属性无法局部应用在压缩层，导致渲染结果有误）。<a href=\"https://codepen.io/JoeyCai/pen/eXyoMg\" target=\"_blank\" rel=\"noopener\">DEMO</a>  </li>\n<li><code>squashingVideoIsDisallowed</code>：video元素无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/zbpXME\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashedLayerClipsCompositingDescendants</code>：当合成层是被剪切的子元素时，与之重叠的渲染层无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/XGZrgY\" target=\"_blank\" rel=\"noopener\">DEMO</a></li>\n<li><code>squashingLayoutPartIsDisallowed</code>：无法压缩frame/iframe/plugin。   </li>\n<li><code>squashingReflectionDisallowed</code>：无法压缩有reflection属性的渲染层。 <a href=\"https://codepen.io/JoeyCai/pen/QoQWgB\" target=\"_blank\" rel=\"noopener\">DEMO</a>  </li>\n<li><code>squashingBlendingDisallowed</code>：无法压缩有blend mode属性的渲染层。<a href=\"https://codepen.io/JoeyCai/pen/vPdYdm\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n<li><code>squashingNearestFixedPositionMismatch</code>：渲染层的最近fixed元素与压缩层不同，无法被压缩。<a href=\"https://codepen.io/JoeyCai/pen/EMQaWW\" target=\"_blank\" rel=\"noopener\">DEMO</a>    </li>\n</ul>\n<p>当发现页面明明没有什么内容却比较卡的时候可以检查一下是不是这个原因，以下给出常见的层压缩解决不了的情况：   </p>\n<ol>\n<li>带<code>transform</code>动画的元素，其后的元素为<code>relative/absolute</code>定位<br>原因：relative元素和relative下的absolute元素由于assumedOverlap原因都被被提升为合成层，又由于设置了overflow:hidden，基于前面提到的<code>squashingClippingContainerMismatch</code>，渲染层与合成层的裁剪容器不同，导致无法层压缩，出现过多的合成层。<br>解决方法：为动画的元素设置<code>z-index</code>扰乱compositing layer的排序。<a href=\"https://codepen.io/JoeyCai/pen/GeOeWy\" target=\"_blank\" rel=\"noopener\">DEMO</a>   </li>\n</ol>\n<h1 id=\"三、参考\"><a href=\"#三、参考\" class=\"headerlink\" title=\"三、参考\"></a>三、<span id=\"3\">参考</span></h1><p>本文结构主要参照文章[1]，对其中的一些优化点进行了实际测试和扩展，也算是一篇读后感吧~<br>关于层压缩部分情况过于复杂，没找到什么资料，感觉还没有完全吃透，后面有机会再重新整理一下。感恩以下大佬！</p>\n<ol>\n<li>深度剖析浏览器渲染性能原理，你到底知道多少？ <a href=\"https://www.jianshu.com/p/a32b890c29b1\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/a32b890c29b1</a></li>\n<li><span id=\"refs-5\">Optimizing CSS: ID Selectors and Other Myths <a href=\"https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/\" target=\"_blank\" rel=\"noopener\">https://www.sitepoint.com/optimizing-css-id-selectors-and-other-myths/</a></span>      </li>\n<li>GPU Accelerated Compositing in Chrome <a href=\"http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome\" target=\"_blank\" rel=\"noopener\">http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome</a></li>\n<li>GPU加速是什么 <a href=\"https://aotu.io/notes/2017/04/11/GPU/\" target=\"_blank\" rel=\"noopener\">https://aotu.io/notes/2017/04/11/GPU/</a></li>\n<li>Blink Compositing Update: Recap and Squashing <a href=\"https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/presentation/d/1WOhbWLkhMyo4vZUaHq-FO-mt0B2sejXw-lMwohD5iUo/edit#slide=id.gccb6cccc_0719</a>      </li>\n<li>无线性能优化：Composite <a href=\"http://taobaofed.org/blog/2016/04/25/performance-composite/\" target=\"_blank\" rel=\"noopener\">http://taobaofed.org/blog/2016/04/25/performance-composite/</a></li>\n</ol>\n<p>撒花完结~欢迎指教~   </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjt8ew04o0000yn7ope7t03gv","category_id":"cjt8ew04v0003yn7ouu0elrxk","_id":"cjt8ew05a000fyn7osnr8l97b"},{"post_id":"cjt8ew0500007yn7oz1trfwkj","category_id":"cjt8ew04v0003yn7ouu0elrxk","_id":"cjt8ew05d000jyn7oza7v3zs2"},{"post_id":"cjt8ew057000byn7oo1okigop","category_id":"cjt8ew04v0003yn7ouu0elrxk","_id":"cjt8ew05e000nyn7odqkghs4c"},{"post_id":"cjt8ew04s0002yn7ool53iiiz","category_id":"cjt8ew04v0003yn7ouu0elrxk","_id":"cjt8ew05g000ryn7o21mh2vs7"},{"post_id":"cjt8ew04x0005yn7odiffk5te","category_id":"cjt8ew04v0003yn7ouu0elrxk","_id":"cjt8ew05h000tyn7oo9zrs9mj"},{"post_id":"cjt8ew04z0006yn7o1nrwleqm","category_id":"cjt8ew05e000myn7ojz1yoea8","_id":"cjt8ew05j000yyn7o9gkimz3h"},{"post_id":"cjt8ew059000dyn7ohna0063z","category_id":"cjt8ew05h000uyn7ol6vfdnq2","_id":"cjt8ew05l0013yn7oinocxgqy"},{"post_id":"cjt8ew05j0011yn7o911ljmqr","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05n0019yn7o0usybowa"},{"post_id":"cjt8ew05b000iyn7ok7413blc","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05o001dyn7oqjk5m6c0"},{"post_id":"cjt8ew05k0012yn7oo3me7hc7","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05q001hyn7oezxx4785"},{"post_id":"cjt8ew05l0016yn7o098zkgz3","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05r001lyn7o8tz7hnl0"},{"post_id":"cjt8ew05d000lyn7oahfuofwb","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05t001pyn7o3g20ejul"},{"post_id":"cjt8ew05m0018yn7ozksrb6d7","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05u001syn7o94mjwcob"},{"post_id":"cjt8ew05o001cyn7oes4bndxx","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05v001vyn7orfjhev3q"},{"post_id":"cjt8ew05f000qyn7o87goc0f4","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05w001yyn7omiw1p052"},{"post_id":"cjt8ew05p001gyn7oaoygf5uq","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05w0020yn7owf3kv3mj"},{"post_id":"cjt8ew05q001kyn7ojp5kvnsb","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05x0023yn7ovzc0inxi"},{"post_id":"cjt8ew05g000syn7o2svn7cjm","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05x0025yn7on4vwe2h1"},{"post_id":"cjt8ew05h000wyn7oyomdt3t6","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05x0027yn7oblj5w775"},{"post_id":"cjt8ew05i000xyn7o2snq8r3x","category_id":"cjt8ew05j000zyn7ocbcjicyb","_id":"cjt8ew05y0029yn7otkpofygm"},{"post_id":"cjt8ew05s001oyn7o0hmgysfc","category_id":"cjt8ew05x0022yn7oq5l3u1ls","_id":"cjt8ew05y002byn7ojizncqxh"}],"PostTag":[{"post_id":"cjt8ew04o0000yn7ope7t03gv","tag_id":"cjt8ew04x0004yn7o847al83l","_id":"cjt8ew057000ayn7oxoyrn1uy"},{"post_id":"cjt8ew0500007yn7oz1trfwkj","tag_id":"cjt8ew04x0004yn7o847al83l","_id":"cjt8ew059000cyn7o8p5rtxw5"},{"post_id":"cjt8ew057000byn7oo1okigop","tag_id":"cjt8ew04x0004yn7o847al83l","_id":"cjt8ew05b000hyn7ow25bh89m"},{"post_id":"cjt8ew04s0002yn7ool53iiiz","tag_id":"cjt8ew04x0004yn7o847al83l","_id":"cjt8ew05d000kyn7ousc9hj4r"},{"post_id":"cjt8ew04x0005yn7odiffk5te","tag_id":"cjt8ew04x0004yn7o847al83l","_id":"cjt8ew05f000pyn7onvgaisrk"},{"post_id":"cjt8ew04z0006yn7o1nrwleqm","tag_id":"cjt8ew05e000oyn7o268ivt3s","_id":"cjt8ew05m0017yn7o7cds66nr"},{"post_id":"cjt8ew04z0006yn7o1nrwleqm","tag_id":"cjt8ew05h000vyn7oysz7qxv7","_id":"cjt8ew05n001ayn7obcwis3af"},{"post_id":"cjt8ew04z0006yn7o1nrwleqm","tag_id":"cjt8ew05j0010yn7on3x2vttc","_id":"cjt8ew05p001fyn7oxye5ztpz"},{"post_id":"cjt8ew059000dyn7ohna0063z","tag_id":"cjt8ew05l0015yn7ou5v56ugf","_id":"cjt8ew05q001iyn7ow1bz88xm"},{"post_id":"cjt8ew05p001gyn7oaoygf5uq","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05s001nyn7o1u164qvt"},{"post_id":"cjt8ew05b000iyn7ok7413blc","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05t001qyn7o7q5n40y0"},{"post_id":"cjt8ew05q001kyn7ojp5kvnsb","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05v001uyn7ovj19so0s"},{"post_id":"cjt8ew05d000lyn7oahfuofwb","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05v001wyn7ou0tkqfwg"},{"post_id":"cjt8ew05f000qyn7o87goc0f4","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05w0021yn7oaau406x1"},{"post_id":"cjt8ew05g000syn7o2svn7cjm","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05x0026yn7oj5y8qoed"},{"post_id":"cjt8ew05h000wyn7oyomdt3t6","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05y002ayn7oo60opm84"},{"post_id":"cjt8ew05i000xyn7o2snq8r3x","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05z002dyn7ojm1pr311"},{"post_id":"cjt8ew05j0011yn7o911ljmqr","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew05z002fyn7oagqx7y9g"},{"post_id":"cjt8ew05k0012yn7oo3me7hc7","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew060002hyn7oe91z6eia"},{"post_id":"cjt8ew05l0016yn7o098zkgz3","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew060002jyn7o6gbccxuc"},{"post_id":"cjt8ew05m0018yn7ozksrb6d7","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew061002lyn7oe27e9yoh"},{"post_id":"cjt8ew05o001cyn7oes4bndxx","tag_id":"cjt8ew05p001eyn7ovigzds1n","_id":"cjt8ew062002nyn7o555xfuld"},{"post_id":"cjt8ew05s001oyn7o0hmgysfc","tag_id":"cjt8ew061002myn7od8z62zrz","_id":"cjt8ew062002oyn7occsfh7w6"}],"Tag":[{"name":"threejs","_id":"cjt8ew04x0004yn7o847al83l"},{"name":"sass","_id":"cjt8ew05e000oyn7o268ivt3s"},{"name":"compass","_id":"cjt8ew05h000vyn7oysz7qxv7"},{"name":"react","_id":"cjt8ew05j0010yn7on3x2vttc"},{"name":"小项目","_id":"cjt8ew05l0015yn7ou5v56ugf"},{"name":"周报","_id":"cjt8ew05p001eyn7ovigzds1n"},{"name":"日常研究","_id":"cjt8ew061002myn7od8z62zrz"}]}}